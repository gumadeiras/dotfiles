[{"url":"http:\/\/nodejs.org\/api\/all.html#all_class_buffer","title":"Class: Buffer","description":"{Function}  Used to handle binary data. See the buffer section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_clearimmediate_immediateobject","title":"clearImmediate(immediateObject)","description":"clearImmediate is described in the timers section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_clearinterval_intervalobject","title":"clearInterval(intervalObject)","description":"clearInterval is described in the timers section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_cleartimeout_timeoutobject","title":"clearTimeout(timeoutObject)","description":"clearTimeout is described in the timers section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console","title":"console","description":"{Object}  Used to print to stdout and stderr. See the console section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_global","title":"global","description":"{Object} The global namespace object.  In browsers, the top-level scope is the global scope. This means that within the browser var something will define a new global variable. In Node.js this is different. The top-level scope is not the global scope; var something inside a Node.js module will be local to that module."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process","title":"process","description":"{Object}  The process object. See the process object section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_setimmediate_callback_args","title":"setImmediate(callback[, ...args])","description":"setImmediate is described in the timers section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_setinterval_callback_delay_args","title":"setInterval(callback, delay[, ...args])","description":"setInterval is described in the timers section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_settimeout_callback_delay_args","title":"setTimeout(callback, delay[, ...args])","description":"setTimeout is described in the timers section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_url","title":"URL","description":"The WHATWG URL class. See the URL section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_urlsearchparams","title":"URLSearchParams","description":"The WHATWG URLSearchParams class. See the URLSearchParams section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process","title":"Process","description":"The process object is a global that provides information about, and control over, the current Node.js process. As a global, it is always available to Node.js applications without using require()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_abort","title":"process.abort()","description":"The process.abort() method causes the Node.js process to exit immediately and generate a core file. This feature is not available in Worker threads."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_chdir_directory","title":"process.chdir(directory)","description":"The process.chdir() method changes the current working directory of the Node.js process or throws an exception if doing so fails (for instance, if the specified directory does not exist). console.log(`Starting directory: ${process.cwd()}`); try {   process.chdir(&#39;\/tmp&#39;);   console.log(`New directory: ${process.cwd()}`); } catch (err) {   console.error(`chdir: ${err}`); }  This feature is not available in Worker threads."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_cpuusage_previousvalue","title":"process.cpuUsage([previousValue])","description":"The process.cpuUsage() method returns the user and system CPU time usage of the current process, in an object with properties user and system, whose values are microsecond values (millionth of a second). These values measure time spent in user and system code respectively, and may end up being greater than actual elapsed time if multiple CPU cores are performing work for this process. The result of a previous call to process.cpuUsage() can be passed as the argument to the function, to get a diff reading. const startUsage = process.cpuUsage(); \/\/ { user: 38579, system: 6986 }  \/\/ spin the CPU for 500 milliseconds const now = Date.now(); while (Date.now() - now < 500);  console.log(process.cpuUsage(startUsage)); \/\/ { user: 514883, system: 11226 }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_cwd","title":"process.cwd()","description":"The process.cwd() method returns the current working directory of the Node.js process. console.log(`Current directory: ${process.cwd()}`);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_disconnect","title":"process.disconnect()","description":"If the Node.js process is spawned with an IPC channel (see the Child Process and Cluster documentation), the process.disconnect() method will close the IPC channel to the parent process, allowing the child process to exit gracefully once there are no other connections keeping it alive. The effect of calling process.disconnect() is that same as calling the parent process&#39;s ChildProcess.disconnect(). If the Node.js process was not spawned with an IPC channel, process.disconnect() will be undefined."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_dlopen_module_filename_flags","title":"process.dlopen(module, filename[, flags])","description":"The process.dlopen() method allows to dynamically load shared objects. It is primarily used by require() to load C++ Addons, and should not be used directly, except in special cases. In other words, require() should be preferred over process.dlopen(), unless there are specific reasons. The flags argument is an integer that allows to specify dlopen behavior. See the os.constants.dlopen documentation for details. If there are specific reasons to use process.dlopen() (for instance, to specify dlopen flags), it&#39;s often useful to use require.resolve() to look up the module&#39;s path. An important drawback when calling process.dlopen() is that the module instance must be passed. Functions exported by the C++ Addon will be accessible via module.exports. The example below shows how to load a C++ Addon, named as binding, that exports a foo function. All the symbols will be loaded before the call returns, by passing the RTLD_NOW constant. In this example the constant is assumed to be available. const os = require(&#39;os&#39;); process.dlopen(module, require.resolve(&#39;binding&#39;),                os.constants.dlopen.RTLD_NOW); module.exports.foo();"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_emitwarning_warning_options","title":"process.emitWarning(warning[, options])","description":"The process.emitWarning() method can be used to emit custom or application specific process warnings. These can be listened for by adding a handler to the &#39;warning&#39; event. \/\/ Emit a warning with a code and additional detail. process.emitWarning(&#39;Something happened!&#39;, {   code: &#39;MY_WARNING&#39;,   detail: &#39;This is some additional information&#39; }); \/\/ Emits: \/\/ (node:56338) [MY_WARNING] Warning: Something happened! \/\/ This is some additional information  In this example, an Error object is generated internally by process.emitWarning() and passed through to the &#39;warning&#39; handler. process.on(&#39;warning&#39;, (warning) => {   console.warn(warning.name);    \/\/ &#39;Warning&#39;   console.warn(warning.message); \/\/ &#39;Something happened!&#39;   console.warn(warning.code);    \/\/ &#39;MY_WARNING&#39;   console.warn(warning.stack);   \/\/ Stack trace   console.warn(warning.detail);  \/\/ &#39;This is some additional information&#39; });  If warning is passed as an Error object, the options argument is ignored."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_emitwarning_warning_type_code_ctor","title":"process.emitWarning(warning[, type[, code]][, ctor])","description":"The process.emitWarning() method can be used to emit custom or application specific process warnings. These can be listened for by adding a handler to the &#39;warning&#39; event. \/\/ Emit a warning using a string. process.emitWarning(&#39;Something happened!&#39;); \/\/ Emits: (node: 56338) Warning: Something happened!  \/\/ Emit a warning using a string and a type. process.emitWarning(&#39;Something Happened!&#39;, &#39;CustomWarning&#39;); \/\/ Emits: (node:56338) CustomWarning: Something Happened!  process.emitWarning(&#39;Something happened!&#39;, &#39;CustomWarning&#39;, &#39;WARN001&#39;); \/\/ Emits: (node:56338) [WARN001] CustomWarning: Something happened!  In each of the previous examples, an Error object is generated internally by process.emitWarning() and passed through to the &#39;warning&#39; handler. process.on(&#39;warning&#39;, (warning) => {   console.warn(warning.name);   console.warn(warning.message);   console.warn(warning.code);   console.warn(warning.stack); });  If warning is passed as an Error object, it will be passed through to the &#39;warning&#39; event handler unmodified (and the optional type, code and ctor arguments will be ignored): \/\/ Emit a warning using an Error object. const myWarning = new Error(&#39;Something happened!&#39;); \/\/ Use the Error name property to specify the type name myWarning.name = &#39;CustomWarning&#39;; myWarning.code = &#39;WARN001&#39;;  process.emitWarning(myWarning); \/\/ Emits: (node:56338) [WARN001] CustomWarning: Something happened!  A TypeError is thrown if warning is anything other than a string or Error object. Note that while process warnings use Error objects, the process warning mechanism is not a replacement for normal error handling mechanisms. The following additional handling is implemented if the warning type is &#39;DeprecationWarning&#39;:  If the --throw-deprecation command-line flag is used, the deprecation warning is thrown as an exception rather than being emitted as an event. If the --no-deprecation command-line flag is used, the deprecation warning is suppressed. If the --trace-deprecation command-line flag is used, the deprecation warning is printed to stderr along with the full stack trace."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_avoiding_duplicate_warnings","title":"Avoiding duplicate warnings","description":"As a best practice, warnings should be emitted only once per process. To do so, it is recommended to place the emitWarning() behind a simple boolean flag as illustrated in the example below: function emitMyWarning() {   if (!emitMyWarning.warned) {     emitMyWarning.warned = true;     process.emitWarning(&#39;Only warn once!&#39;);   } } emitMyWarning(); \/\/ Emits: (node: 56339) Warning: Only warn once! emitMyWarning(); \/\/ Emits nothing"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_exit_code","title":"process.exit([code])","description":"The process.exit() method instructs Node.js to terminate the process synchronously with an exit status of code. If code is omitted, exit uses either the &#39;success&#39; code 0 or the value of process.exitCode if it has been set. Node.js will not terminate until all the &#39;exit&#39; event listeners are called. To exit with a &#39;failure&#39; code: process.exit(1);  The shell that executed Node.js should see the exit code as 1. Calling process.exit() will force the process to exit as quickly as possible even if there are still asynchronous operations pending that have not yet completed fully, including I\/O operations to process.stdout and process.stderr. In most situations, it is not actually necessary to call process.exit() explicitly. The Node.js process will exit on its own if there is no additional work pending in the event loop. The process.exitCode property can be set to tell the process which exit code to use when the process exits gracefully. For instance, the following example illustrates a misuse of the process.exit() method that could lead to data printed to stdout being truncated and lost: \/\/ This is an example of what *not* to do: if (someConditionNotMet()) {   printUsageToStdout();   process.exit(1); }  The reason this is problematic is because writes to process.stdout in Node.js are sometimes asynchronous and may occur over multiple ticks of the Node.js event loop. Calling process.exit(), however, forces the process to exit before those additional writes to stdout can be performed. Rather than calling process.exit() directly, the code should set the process.exitCode and allow the process to exit naturally by avoiding scheduling any additional work for the event loop: \/\/ How to properly set the exit code while letting \/\/ the process exit gracefully. if (someConditionNotMet()) {   printUsageToStdout();   process.exitCode = 1; }  If it is necessary to terminate the Node.js process due to an error condition, throwing an uncaught error and allowing the process to terminate accordingly is safer than calling process.exit(). In Worker threads, this function stops the current thread rather than the current process."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_getegid","title":"process.getegid()","description":"The process.getegid() method returns the numerical effective group identity of the Node.js process. (See getegid(2).) if (process.getegid) {   console.log(`Current gid: ${process.getegid()}`); }  This function is only available on POSIX platforms (i.e. not Windows or Android)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_geteuid","title":"process.geteuid()","description":"The process.geteuid() method returns the numerical effective user identity of the process. (See geteuid(2).) if (process.geteuid) {   console.log(`Current uid: ${process.geteuid()}`); }  This function is only available on POSIX platforms (i.e. not Windows or Android)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_getgid","title":"process.getgid()","description":"The process.getgid() method returns the numerical group identity of the process. (See getgid(2).) if (process.getgid) {   console.log(`Current gid: ${process.getgid()}`); }  This function is only available on POSIX platforms (i.e. not Windows or Android)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_getgroups","title":"process.getgroups()","description":"The process.getgroups() method returns an array with the supplementary group IDs. POSIX leaves it unspecified if the effective group ID is included but Node.js ensures it always is. This function is only available on POSIX platforms (i.e. not Windows or Android)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_getuid","title":"process.getuid()","description":"The process.getuid() method returns the numeric user identity of the process. (See getuid(2).) if (process.getuid) {   console.log(`Current uid: ${process.getuid()}`); }  This function is only available on POSIX platforms (i.e. not Windows or Android)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_hasuncaughtexceptioncapturecallback","title":"process.hasUncaughtExceptionCaptureCallback()","description":"Indicates whether a callback has been set using process.setUncaughtExceptionCaptureCallback()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_hrtime_time","title":"process.hrtime([time])","description":"The process.hrtime() method returns the current high-resolution real time in a [seconds, nanoseconds] tuple Array, where nanoseconds is the remaining part of the real time that can&#39;t be represented in second precision. time is an optional parameter that must be the result of a previous process.hrtime() call to diff with the current time. If the parameter passed in is not a tuple Array, a TypeError will be thrown. Passing in a user-defined array instead of the result of a previous call to process.hrtime() will lead to undefined behavior. These times are relative to an arbitrary time in the past, and not related to the time of day and therefore not subject to clock drift. The primary use is for measuring performance between intervals: const NS_PER_SEC = 1e9; const time = process.hrtime(); \/\/ [ 1800216, 25 ]  setTimeout(() => {   const diff = process.hrtime(time);   \/\/ [ 1, 552 ]    console.log(`Benchmark took ${diff[0] * NS_PER_SEC + diff[1]} nanoseconds`);   \/\/ benchmark took 1000000552 nanoseconds }, 1000);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_initgroups_user_extragroup","title":"process.initgroups(user, extraGroup)","description":"The process.initgroups() method reads the \/etc\/group file and initializes the group access list, using all groups of which the user is a member. This is a privileged operation that requires that the Node.js process either have root access or the CAP_SETGID capability. Note that care must be taken when dropping privileges. Example: console.log(process.getgroups());         \/\/ [ 0 ] process.initgroups(&#39;bnoordhuis&#39;, 1000);   \/\/ switch user console.log(process.getgroups());         \/\/ [ 27, 30, 46, 1000, 0 ] process.setgid(1000);                     \/\/ drop root gid console.log(process.getgroups());         \/\/ [ 27, 30, 46, 1000 ]  This function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_kill_pid_signal","title":"process.kill(pid[, signal])","description":"The process.kill() method sends the signal to the process identified by pid. Signal names are strings such as &#39;SIGINT&#39; or &#39;SIGHUP&#39;. See Signal Events and kill(2) for more information. This method will throw an error if the target pid does not exist. As a special case, a signal of 0 can be used to test for the existence of a process. Windows platforms will throw an error if the pid is used to kill a process group. Even though the name of this function is process.kill(), it is really just a signal sender, like the kill system call. The signal sent may do something other than kill the target process. process.on(&#39;SIGHUP&#39;, () => {   console.log(&#39;Got SIGHUP signal.&#39;); });  setTimeout(() => {   console.log(&#39;Exiting.&#39;);   process.exit(0); }, 100);  process.kill(process.pid, &#39;SIGHUP&#39;);  When SIGUSR1 is received by a Node.js process, Node.js will start the debugger, see Signal Events."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_memoryusage","title":"process.memoryUsage()","description":"The process.memoryUsage() method returns an object describing the memory usage of the Node.js process measured in bytes. For example, the code: console.log(process.memoryUsage());  Will generate:  {   rss: 4935680,   heapTotal: 1826816,   heapUsed: 650472,   external: 49879 }  heapTotal and heapUsed refer to V8&#39;s memory usage. external refers to the memory usage of C++ objects bound to JavaScript objects managed by V8. rss, Resident Set Size, is the amount of space occupied in the main memory device (that is a subset of the total allocated memory) for the process, which includes the heap, code segment and stack. The heap is where objects, strings, and closures are stored. Variables are stored in the stack and the actual JavaScript code resides in the code segment. When using Worker threads, rss will be a value that is valid for the entire process, while the other fields will only refer to the current thread."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_nexttick_callback_args","title":"process.nextTick(callback[, ...args])","description":"The process.nextTick() method adds the callback to the \"next tick queue\". Once the current turn of the event loop turn runs to completion, all callbacks currently in the next tick queue will be called. This is not a simple alias to setTimeout(fn, 0). It is much more efficient. It runs before any additional I\/O events (including timers) fire in subsequent ticks of the event loop. console.log(&#39;start&#39;); process.nextTick(() => {   console.log(&#39;nextTick callback&#39;); }); console.log(&#39;scheduled&#39;); \/\/ Output: \/\/ start \/\/ scheduled \/\/ nextTick callback  This is important when developing APIs in order to give users the opportunity to assign event handlers after an object has been constructed but before any I\/O has occurred: function MyThing(options) {   this.setupOptions(options);    process.nextTick(() => {     this.startDoingStuff();   }); }  const thing = new MyThing(); thing.getReadyForStuff();  \/\/ thing.startDoingStuff() gets called now, not before.  It is very important for APIs to be either 100% synchronous or 100% asynchronous. Consider this example: \/\/ WARNING!  DO NOT USE!  BAD UNSAFE HAZARD! function maybeSync(arg, cb) {   if (arg) {     cb();     return;   }    fs.stat(&#39;file&#39;, cb); }  This API is hazardous because in the following case: const maybeTrue = Math.random() > 0.5;  maybeSync(maybeTrue, () => {   foo(); });  bar();  It is not clear whether foo() or bar() will be called first. The following approach is much better: function definitelyAsync(arg, cb) {   if (arg) {     process.nextTick(cb);     return;   }    fs.stat(&#39;file&#39;, cb); }  The next tick queue is completely drained on each pass of the event loop before additional I\/O is processed. As a result, recursively setting nextTick() callbacks will block any I\/O from happening, just like a while(true); loop."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_send_message_sendhandle_options_callback","title":"process.send(message[, sendHandle[, options]][, callback])","description":"If Node.js is spawned with an IPC channel, the process.send() method can be used to send messages to the parent process. Messages will be received as a &#39;message&#39; event on the parent&#39;s ChildProcess object. If Node.js was not spawned with an IPC channel, process.send() will be undefined. The message goes through serialization and parsing. The resulting message might not be the same as what is originally sent."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_setegid_id","title":"process.setegid(id)","description":"The process.setegid() method sets the effective group identity of the process. (See setegid(2).) The id can be passed as either a numeric ID or a group name string. If a group name is specified, this method blocks while resolving the associated a numeric ID. if (process.getegid && process.setegid) {   console.log(`Current gid: ${process.getegid()}`);   try {     process.setegid(501);     console.log(`New gid: ${process.getegid()}`);   } catch (err) {     console.log(`Failed to set gid: ${err}`);   } }  This function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_seteuid_id","title":"process.seteuid(id)","description":"The process.seteuid() method sets the effective user identity of the process. (See seteuid(2).) The id can be passed as either a numeric ID or a username string. If a username is specified, the method blocks while resolving the associated numeric ID. if (process.geteuid && process.seteuid) {   console.log(`Current uid: ${process.geteuid()}`);   try {     process.seteuid(501);     console.log(`New uid: ${process.geteuid()}`);   } catch (err) {     console.log(`Failed to set uid: ${err}`);   } }  This function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_setgid_id","title":"process.setgid(id)","description":"The process.setgid() method sets the group identity of the process. (See setgid(2).) The id can be passed as either a numeric ID or a group name string. If a group name is specified, this method blocks while resolving the associated numeric ID. if (process.getgid && process.setgid) {   console.log(`Current gid: ${process.getgid()}`);   try {     process.setgid(501);     console.log(`New gid: ${process.getgid()}`);   } catch (err) {     console.log(`Failed to set gid: ${err}`);   } }  This function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_setgroups_groups","title":"process.setgroups(groups)","description":"The process.setgroups() method sets the supplementary group IDs for the Node.js process. This is a privileged operation that requires the Node.js process to have root or the CAP_SETGID capability. The groups array can contain numeric group IDs, group names or both. This function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_setuid_id","title":"process.setuid(id)","description":"The process.setuid(id) method sets the user identity of the process. (See setuid(2).) The id can be passed as either a numeric ID or a username string. If a username is specified, the method blocks while resolving the associated numeric ID. if (process.getuid && process.setuid) {   console.log(`Current uid: ${process.getuid()}`);   try {     process.setuid(501);     console.log(`New uid: ${process.getuid()}`);   } catch (err) {     console.log(`Failed to set uid: ${err}`);   } }  This function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_setuncaughtexceptioncapturecallback_fn","title":"process.setUncaughtExceptionCaptureCallback(fn)","description":"The process.setUncaughtExceptionCaptureCallback() function sets a function that will be invoked when an uncaught exception occurs, which will receive the exception value itself as its first argument. If such a function is set, the &#39;uncaughtException&#39; event will not be emitted. If --abort-on-uncaught-exception was passed from the command line or set through v8.setFlagsFromString(), the process will not abort. To unset the capture function, process.setUncaughtExceptionCaptureCallback(null) may be used. Calling this method with a non-null argument while another capture function is set will throw an error. Using this function is mutually exclusive with using the deprecated domain built-in module."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_umask_mask","title":"process.umask([mask])","description":"The process.umask() method sets or returns the Node.js process&#39;s file mode creation mask. Child processes inherit the mask from the parent process. Invoked without an argument, the current mask is returned, otherwise the umask is set to the argument value and the previous mask is returned. const newmask = 0o022; const oldmask = process.umask(newmask); console.log(   `Changed umask from ${oldmask.toString(8)} to ${newmask.toString(8)}` );  This feature is not available in Worker threads."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_uptime","title":"process.uptime()","description":"The process.uptime() method returns the number of seconds the current Node.js process has been running. The return value includes fractions of a second. Use Math.floor() to get whole seconds."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_events","title":"Process Events","description":"The process object is an instance of EventEmitter."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_exit_codes","title":"Exit Codes","description":"Node.js will normally exit with a 0 status code when no more async operations are pending. The following status codes are used in other cases:  1 Uncaught Fatal Exception - There was an uncaught exception, and it was not handled by a domain or an &#39;uncaughtException&#39; event handler. 2 - Unused (reserved by Bash for builtin misuse) 3 Internal JavaScript Parse Error - The JavaScript source code internal in Node.js&#39;s bootstrapping process caused a parse error. This is extremely rare, and generally can only happen during development of Node.js itself. 4 Internal JavaScript Evaluation Failure - The JavaScript source code internal in Node.js&#39;s bootstrapping process failed to return a function value when evaluated. This is extremely rare, and generally can only happen during development of Node.js itself. 5 Fatal Error - There was a fatal unrecoverable error in V8. Typically a message will be printed to stderr with the prefix FATAL ERROR. 6 Non-function Internal Exception Handler - There was an uncaught exception, but the internal fatal exception handler function was somehow set to a non-function, and could not be called. 7 Internal Exception Handler Run-Time Failure - There was an uncaught exception, and the internal fatal exception handler function itself threw an error while attempting to handle it. This can happen, for example, if an &#39;uncaughtException&#39; or domain.on(&#39;error&#39;) handler throws an error. 8 - Unused. In previous versions of Node.js, exit code 8 sometimes indicated an uncaught exception. 9 - Invalid Argument - Either an unknown option was specified, or an option requiring a value was provided without a value. 10 Internal JavaScript Run-Time Failure - The JavaScript source code internal in Node.js&#39;s bootstrapping process threw an error when the bootstrapping function was called. This is extremely rare, and generally can only happen during development of Node.js itself. 12 Invalid Debug Argument - The --inspect and\/or --inspect-brk options were set, but the port number chosen was invalid or unavailable. >128 Signal Exits - If Node.js receives a fatal signal such as SIGKILL or SIGHUP, then its exit code will be 128 plus the value of the signal code. This is a standard POSIX practice, since exit codes are defined to be 7-bit integers, and signal exits set the high-order bit, and then contain the value of the signal code. For example, signal SIGABRT has value 6, so the expected exit code will be 128 + 6, or 134."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_require","title":"require()","description":"This variable may appear to be global but is not. See require()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_about_this_documentation","title":"About this Documentation","description":"The goal of this documentation is to comprehensively explain the Node.js API, both from a reference as well as a conceptual point of view. Each section describes a built-in module or high-level concept. Where appropriate, property types, method arguments, and the arguments provided to event handlers are detailed in a list underneath the topic heading."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_contributing","title":"Contributing","description":"If errors are found in this documentation, please submit an issue or see the contributing guide for directions on how to submit a patch. Every file is generated based on the corresponding .md file in the doc\/api\/ folder in Node.js&#39;s source tree. The documentation is generated using the tools\/doc\/generate.js program. An HTML template is located at doc\/template.html."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_stability_index","title":"Stability Index","description":"Throughout the documentation are indications of a section&#39;s stability. The Node.js API is still somewhat changing, and as it matures, certain parts are more reliable than others. Some are so proven, and so relied upon, that they are unlikely to ever change at all. Others are brand new and experimental, or known to be hazardous and in the process of being redesigned. The stability indices are as follows:  Stability: 0 - Deprecated. This feature is known to be problematic, and changes may be planned. Do not rely on it. Use of the feature may cause warnings to be emitted. Backwards compatibility across major versions should not be expected.    Stability: 1 - Experimental. This feature is still under active development and subject to non-backwards compatible changes, or even removal, in any future version. Use of the feature is not recommended in production environments. Experimental features are not subject to the Node.js Semantic Versioning model.    Stability: 2 - Stable. The API has proven satisfactory. Compatibility with the npm ecosystem is a high priority, and will not be broken unless absolutely necessary.  Caution must be used when making use of Experimental features, particularly within modules that may be used as dependencies (or dependencies of dependencies) within a Node.js application. End users may not be aware that experimental features are being used, and therefore may experience unexpected failures or behavior changes when API modifications occur. To help avoid such surprises, Experimental features may require a command-line flag to explicitly enable them, or may cause a process warning to be emitted. By default, such warnings are printed to stderr and may be handled by attaching a listener to the &#39;warning&#39; event."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_json_output","title":"JSON Output","description":"Every .html document has a corresponding .json document presenting the same information in a structured manner. This feature is experimental, and added for the benefit of IDEs and other utilities that wish to do programmatic things with the documentation."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_syscalls_and_man_pages","title":"Syscalls and man pages","description":"System calls like open(2) and read(2) define the interface between user programs and the underlying operating system. Node.js functions which simply wrap a syscall, like fs.open(), will document that. The docs link to the corresponding man pages (short for manual pages) which describe how the syscalls work. Most Unix syscalls have Windows equivalents, but behavior may differ on Windows relative to Linux and macOS. For an example of the subtle ways in which it&#39;s sometimes impossible to replace Unix syscall semantics on Windows, see Node issue 4760."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_usage","title":"Usage","description":"node [options] [V8 options] [script.js | -e \"script\" | - ] [arguments] Please see the Command Line Options document for information about different options and ways to run scripts with Node.js. Example An example of a web server written with Node.js which responds with &#39;Hello World!&#39;: Commands displayed in this document are shown starting with $ or > to replicate how they would appear in a user&#39;s terminal. Do not include the $ and > character they are there to indicate the start of each command. There are many tutorials and examples that follow this convention: $ or > for commands run as a regular user, and # for commands that should be executed as an administrator. Lines that don\u2019t start with $ or > character are typically showing the output of the previous command. Firstly, make sure to have downloaded and installed Node.js. See this guide for further install information. Now, create an empty project folder called projects, navigate into it: Project folder can be named base on user&#39;s current project title but this example will use projects as the project folder. Linux and Mac: $ mkdir ~\/projects $ cd ~\/projects  Windows CMD: > mkdir %USERPROFILE%\\projects > cd %USERPROFILE%\\projects  Windows PowerShell: > mkdir $env:USERPROFILE\\projects > cd $env:USERPROFILE\\projects  Next, create a new source file in the projects  folder and call it hello-world.js. In Node.js it is considered good style to use hyphens (-) or underscores (_) to separate  multiple words in filenames. Open hello-world.js in any preferred text editor and paste in the following content. const http = require(&#39;http&#39;);  const hostname = &#39;127.0.0.1&#39;; const port = 3000;  const server = http.createServer((req, res) => {   res.statusCode = 200;   res.setHeader(&#39;Content-Type&#39;, &#39;text\/plain&#39;);   res.end(&#39;Hello World!\\n&#39;); });  server.listen(port, hostname, () => {   console.log(`Server running at http:\/\/${hostname}:${port}\/`); });  Save the file, go back to the terminal window enter the following command: $ node hello-world.js  An output like this should appear in the terminal to indicate Node.js server is running: Server running at http:\/\/127.0.0.1:3000\/  Now, open any preferred web browser and visit http:\/\/127.0.0.1:3000. If the browser displays the string Hello, world!, that indicates the server is working. Many of the examples in the documentation can be run similarly."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_c_addons","title":"C++ Addons","description":"Node.js Addons are dynamically-linked shared objects, written in C++, that can be loaded into Node.js using the require() function, and used just as if they were an ordinary Node.js module. They are used primarily to provide an interface between JavaScript running in Node.js and C\/C++ libraries. At the moment, the method for implementing Addons is rather complicated, involving knowledge of several components and APIs:  V8: the C++ library Node.js currently uses to provide the JavaScript implementation. V8 provides the mechanisms for creating objects, calling functions, etc. V8&#39;s API is documented mostly in the v8.h header file (deps\/v8\/include\/v8.h in the Node.js source tree), which is also available online.  libuv: The C library that implements the Node.js event loop, its worker threads and all of the asynchronous behaviors of the platform. It also serves as a cross-platform abstraction library, giving easy, POSIX-like access across all major operating systems to many common system tasks, such as interacting with the filesystem, sockets, timers, and system events. libuv also provides a pthreads-like threading abstraction that may be used to power more sophisticated asynchronous Addons that need to move beyond the standard event loop. Addon authors are encouraged to think about how to avoid blocking the event loop with I\/O or other time-intensive tasks by off-loading work via libuv to non-blocking system operations, worker threads or a custom use of libuv&#39;s threads.  Internal Node.js libraries. Node.js itself exports a number of C++ APIs that Addons can use \u2014 the most important of which is the node::ObjectWrap class.  Node.js includes a number of other statically linked libraries including OpenSSL. These other libraries are located in the deps\/ directory in the Node.js source tree. Only the libuv, OpenSSL, V8 and zlib symbols are purposefully re-exported by Node.js and may be used to various extents by Addons. See Linking to Node.js&#39; own dependencies for additional information.   All of the following examples are available for download and may be used as the starting-point for an Addon."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_hello_world","title":"Hello world","description":"This \"Hello world\" example is a simple Addon, written in C++, that is the equivalent of the following JavaScript code: module.exports.hello = () => &#39;world&#39;;  First, create the file hello.cc: \/\/ hello.cc #include <node.h>  namespace demo {  using v8::FunctionCallbackInfo; using v8::Isolate; using v8::Local; using v8::Object; using v8::String; using v8::Value;  void Method(const FunctionCallbackInfo<Value>& args) {   Isolate* isolate = args.GetIsolate();   args.GetReturnValue().Set(String::NewFromUtf8(isolate, \"world\")); }  void Initialize(Local<Object> exports) {   NODE_SET_METHOD(exports, \"hello\", Method); }  NODE_MODULE(NODE_GYP_MODULE_NAME, Initialize)  }  \/\/ namespace demo  Note that all Node.js Addons must export an initialization function following the pattern: void Initialize(Local<Object> exports); NODE_MODULE(NODE_GYP_MODULE_NAME, Initialize)  There is no semi-colon after NODE_MODULE as it&#39;s not a function (see node.h). The module_name must match the filename of the final binary (excluding the .node suffix). In the hello.cc example, then, the initialization function is Initialize and the addon module name is addon."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_building","title":"Building","description":"Once the source code has been written, it must be compiled into the binary addon.node file. To do so, create a file called binding.gyp in the top-level of the project describing the build configuration of the module using a JSON-like format. This file is used by node-gyp \u2014 a tool written specifically to compile Node.js Addons. {   \"targets\": [     {       \"target_name\": \"addon\",       \"sources\": [ \"hello.cc\" ]     }   ] }  A version of the node-gyp utility is bundled and distributed with Node.js as part of npm. This version is not made directly available for developers to use and is intended only to support the ability to use the npm install command to compile and install Addons. Developers who wish to use node-gyp directly can install it using the command npm install -g node-gyp. See the node-gyp installation instructions for more information, including platform-specific requirements. Once the binding.gyp file has been created, use node-gyp configure to generate the appropriate project build files for the current platform. This will generate either a Makefile (on Unix platforms) or a vcxproj file (on Windows) in the build\/ directory. Next, invoke the node-gyp build command to generate the compiled addon.node file. This will be put into the build\/Release\/ directory. When using npm install to install a Node.js Addon, npm uses its own bundled version of node-gyp to perform this same set of actions, generating a compiled version of the Addon for the user&#39;s platform on demand. Once built, the binary Addon can be used from within Node.js by pointing require() to the built addon.node module: \/\/ hello.js const addon = require(&#39;.\/build\/Release\/addon&#39;);  console.log(addon.hello()); \/\/ Prints: &#39;world&#39;  Please see the examples below for further information or https:\/\/github.com\/arturadib\/node-qt for an example in production. Because the exact path to the compiled Addon binary can vary depending on how it is compiled (i.e. sometimes it may be in .\/build\/Debug\/), Addons can use the bindings package to load the compiled module. Note that while the bindings package implementation is more sophisticated in how it locates Addon modules, it is essentially using a try-catch pattern similar to: try {   return require(&#39;.\/build\/Release\/addon.node&#39;); } catch (err) {   return require(&#39;.\/build\/Debug\/addon.node&#39;); }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_linking_to_node_js_own_dependencies","title":"Linking to Node.js' own dependencies","description":"Node.js uses a number of statically linked libraries such as V8, libuv and OpenSSL. All Addons are required to link to V8 and may link to any of the other dependencies as well. Typically, this is as simple as including the appropriate #include <...> statements (e.g. #include <v8.h>) and node-gyp will locate the appropriate headers automatically. However, there are a few caveats to be aware of:  When node-gyp runs, it will detect the specific release version of Node.js and download either the full source tarball or just the headers. If the full source is downloaded, Addons will have complete access to the full set of Node.js dependencies. However, if only the Node.js headers are downloaded, then only the symbols exported by Node.js will be available.  node-gyp can be run using the --nodedir flag pointing at a local Node.js source image. Using this option, the Addon will have access to the full set of dependencies."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_loading_addons_using_require","title":"Loading Addons using require()","description":"The filename extension of the compiled Addon binary is .node (as opposed to .dll or .so). The require() function is written to look for files with the .node file extension and initialize those as dynamically-linked libraries. When calling require(), the .node extension can usually be omitted and Node.js will still find and initialize the Addon. One caveat, however, is that Node.js will first attempt to locate and load modules or JavaScript files that happen to share the same base name. For instance, if there is a file addon.js in the same directory as the binary addon.node, then require(&#39;addon&#39;) will give precedence to the addon.js file and load it instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_native_abstractions_for_node_js","title":"Native Abstractions for Node.js","description":"Each of the examples illustrated in this document make direct use of the Node.js and V8 APIs for implementing Addons. It is important to understand that the V8 API can, and has, changed dramatically from one V8 release to the next (and one major Node.js release to the next). With each change, Addons may need to be updated and recompiled in order to continue functioning. The Node.js release schedule is designed to minimize the frequency and impact of such changes but there is little that Node.js can do currently to ensure stability of the V8 APIs. The Native Abstractions for Node.js (or nan) provide a set of tools that Addon developers are recommended to use to keep compatibility between past and future releases of V8 and Node.js. See the nan examples for an illustration of how it can be used."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_n_api","title":"N-API","description":"N-API is an API for building native Addons. It is independent from the underlying JavaScript runtime (e.g. V8) and is maintained as part of Node.js itself. This API will be Application Binary Interface (ABI) stable across versions of Node.js. It is intended to insulate Addons from changes in the underlying JavaScript engine and allow modules compiled for one version to run on later versions of Node.js without recompilation. Addons are built\/packaged with the same approach\/tools outlined in this document (node-gyp, etc.). The only difference is the set of APIs that are used by the native code. Instead of using the V8 or Native Abstractions for Node.js APIs, the functions available in the N-API are used. To use N-API in the above \"Hello world\" example, replace the content of hello.cc with the following. All other instructions remain the same. \/\/ hello.cc using N-API #include <node_api.h>  namespace demo {  napi_value Method(napi_env env, napi_callback_info args) {   napi_value greeting;   napi_status status;    status = napi_create_string_utf8(env, \"hello\", NAPI_AUTO_LENGTH, &greeting);   if (status != napi_ok) return nullptr;   return greeting; }  napi_value init(napi_env env, napi_value exports) {   napi_status status;   napi_value fn;    status = napi_create_function(env, nullptr, 0, Method, nullptr, &fn);   if (status != napi_ok) return nullptr;    status = napi_set_named_property(env, exports, \"hello\", fn);   if (status != napi_ok) return nullptr;   return exports; }  NAPI_MODULE(NODE_GYP_MODULE_NAME, init)  }  \/\/ namespace demo  The functions available and how to use them are documented in the section titled C\/C++ Addons - N-API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_addon_examples","title":"Addon examples","description":"Following are some example Addons intended to help developers get started. The examples make use of the V8 APIs. Refer to the online V8 reference for help with the various V8 calls, and V8&#39;s Embedder&#39;s Guide for an explanation of several concepts used such as handles, scopes, function templates, etc. Each of these examples using the following binding.gyp file: {   \"targets\": [     {       \"target_name\": \"addon\",       \"sources\": [ \"addon.cc\" ]     }   ] }  In cases where there is more than one .cc file, simply add the additional filename to the sources array: \"sources\": [\"addon.cc\", \"myexample.cc\"]  Once the binding.gyp file is ready, the example Addons can be configured and built using node-gyp: $ node-gyp configure build"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_function_arguments","title":"Function arguments","description":"Addons will typically expose objects and functions that can be accessed from JavaScript running within Node.js. When functions are invoked from JavaScript, the input arguments and return value must be mapped to and from the C\/C++ code. The following example illustrates how to read function arguments passed from JavaScript and how to return a result: \/\/ addon.cc #include <node.h>  namespace demo {  using v8::Exception; using v8::FunctionCallbackInfo; using v8::Isolate; using v8::Local; using v8::Number; using v8::Object; using v8::String; using v8::Value;  \/\/ This is the implementation of the \"add\" method \/\/ Input arguments are passed using the \/\/ const FunctionCallbackInfo<Value>& args struct void Add(const FunctionCallbackInfo<Value>& args) {   Isolate* isolate = args.GetIsolate();    \/\/ Check the number of arguments passed.   if (args.Length() < 2) {     \/\/ Throw an Error that is passed back to JavaScript     isolate->ThrowException(Exception::TypeError(         String::NewFromUtf8(isolate, \"Wrong number of arguments\")));     return;   }    \/\/ Check the argument types   if (!args[0]->IsNumber() || !args[1]->IsNumber()) {     isolate->ThrowException(Exception::TypeError(         String::NewFromUtf8(isolate, \"Wrong arguments\")));     return;   }    \/\/ Perform the operation   double value = args[0]->NumberValue() + args[1]->NumberValue();   Local<Number> num = Number::New(isolate, value);    \/\/ Set the return value (using the passed in   \/\/ FunctionCallbackInfo<Value>&)   args.GetReturnValue().Set(num); }  void Init(Local<Object> exports) {   NODE_SET_METHOD(exports, \"add\", Add); }  NODE_MODULE(NODE_GYP_MODULE_NAME, Init)  }  \/\/ namespace demo  Once compiled, the example Addon can be required and used from within Node.js: \/\/ test.js const addon = require(&#39;.\/build\/Release\/addon&#39;);  console.log(&#39;This should be eight:&#39;, addon.add(3, 5));"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_callbacks","title":"Callbacks","description":"It is common practice within Addons to pass JavaScript functions to a C++ function and execute them from there. The following example illustrates how to invoke such callbacks: \/\/ addon.cc #include <node.h>  namespace demo {  using v8::Function; using v8::FunctionCallbackInfo; using v8::Isolate; using v8::Local; using v8::Null; using v8::Object; using v8::String; using v8::Value;  void RunCallback(const FunctionCallbackInfo<Value>& args) {   Isolate* isolate = args.GetIsolate();   Local<Function> cb = Local<Function>::Cast(args[0]);   const unsigned argc = 1;   Local<Value> argv[argc] = { String::NewFromUtf8(isolate, \"hello world\") };   cb->Call(Null(isolate), argc, argv); }  void Init(Local<Object> exports, Local<Object> module) {   NODE_SET_METHOD(module, \"exports\", RunCallback); }  NODE_MODULE(NODE_GYP_MODULE_NAME, Init)  }  \/\/ namespace demo  Note that this example uses a two-argument form of Init() that receives the full module object as the second argument. This allows the Addon to completely overwrite exports with a single function instead of adding the function as a property of exports. To test it, run the following JavaScript: \/\/ test.js const addon = require(&#39;.\/build\/Release\/addon&#39;);  addon((msg) => {   console.log(msg); \/\/ Prints: &#39;hello world&#39; });  Note that, in this example, the callback function is invoked synchronously."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_object_factory","title":"Object factory","description":"Addons can create and return new objects from within a C++ function as illustrated in the following example. An object is created and returned with a property msg that echoes the string passed to createObject(): \/\/ addon.cc #include <node.h>  namespace demo {  using v8::FunctionCallbackInfo; using v8::Isolate; using v8::Local; using v8::Object; using v8::String; using v8::Value;  void CreateObject(const FunctionCallbackInfo<Value>& args) {   Isolate* isolate = args.GetIsolate();    Local<Object> obj = Object::New(isolate);   obj->Set(String::NewFromUtf8(isolate, \"msg\"), args[0]->ToString());    args.GetReturnValue().Set(obj); }  void Init(Local<Object> exports, Local<Object> module) {   NODE_SET_METHOD(module, \"exports\", CreateObject); }  NODE_MODULE(NODE_GYP_MODULE_NAME, Init)  }  \/\/ namespace demo  To test it in JavaScript: \/\/ test.js const addon = require(&#39;.\/build\/Release\/addon&#39;);  const obj1 = addon(&#39;hello&#39;); const obj2 = addon(&#39;world&#39;); console.log(obj1.msg, obj2.msg); \/\/ Prints: &#39;hello world&#39;"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_function_factory","title":"Function factory","description":"Another common scenario is creating JavaScript functions that wrap C++ functions and returning those back to JavaScript: \/\/ addon.cc #include <node.h>  namespace demo {  using v8::Function; using v8::FunctionCallbackInfo; using v8::FunctionTemplate; using v8::Isolate; using v8::Local; using v8::Object; using v8::String; using v8::Value;  void MyFunction(const FunctionCallbackInfo<Value>& args) {   Isolate* isolate = args.GetIsolate();   args.GetReturnValue().Set(String::NewFromUtf8(isolate, \"hello world\")); }  void CreateFunction(const FunctionCallbackInfo<Value>& args) {   Isolate* isolate = args.GetIsolate();    Local<FunctionTemplate> tpl = FunctionTemplate::New(isolate, MyFunction);   Local<Function> fn = tpl->GetFunction();    \/\/ omit this to make it anonymous   fn->SetName(String::NewFromUtf8(isolate, \"theFunction\"));    args.GetReturnValue().Set(fn); }  void Init(Local<Object> exports, Local<Object> module) {   NODE_SET_METHOD(module, \"exports\", CreateFunction); }  NODE_MODULE(NODE_GYP_MODULE_NAME, Init)  }  \/\/ namespace demo  To test: \/\/ test.js const addon = require(&#39;.\/build\/Release\/addon&#39;);  const fn = addon(); console.log(fn()); \/\/ Prints: &#39;hello world&#39;"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_wrapping_c_objects","title":"Wrapping C++ objects","description":"It is also possible to wrap C++ objects\/classes in a way that allows new instances to be created using the JavaScript new operator: \/\/ addon.cc #include <node.h> #include \"myobject.h\"  namespace demo {  using v8::Local; using v8::Object;  void InitAll(Local<Object> exports) {   MyObject::Init(exports); }  NODE_MODULE(NODE_GYP_MODULE_NAME, InitAll)  }  \/\/ namespace demo  Then, in myobject.h, the wrapper class inherits from node::ObjectWrap: \/\/ myobject.h #ifndef MYOBJECT_H #define MYOBJECT_H  #include <node.h> #include <node_object_wrap.h>  namespace demo {  class MyObject : public node::ObjectWrap {  public:   static void Init(v8::Local<v8::Object> exports);   private:   explicit MyObject(double value = 0);   ~MyObject();    static void New(const v8::FunctionCallbackInfo<v8::Value>& args);   static void PlusOne(const v8::FunctionCallbackInfo<v8::Value>& args);   static v8::Persistent<v8::Function> constructor;   double value_; };  }  \/\/ namespace demo  #endif  In myobject.cc, implement the various methods that are to be exposed. Below, the method plusOne() is exposed by adding it to the constructor&#39;s prototype: \/\/ myobject.cc #include \"myobject.h\"  namespace demo {  using v8::Context; using v8::Function; using v8::FunctionCallbackInfo; using v8::FunctionTemplate; using v8::Isolate; using v8::Local; using v8::Number; using v8::Object; using v8::Persistent; using v8::String; using v8::Value;  Persistent<Function> MyObject::constructor;  MyObject::MyObject(double value) : value_(value) { }  MyObject::~MyObject() { }  void MyObject::Init(Local<Object> exports) {   Isolate* isolate = exports->GetIsolate();    \/\/ Prepare constructor template   Local<FunctionTemplate> tpl = FunctionTemplate::New(isolate, New);   tpl->SetClassName(String::NewFromUtf8(isolate, \"MyObject\"));   tpl->InstanceTemplate()->SetInternalFieldCount(1);    \/\/ Prototype   NODE_SET_PROTOTYPE_METHOD(tpl, \"plusOne\", PlusOne);    constructor.Reset(isolate, tpl->GetFunction());   exports->Set(String::NewFromUtf8(isolate, \"MyObject\"),                tpl->GetFunction()); }  void MyObject::New(const FunctionCallbackInfo<Value>& args) {   Isolate* isolate = args.GetIsolate();    if (args.IsConstructCall()) {     \/\/ Invoked as constructor: `new MyObject(...)`     double value = args[0]->IsUndefined() ? 0 : args[0]->NumberValue();     MyObject* obj = new MyObject(value);     obj->Wrap(args.This());     args.GetReturnValue().Set(args.This());   } else {     \/\/ Invoked as plain function `MyObject(...)`, turn into construct call.     const int argc = 1;     Local<Value> argv[argc] = { args[0] };     Local<Context> context = isolate->GetCurrentContext();     Local<Function> cons = Local<Function>::New(isolate, constructor);     Local<Object> result =         cons->NewInstance(context, argc, argv).ToLocalChecked();     args.GetReturnValue().Set(result);   } }  void MyObject::PlusOne(const FunctionCallbackInfo<Value>& args) {   Isolate* isolate = args.GetIsolate();    MyObject* obj = ObjectWrap::Unwrap<MyObject>(args.Holder());   obj->value_ += 1;    args.GetReturnValue().Set(Number::New(isolate, obj->value_)); }  }  \/\/ namespace demo  To build this example, the myobject.cc file must be added to the binding.gyp: {   \"targets\": [     {       \"target_name\": \"addon\",       \"sources\": [         \"addon.cc\",         \"myobject.cc\"       ]     }   ] }  Test it with: \/\/ test.js const addon = require(&#39;.\/build\/Release\/addon&#39;);  const obj = new addon.MyObject(10); console.log(obj.plusOne()); \/\/ Prints: 11 console.log(obj.plusOne()); \/\/ Prints: 12 console.log(obj.plusOne()); \/\/ Prints: 13"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_factory_of_wrapped_objects","title":"Factory of wrapped objects","description":"Alternatively, it is possible to use a factory pattern to avoid explicitly creating object instances using the JavaScript new operator: const obj = addon.createObject(); \/\/ instead of: \/\/ const obj = new addon.Object();  First, the createObject() method is implemented in addon.cc: \/\/ addon.cc #include <node.h> #include \"myobject.h\"  namespace demo {  using v8::FunctionCallbackInfo; using v8::Isolate; using v8::Local; using v8::Object; using v8::String; using v8::Value;  void CreateObject(const FunctionCallbackInfo<Value>& args) {   MyObject::NewInstance(args); }  void InitAll(Local<Object> exports, Local<Object> module) {   MyObject::Init(exports->GetIsolate());    NODE_SET_METHOD(module, \"exports\", CreateObject); }  NODE_MODULE(NODE_GYP_MODULE_NAME, InitAll)  }  \/\/ namespace demo  In myobject.h, the static method NewInstance() is added to handle instantiating the object. This method takes the place of using new in JavaScript: \/\/ myobject.h #ifndef MYOBJECT_H #define MYOBJECT_H  #include <node.h> #include <node_object_wrap.h>  namespace demo {  class MyObject : public node::ObjectWrap {  public:   static void Init(v8::Isolate* isolate);   static void NewInstance(const v8::FunctionCallbackInfo<v8::Value>& args);   private:   explicit MyObject(double value = 0);   ~MyObject();    static void New(const v8::FunctionCallbackInfo<v8::Value>& args);   static void PlusOne(const v8::FunctionCallbackInfo<v8::Value>& args);   static v8::Persistent<v8::Function> constructor;   double value_; };  }  \/\/ namespace demo  #endif  The implementation in myobject.cc is similar to the previous example: \/\/ myobject.cc #include <node.h> #include \"myobject.h\"  namespace demo {  using v8::Context; using v8::Function; using v8::FunctionCallbackInfo; using v8::FunctionTemplate; using v8::Isolate; using v8::Local; using v8::Number; using v8::Object; using v8::Persistent; using v8::String; using v8::Value;  Persistent<Function> MyObject::constructor;  MyObject::MyObject(double value) : value_(value) { }  MyObject::~MyObject() { }  void MyObject::Init(Isolate* isolate) {   \/\/ Prepare constructor template   Local<FunctionTemplate> tpl = FunctionTemplate::New(isolate, New);   tpl->SetClassName(String::NewFromUtf8(isolate, \"MyObject\"));   tpl->InstanceTemplate()->SetInternalFieldCount(1);    \/\/ Prototype   NODE_SET_PROTOTYPE_METHOD(tpl, \"plusOne\", PlusOne);    constructor.Reset(isolate, tpl->GetFunction()); }  void MyObject::New(const FunctionCallbackInfo<Value>& args) {   Isolate* isolate = args.GetIsolate();    if (args.IsConstructCall()) {     \/\/ Invoked as constructor: `new MyObject(...)`     double value = args[0]->IsUndefined() ? 0 : args[0]->NumberValue();     MyObject* obj = new MyObject(value);     obj->Wrap(args.This());     args.GetReturnValue().Set(args.This());   } else {     \/\/ Invoked as plain function `MyObject(...)`, turn into construct call.     const int argc = 1;     Local<Value> argv[argc] = { args[0] };     Local<Function> cons = Local<Function>::New(isolate, constructor);     Local<Context> context = isolate->GetCurrentContext();     Local<Object> instance =         cons->NewInstance(context, argc, argv).ToLocalChecked();     args.GetReturnValue().Set(instance);   } }  void MyObject::NewInstance(const FunctionCallbackInfo<Value>& args) {   Isolate* isolate = args.GetIsolate();    const unsigned argc = 1;   Local<Value> argv[argc] = { args[0] };   Local<Function> cons = Local<Function>::New(isolate, constructor);   Local<Context> context = isolate->GetCurrentContext();   Local<Object> instance =       cons->NewInstance(context, argc, argv).ToLocalChecked();    args.GetReturnValue().Set(instance); }  void MyObject::PlusOne(const FunctionCallbackInfo<Value>& args) {   Isolate* isolate = args.GetIsolate();    MyObject* obj = ObjectWrap::Unwrap<MyObject>(args.Holder());   obj->value_ += 1;    args.GetReturnValue().Set(Number::New(isolate, obj->value_)); }  }  \/\/ namespace demo  Once again, to build this example, the myobject.cc file must be added to the binding.gyp: {   \"targets\": [     {       \"target_name\": \"addon\",       \"sources\": [         \"addon.cc\",         \"myobject.cc\"       ]     }   ] }  Test it with: \/\/ test.js const createObject = require(&#39;.\/build\/Release\/addon&#39;);  const obj = createObject(10); console.log(obj.plusOne()); \/\/ Prints: 11 console.log(obj.plusOne()); \/\/ Prints: 12 console.log(obj.plusOne()); \/\/ Prints: 13  const obj2 = createObject(20); console.log(obj2.plusOne()); \/\/ Prints: 21 console.log(obj2.plusOne()); \/\/ Prints: 22 console.log(obj2.plusOne()); \/\/ Prints: 23"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_passing_wrapped_objects_around","title":"Passing wrapped objects around","description":"In addition to wrapping and returning C++ objects, it is possible to pass wrapped objects around by unwrapping them with the Node.js helper function node::ObjectWrap::Unwrap. The following examples shows a function add() that can take two MyObject objects as input arguments: \/\/ addon.cc #include <node.h> #include <node_object_wrap.h> #include \"myobject.h\"  namespace demo {  using v8::FunctionCallbackInfo; using v8::Isolate; using v8::Local; using v8::Number; using v8::Object; using v8::String; using v8::Value;  void CreateObject(const FunctionCallbackInfo<Value>& args) {   MyObject::NewInstance(args); }  void Add(const FunctionCallbackInfo<Value>& args) {   Isolate* isolate = args.GetIsolate();    MyObject* obj1 = node::ObjectWrap::Unwrap<MyObject>(       args[0]->ToObject());   MyObject* obj2 = node::ObjectWrap::Unwrap<MyObject>(       args[1]->ToObject());    double sum = obj1->value() + obj2->value();   args.GetReturnValue().Set(Number::New(isolate, sum)); }  void InitAll(Local<Object> exports) {   MyObject::Init(exports->GetIsolate());    NODE_SET_METHOD(exports, \"createObject\", CreateObject);   NODE_SET_METHOD(exports, \"add\", Add); }  NODE_MODULE(NODE_GYP_MODULE_NAME, InitAll)  }  \/\/ namespace demo  In myobject.h, a new public method is added to allow access to private values after unwrapping the object. \/\/ myobject.h #ifndef MYOBJECT_H #define MYOBJECT_H  #include <node.h> #include <node_object_wrap.h>  namespace demo {  class MyObject : public node::ObjectWrap {  public:   static void Init(v8::Isolate* isolate);   static void NewInstance(const v8::FunctionCallbackInfo<v8::Value>& args);   inline double value() const { return value_; }   private:   explicit MyObject(double value = 0);   ~MyObject();    static void New(const v8::FunctionCallbackInfo<v8::Value>& args);   static v8::Persistent<v8::Function> constructor;   double value_; };  }  \/\/ namespace demo  #endif  The implementation of myobject.cc is similar to before: \/\/ myobject.cc #include <node.h> #include \"myobject.h\"  namespace demo {  using v8::Context; using v8::Function; using v8::FunctionCallbackInfo; using v8::FunctionTemplate; using v8::Isolate; using v8::Local; using v8::Object; using v8::Persistent; using v8::String; using v8::Value;  Persistent<Function> MyObject::constructor;  MyObject::MyObject(double value) : value_(value) { }  MyObject::~MyObject() { }  void MyObject::Init(Isolate* isolate) {   \/\/ Prepare constructor template   Local<FunctionTemplate> tpl = FunctionTemplate::New(isolate, New);   tpl->SetClassName(String::NewFromUtf8(isolate, \"MyObject\"));   tpl->InstanceTemplate()->SetInternalFieldCount(1);    constructor.Reset(isolate, tpl->GetFunction()); }  void MyObject::New(const FunctionCallbackInfo<Value>& args) {   Isolate* isolate = args.GetIsolate();    if (args.IsConstructCall()) {     \/\/ Invoked as constructor: `new MyObject(...)`     double value = args[0]->IsUndefined() ? 0 : args[0]->NumberValue();     MyObject* obj = new MyObject(value);     obj->Wrap(args.This());     args.GetReturnValue().Set(args.This());   } else {     \/\/ Invoked as plain function `MyObject(...)`, turn into construct call.     const int argc = 1;     Local<Value> argv[argc] = { args[0] };     Local<Context> context = isolate->GetCurrentContext();     Local<Function> cons = Local<Function>::New(isolate, constructor);     Local<Object> instance =         cons->NewInstance(context, argc, argv).ToLocalChecked();     args.GetReturnValue().Set(instance);   } }  void MyObject::NewInstance(const FunctionCallbackInfo<Value>& args) {   Isolate* isolate = args.GetIsolate();    const unsigned argc = 1;   Local<Value> argv[argc] = { args[0] };   Local<Function> cons = Local<Function>::New(isolate, constructor);   Local<Context> context = isolate->GetCurrentContext();   Local<Object> instance =       cons->NewInstance(context, argc, argv).ToLocalChecked();    args.GetReturnValue().Set(instance); }  }  \/\/ namespace demo  Test it with: \/\/ test.js const addon = require(&#39;.\/build\/Release\/addon&#39;);  const obj1 = addon.createObject(10); const obj2 = addon.createObject(20); const result = addon.add(obj1, obj2);  console.log(result); \/\/ Prints: 30"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_atexit_hooks","title":"AtExit hooks","description":"An AtExit hook is a function that is invoked after the Node.js event loop has ended but before the JavaScript VM is terminated and Node.js shuts down. AtExit hooks are registered using the node::AtExit API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_void_atexit_callback_args","title":"void AtExit(callback, args)","description":"callback <void (*)(void*)> A pointer to the function to call at exit. args <void*> A pointer to pass to the callback at exit.  Registers exit hooks that run after the event loop has ended but before the VM is killed. AtExit takes two parameters: a pointer to a callback function to run at exit, and a pointer to untyped context data to be passed to that callback. Callbacks are run in last-in first-out order. The following addon.cc implements AtExit: \/\/ addon.cc #include <assert.h> #include <stdlib.h> #include <node.h>  namespace demo {  using node::AtExit; using v8::HandleScope; using v8::Isolate; using v8::Local; using v8::Object;  static char cookie[] = \"yum yum\"; static int at_exit_cb1_called = 0; static int at_exit_cb2_called = 0;  static void at_exit_cb1(void* arg) {   Isolate* isolate = static_cast<Isolate*>(arg);   HandleScope scope(isolate);   Local<Object> obj = Object::New(isolate);   assert(!obj.IsEmpty());  \/\/ assert VM is still alive   assert(obj->IsObject());   at_exit_cb1_called++; }  static void at_exit_cb2(void* arg) {   assert(arg == static_cast<void*>(cookie));   at_exit_cb2_called++; }  static void sanity_check(void*) {   assert(at_exit_cb1_called == 1);   assert(at_exit_cb2_called == 2); }  void init(Local<Object> exports) {   AtExit(at_exit_cb2, cookie);   AtExit(at_exit_cb2, cookie);   AtExit(at_exit_cb1, exports->GetIsolate());   AtExit(sanity_check); }  NODE_MODULE(NODE_GYP_MODULE_NAME, init)  }  \/\/ namespace demo  Test in JavaScript by running: \/\/ test.js require(&#39;.\/build\/Release\/addon&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_n_api","title":"N-API","description":"N-API (pronounced N as in the letter, followed by API) is an API for building native Addons. It is independent from the underlying JavaScript runtime (ex V8) and is maintained as part of Node.js itself. This API will be Application Binary Interface (ABI) stable across versions of Node.js. It is intended to insulate Addons from changes in the underlying JavaScript engine and allow modules compiled for one version to run on later versions of Node.js without recompilation. Addons are built\/packaged with the same approach\/tools outlined in the section titled C++ Addons. The only difference is the set of APIs that are used by the native code. Instead of using the V8 or Native Abstractions for Node.js APIs, the functions available in the N-API are used. APIs exposed by N-API are generally used to create and manipulate JavaScript values. Concepts and operations generally map to ideas specified in the ECMA262 Language Specification. The APIs have the following properties:  All N-API calls return a status code of type napi_status. This status indicates whether the API call succeeded or failed. The API&#39;s return value is passed via an out parameter. All JavaScript values are abstracted behind an opaque type named napi_value. In case of an error status code, additional information can be obtained using napi_get_last_error_info. More information can be found in the error handling section Error Handling.  The N-API is a C API that ensures ABI stability across Node.js versions and different compiler levels. However, we also understand that a C++ API can be easier to use in many cases. To support these cases we expect there to be one or more C++ wrapper modules that provide an inlineable C++ API. Binaries built with these wrapper modules will depend on the symbols for the N-API C based functions exported by Node.js. These wrappers are not part of N-API, nor will they be maintained as part of Node.js. One such example is: node-addon-api. In order to use the N-API functions, include the file node_api.h which is located in the src directory in the node development tree: #include <node_api.h>"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_basic_n_api_data_types","title":"Basic N-API Data Types","description":"N-API exposes the following fundamental datatypes as abstractions that are consumed by the various APIs. These APIs should be treated as opaque, introspectable only with other N-API calls."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_status","title":"napi_status","description":"Integral status code indicating the success or failure of a N-API call. Currently, the following status codes are supported. typedef enum {   napi_ok,   napi_invalid_arg,   napi_object_expected,   napi_string_expected,   napi_name_expected,   napi_function_expected,   napi_number_expected,   napi_boolean_expected,   napi_array_expected,   napi_generic_failure,   napi_pending_exception,   napi_cancelled,   napi_escape_called_twice,   napi_handle_scope_mismatch,   napi_callback_scope_mismatch, #ifdef NAPI_EXPERIMENTAL   napi_queue_full,   napi_closing, #endif  \/\/ NAPI_EXPERIMENTAL } napi_status;  If additional information is required upon an API returning a failed status, it can be obtained by calling napi_get_last_error_info."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_extended_error_info","title":"napi_extended_error_info","description":"typedef struct {   const char* error_message;   void* engine_reserved;   uint32_t engine_error_code;   napi_status error_code; } napi_extended_error_info;   error_message: UTF8-encoded string containing a VM-neutral description of the error. engine_reserved: Reserved for VM-specific error details. This is currently not implemented for any VM. engine_error_code: VM-specific error code. This is currently not implemented for any VM. error_code: The N-API status code that originated with the last error.  See the Error Handling section for additional information."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_env","title":"napi_env","description":"napi_env is used to represent a context that the underlying N-API implementation can use to persist VM-specific state. This structure is passed to native functions when they&#39;re invoked, and it must be passed back when making N-API calls. Specifically, the same napi_env that was passed in when the initial native function was called must be passed to any subsequent nested N-API calls. Caching the napi_env for the purpose of general reuse is not allowed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_value","title":"napi_value","description":"This is an opaque pointer that is used to represent a JavaScript value."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_threadsafe_function","title":"napi_threadsafe_function","description":"This is an opaque pointer that represents a JavaScript function which can be called asynchronously from multiple threads via napi_call_threadsafe_function()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_threadsafe_function_release_mode","title":"napi_threadsafe_function_release_mode","description":"A value to be given to napi_release_threadsafe_function() to indicate whether the thread-safe function is to be closed immediately (napi_tsfn_abort) or merely released (napi_tsfn_release) and thus available for subsequent use via napi_acquire_threadsafe_function() and napi_call_threadsafe_function(). typedef enum {   napi_tsfn_release,   napi_tsfn_abort } napi_threadsafe_function_release_mode;"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_threadsafe_function_call_mode","title":"napi_threadsafe_function_call_mode","description":"A value to be given to napi_call_threadsafe_function() to indicate whether the call should block whenever the queue associated with the thread-safe function is full. typedef enum {   napi_tsfn_nonblocking,   napi_tsfn_blocking } napi_threadsafe_function_call_mode;"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_n_api_memory_management_types","title":"N-API Memory Management types","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_handle_scope","title":"napi_handle_scope","description":"This is an abstraction used to control and modify the lifetime of objects created within a particular scope. In general, N-API values are created within the context of a handle scope. When a native method is called from JavaScript, a default handle scope will exist. If the user does not explicitly create a new handle scope, N-API values will be created in the default handle scope. For any invocations of code outside the execution of a native method (for instance, during a libuv callback invocation), the module is required to create a scope before invoking any functions that can result in the creation of JavaScript values. Handle scopes are created using napi_open_handle_scope and are destroyed using napi_close_handle_scope. Closing the scope can indicate to the GC that all napi_values created during the lifetime of the handle scope are no longer referenced from the current stack frame. For more details, review the Object Lifetime Management."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_escapable_handle_scope","title":"napi_escapable_handle_scope","description":"Escapable handle scopes are a special type of handle scope to return values created within a particular handle scope to a parent scope."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_ref","title":"napi_ref","description":"This is the abstraction to use to reference a napi_value. This allows for users to manage the lifetimes of JavaScript values, including defining their minimum lifetimes explicitly. For more details, review the Object Lifetime Management."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_n_api_callback_types","title":"N-API Callback types","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_callback_info","title":"napi_callback_info","description":"Opaque datatype that is passed to a callback function. It can be used for getting additional information about the context in which the callback was invoked."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_callback","title":"napi_callback","description":"Function pointer type for user-provided native functions which are to be exposed to JavaScript via N-API. Callback functions should satisfy the following signature: typedef napi_value (*napi_callback)(napi_env, napi_callback_info);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_finalize","title":"napi_finalize","description":"Function pointer type for add-on provided functions that allow the user to be notified when externally-owned data is ready to be cleaned up because the object with which it was associated with, has been garbage-collected. The user must provide a function satisfying the following signature which would get called upon the object&#39;s collection. Currently, napi_finalize can be used for finding out when objects that have external data are collected. typedef void (*napi_finalize)(napi_env env,                               void* finalize_data,                               void* finalize_hint);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_async_execute_callback","title":"napi_async_execute_callback","description":"Function pointer used with functions that support asynchronous operations. Callback functions must statisfy the following signature: typedef void (*napi_async_execute_callback)(napi_env env, void* data);  Implementations of this type of function should avoid making any N-API calls that could result in the execution of JavaScript or interaction with JavaScript objects. Most often, any code that needs to make N-API calls should be made in napi_async_complete_callback instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_async_complete_callback","title":"napi_async_complete_callback","description":"Function pointer used with functions that support asynchronous operations. Callback functions must statisfy the following signature: typedef void (*napi_async_complete_callback)(napi_env env,                                              napi_status status,                                              void* data);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_threadsafe_function_call_js","title":"napi_threadsafe_function_call_js","description":"Function pointer used with asynchronous thread-safe function calls. The callback will be called on the main thread. Its purpose is to use a data item arriving via the queue from one of the secondary threads to construct the parameters necessary for a call into JavaScript, usually via napi_call_function, and then make the call into JavaScript. The data arriving from the secondary thread via the queue is given in the data parameter and the JavaScript function to call is given in the js_callback parameter. N-API sets up the environment prior to calling this callback, so it is sufficient to call the JavaScript function via napi_call_function rather than via napi_make_callback. Callback functions must satisfy the following signature: typedef void (*napi_threadsafe_function_call_js)(napi_env env,                                                  napi_value js_callback,                                                  void* context,                                                  void* data);   [in] env: The environment to use for API calls, or NULL if the thread-safe function is being torn down and data may need to be freed. [in] js_callback: The JavaScript function to call, or NULL if the thread-safe function is being torn down and data may need to be freed. [in] context: The optional data with which the thread-safe function was created. [in] data: Data created by the secondary thread. It is the responsibility of the callback to convert this native data to JavaScript values (with N-API functions) that can be passed as parameters when js_callback is invoked. This pointer is managed entirely by the threads and this callback. Thus this callback should free the data."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_error_handling","title":"Error Handling","description":"N-API uses both return values and JavaScript exceptions for error handling. The following sections explain the approach for each case."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_return_values","title":"Return values","description":"All of the N-API functions share the same error handling pattern. The return type of all API functions is napi_status. The return value will be napi_ok if the request was successful and no uncaught JavaScript exception was thrown. If an error occurred AND an exception was thrown, the napi_status value for the error will be returned. If an exception was thrown, and no error occurred, napi_pending_exception will be returned. In cases where a return value other than napi_ok or napi_pending_exception is returned, napi_is_exception_pending must be called to check if an exception is pending. See the section on exceptions for more details. The full set of possible napi_status values is defined in napi_api_types.h. The napi_status return value provides a VM-independent representation of the error which occurred. In some cases it is useful to be able to get more detailed information, including a string representing the error as well as VM (engine)-specific information. In order to retrieve this information napi_get_last_error_info is provided which returns a napi_extended_error_info structure. The format of the napi_extended_error_info structure is as follows: typedef struct napi_extended_error_info {   const char* error_message;   void* engine_reserved;   uint32_t engine_error_code;   napi_status error_code; };   error_message: Textual representation of the error that occurred. engine_reserved: Opaque handle reserved for engine use only. engine_error_code: VM specific error code. error_code: n-api status code for the last error.  napi_get_last_error_info returns the information for the last N-API call that was made. Do not rely on the content or format of any of the extended information as it is not subject to SemVer and may change at any time. It is intended only for logging purposes."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_last_error_info","title":"napi_get_last_error_info","description":"napi_status napi_get_last_error_info(napi_env env,                          const napi_extended_error_info** result);   [in] env: The environment that the API is invoked under. [out] result: The napi_extended_error_info structure with more information about the error.  Returns napi_ok if the API succeeded. This API retrieves a napi_extended_error_info structure with information about the last error that occurred. The content of the napi_extended_error_info returned is only valid up until an n-api function is called on the same env. Do not rely on the content or format of any of the extended information as it is not subject to SemVer and may change at any time. It is intended only for logging purposes. This API can be called even if there is a pending JavaScript exception."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_exceptions","title":"Exceptions","description":"Any N-API function call may result in a pending JavaScript exception. This is obviously the case for any function that may cause the execution of JavaScript, but N-API specifies that an exception may be pending on return from any of the API functions. If the napi_status returned by a function is napi_ok then no exception is pending and no additional action is required. If the napi_status returned is anything other than napi_ok or napi_pending_exception, in order to try to recover and continue instead of simply returning immediately, napi_is_exception_pending must be called in order to determine if an exception is pending or not. When an exception is pending one of two approaches can be employed. The first approach is to do any appropriate cleanup and then return so that execution will return to JavaScript. As part of the transition back to JavaScript the exception will be thrown at the point in the JavaScript code where the native method was invoked. The behavior of most N-API calls is unspecified while an exception is pending, and many will simply return napi_pending_exception, so it is important to do as little as possible and then return to JavaScript where the exception can be handled. The second approach is to try to handle the exception. There will be cases where the native code can catch the exception, take the appropriate action, and then continue. This is only recommended in specific cases where it is known that the exception can be safely handled. In these cases napi_get_and_clear_last_exception can be used to get and clear the exception. On success, result will contain the handle to the last JavaScript Object thrown. If it is determined, after retrieving the exception, the exception cannot be handled after all it can be re-thrown it with napi_throw where error is the JavaScript Error object to be thrown. The following utility functions are also available in case native code needs to throw an exception or determine if a napi_value is an instance of a JavaScript Error object: napi_throw_error, napi_throw_type_error, napi_throw_range_error and napi_is_error. The following utility functions are also available in case native code needs to create an Error object: napi_create_error, napi_create_type_error, and napi_create_range_error, where result is the napi_value that refers to the newly created JavaScript Error object. The Node.js project is adding error codes to all of the errors generated internally. The goal is for applications to use these error codes for all error checking. The associated error messages will remain, but will only be meant to be used for logging and display with the expectation that the message can change without SemVer applying. In order to support this model with N-API, both in internal functionality and for module specific functionality (as its good practice), the throw_ and create_ functions take an optional code parameter which is the string for the code to be added to the error object. If the optional parameter is NULL then no code will be associated with the error. If a code is provided, the name associated with the error is also updated to be: originalName [code]  where originalName is the original name associated with the error and code is the code that was provided. For example if the code is &#39;ERR_ERROR_1&#39; and a TypeError is being created the name will be: TypeError [ERR_ERROR_1]"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_throw","title":"napi_throw","description":"NAPI_EXTERN napi_status napi_throw(napi_env env, napi_value error);   [in] env: The environment that the API is invoked under. [in] error: The JavaScript value to be thrown.  Returns napi_ok if the API succeeded. This API throws the JavaScript value provided."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_throw_error","title":"napi_throw_error","description":"NAPI_EXTERN napi_status napi_throw_error(napi_env env,                                          const char* code,                                          const char* msg);   [in] env: The environment that the API is invoked under. [in] code: Optional error code to be set on the error. [in] msg: C string representing the text to be associated with the error.  Returns napi_ok if the API succeeded. This API throws a JavaScript Error with the text provided."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_throw_type_error","title":"napi_throw_type_error","description":"NAPI_EXTERN napi_status napi_throw_type_error(napi_env env,                                               const char* code,                                               const char* msg);   [in] env: The environment that the API is invoked under. [in] code: Optional error code to be set on the error. [in] msg: C string representing the text to be associated with the error.  Returns napi_ok if the API succeeded. This API throws a JavaScript TypeError with the text provided."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_throw_range_error","title":"napi_throw_range_error","description":"NAPI_EXTERN napi_status napi_throw_range_error(napi_env env,                                                const char* code,                                                const char* msg);   [in] env: The environment that the API is invoked under. [in] code: Optional error code to be set on the error. [in] msg: C string representing the text to be associated with the error.  Returns napi_ok if the API succeeded. This API throws a JavaScript RangeError with the text provided."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_is_error","title":"napi_is_error","description":"NAPI_EXTERN napi_status napi_is_error(napi_env env,                                       napi_value value,                                       bool* result);   [in] env: The environment that the API is invoked under. [in] msg: The napi_value to be checked. [out] result: Boolean value that is set to true if napi_value represents an error, false otherwise.  Returns napi_ok if the API succeeded. This API queries a napi_value to check if it represents an error object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_error","title":"napi_create_error","description":"NAPI_EXTERN napi_status napi_create_error(napi_env env,                                           napi_value code,                                           napi_value msg,                                           napi_value* result);   [in] env: The environment that the API is invoked under. [in] code: Optional napi_value with the string for the error code to be associated with the error. [in] msg: napi_value that references a JavaScript String to be used as the message for the Error. [out] result: napi_value representing the error created.  Returns napi_ok if the API succeeded. This API returns a JavaScript Error with the text provided."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_type_error","title":"napi_create_type_error","description":"NAPI_EXTERN napi_status napi_create_type_error(napi_env env,                                                napi_value code,                                                napi_value msg,                                                napi_value* result);   [in] env: The environment that the API is invoked under. [in] code: Optional napi_value with the string for the error code to be associated with the error. [in] msg: napi_value that references a JavaScript String to be used as the message for the Error. [out] result: napi_value representing the error created.  Returns napi_ok if the API succeeded. This API returns a JavaScript TypeError with the text provided."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_range_error","title":"napi_create_range_error","description":"NAPI_EXTERN napi_status napi_create_range_error(napi_env env,                                                 napi_value code,                                                 napi_value msg,                                                 napi_value* result);   [in] env: The environment that the API is invoked under. [in] code: Optional napi_value with the string for the error code to be associated with the error. [in] msg: napi_value that references a JavaScript String to be used as the message for the Error. [out] result: napi_value representing the error created.  Returns napi_ok if the API succeeded. This API returns a JavaScript RangeError with the text provided."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_and_clear_last_exception","title":"napi_get_and_clear_last_exception","description":"napi_status napi_get_and_clear_last_exception(napi_env env,                                               napi_value* result);   [in] env: The environment that the API is invoked under. [out] result: The exception if one is pending, NULL otherwise.  Returns napi_ok if the API succeeded. This API returns true if an exception is pending. This API can be called even if there is a pending JavaScript exception."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_is_exception_pending","title":"napi_is_exception_pending","description":"napi_status napi_is_exception_pending(napi_env env, bool* result);   [in] env: The environment that the API is invoked under. [out] result: Boolean value that is set to true if an exception is pending.  Returns napi_ok if the API succeeded. This API returns true if an exception is pending. This API can be called even if there is a pending JavaScript exception."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_fatal_exception","title":"napi_fatal_exception","description":"napi_status napi_fatal_exception(napi_env env, napi_value err);   [in] env: The environment that the API is invoked under. [in] err: The error that is passed to &#39;uncaughtException&#39;.  Trigger an &#39;uncaughtException&#39; in JavaScript. Useful if an async callback throws an exception with no way to recover."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fatal_errors","title":"Fatal Errors","description":"In the event of an unrecoverable error in a native module, a fatal error can be thrown to immediately terminate the process."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_fatal_error","title":"napi_fatal_error","description":"NAPI_NO_RETURN void napi_fatal_error(const char* location,                                                  size_t location_len,                                                  const char* message,                                                  size_t message_len);   [in] location: Optional location at which the error occurred. [in] location_len: The length of the location in bytes, or NAPI_AUTO_LENGTH if it is null-terminated. [in] message: The message associated with the error. [in] message_len: The length of the message in bytes, or NAPI_AUTO_LENGTH if it is null-terminated.  The function call does not return, the process will be terminated. This API can be called even if there is a pending JavaScript exception."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_object_lifetime_management","title":"Object Lifetime management","description":"As N-API calls are made, handles to objects in the heap for the underlying VM may be returned as napi_values. These handles must hold the objects &#39;live&#39; until they are no longer required by the native code, otherwise the objects could be collected before the native code was finished using them. As object handles are returned they are associated with a &#39;scope&#39;. The lifespan for the default scope is tied to the lifespan of the native method call. The result is that, by default, handles remain valid and the objects associated with these handles will be held live for the lifespan of the native method call. In many cases, however, it is necessary that the handles remain valid for either a shorter or longer lifespan than that of the native method. The sections which follow describe the N-API functions that can be used to change the handle lifespan from the default."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_making_handle_lifespan_shorter_than_that_of_the_native_method","title":"Making handle lifespan shorter than that of the native method","description":"It is often necessary to make the lifespan of handles shorter than the lifespan of a native method. For example, consider a native method that has a loop which iterates through the elements in a large array: for (int i = 0; i < 1000000; i++) {   napi_value result;   napi_status status = napi_get_element(env, object, i, &result);   if (status != napi_ok) {     break;   }   \/\/ do something with element }  This would result in a large number of handles being created, consuming substantial resources. In addition, even though the native code could only use the most recent handle, all of the associated objects would also be kept alive since they all share the same scope. To handle this case, N-API provides the ability to establish a new &#39;scope&#39; to which newly created handles will be associated. Once those handles are no longer required, the scope can be &#39;closed&#39; and any handles associated with the scope are invalidated. The methods available to open\/close scopes are napi_open_handle_scope and napi_close_handle_scope. N-API only supports a single nested hierarchy of scopes. There is only one active scope at any time, and all new handles will be associated with that scope while it is active. Scopes must be closed in the reverse order from which they are opened. In addition, all scopes created within a native method must be closed before returning from that method. Taking the earlier example, adding calls to napi_open_handle_scope and napi_close_handle_scope would ensure that at most a single handle is valid throughout the execution of the loop: for (int i = 0; i < 1000000; i++) {   napi_handle_scope scope;   napi_status status = napi_open_handle_scope(env, &scope);   if (status != napi_ok) {     break;   }   napi_value result;   status = napi_get_element(env, object, i, &result);   if (status != napi_ok) {     break;   }   \/\/ do something with element   status = napi_close_handle_scope(env, scope);   if (status != napi_ok) {     break;   } }  When nesting scopes, there are cases where a handle from an inner scope needs to live beyond the lifespan of that scope. N-API supports an &#39;escapable scope&#39; in order to support this case. An escapable scope allows one handle to be &#39;promoted&#39; so that it &#39;escapes&#39; the current scope and the lifespan of the handle changes from the current scope to that of the outer scope. The methods available to open\/close escapable scopes are napi_open_escapable_handle_scope and napi_close_escapable_handle_scope. The request to promote a handle is made through napi_escape_handle which can only be called once."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_open_handle_scope","title":"napi_open_handle_scope","description":"NAPI_EXTERN napi_status napi_open_handle_scope(napi_env env,                                                napi_handle_scope* result);   [in] env: The environment that the API is invoked under. [out] result: napi_value representing the new scope.  Returns napi_ok if the API succeeded. This API open a new scope."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_close_handle_scope","title":"napi_close_handle_scope","description":"NAPI_EXTERN napi_status napi_close_handle_scope(napi_env env,                                                 napi_handle_scope scope);   [in] env: The environment that the API is invoked under. [in] scope: napi_value representing the scope to be closed.  Returns napi_ok if the API succeeded. This API closes the scope passed in. Scopes must be closed in the reverse order from which they were created. This API can be called even if there is a pending JavaScript exception."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_open_escapable_handle_scope","title":"napi_open_escapable_handle_scope","description":"NAPI_EXTERN napi_status     napi_open_escapable_handle_scope(napi_env env,                                      napi_handle_scope* result);   [in] env: The environment that the API is invoked under. [out] result: napi_value representing the new scope.  Returns napi_ok if the API succeeded. This API open a new scope from which one object can be promoted to the outer scope."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_close_escapable_handle_scope","title":"napi_close_escapable_handle_scope","description":"NAPI_EXTERN napi_status     napi_close_escapable_handle_scope(napi_env env,                                       napi_handle_scope scope);   [in] env: The environment that the API is invoked under. [in] scope: napi_value representing the scope to be closed.  Returns napi_ok if the API succeeded. This API closes the scope passed in. Scopes must be closed in the reverse order from which they were created. This API can be called even if there is a pending JavaScript exception."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_escape_handle","title":"napi_escape_handle","description":"napi_status napi_escape_handle(napi_env env,                                napi_escapable_handle_scope scope,                                napi_value escapee,                                napi_value* result);   [in] env: The environment that the API is invoked under. [in] scope: napi_value representing the current scope. [in] escapee: napi_value representing the JavaScript Object to be escaped. [out] result: napi_value representing the handle to the escaped Object in the outer scope.  Returns napi_ok if the API succeeded. This API promotes the handle to the JavaScript object so that it is valid for the lifetime of the outer scope. It can only be called once per scope. If it is called more than once an error will be returned. This API can be called even if there is a pending JavaScript exception."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_references_to_objects_with_a_lifespan_longer_than_that_of_the_native_method","title":"References to objects with a lifespan longer than that of the native method","description":"In some cases an addon will need to be able to create and reference objects with a lifespan longer than that of a single native method invocation. For example, to create a constructor and later use that constructor in a request to creates instances, it must be possible to reference the constructor object across many different instance creation requests. This would not be possible with a normal handle returned as a napi_value as described in the earlier section. The lifespan of a normal handle is managed by scopes and all scopes must be closed before the end of a native method. N-API provides methods to create persistent references to an object. Each persistent reference has an associated count with a value of 0 or higher. The count determines if the reference will keep the corresponding object live. References with a count of 0 do not prevent the object from being collected and are often called &#39;weak&#39; references. Any count greater than 0 will prevent the object from being collected. References can be created with an initial reference count. The count can then be modified through napi_reference_ref and napi_reference_unref. If an object is collected while the count for a reference is 0, all subsequent calls to get the object associated with the reference napi_get_reference_value will return NULL for the returned napi_value. An attempt to call napi_reference_ref for a reference whose object has been collected will result in an error. References must be deleted once they are no longer required by the addon. When a reference is deleted it will no longer prevent the corresponding object from being collected. Failure to delete a persistent reference will result in a &#39;memory leak&#39; with both the native memory for the persistent reference and the corresponding object on the heap being retained forever. There can be multiple persistent references created which refer to the same object, each of which will either keep the object live or not based on its individual count."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_reference","title":"napi_create_reference","description":"NAPI_EXTERN napi_status napi_create_reference(napi_env env,                                               napi_value value,                                               int initial_refcount,                                               napi_ref* result);   [in] env: The environment that the API is invoked under. [in] value: napi_value representing the Object to which we want a reference. [in] initial_refcount: Initial reference count for the new reference. [out] result: napi_ref pointing to the new reference.  Returns napi_ok if the API succeeded. This API create a new reference with the specified reference count to the Object passed in."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_delete_reference","title":"napi_delete_reference","description":"NAPI_EXTERN napi_status napi_delete_reference(napi_env env, napi_ref ref);   [in] env: The environment that the API is invoked under. [in] ref: napi_ref to be deleted.  Returns napi_ok if the API succeeded. This API deletes the reference passed in. This API can be called even if there is a pending JavaScript exception."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_reference_ref","title":"napi_reference_ref","description":"NAPI_EXTERN napi_status napi_reference_ref(napi_env env,                                            napi_ref ref,                                            int* result);   [in] env: The environment that the API is invoked under. [in] ref: napi_ref for which the reference count will be incremented. [out] result: The new reference count.  Returns napi_ok if the API succeeded. This API increments the reference count for the reference passed in and returns the resulting reference count."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_reference_unref","title":"napi_reference_unref","description":"NAPI_EXTERN napi_status napi_reference_unref(napi_env env,                                              napi_ref ref,                                              int* result);   [in] env: The environment that the API is invoked under. [in] ref: napi_ref for which the reference count will be decremented. [out] result: The new reference count.  Returns napi_ok if the API succeeded. This API decrements the reference count for the reference passed in and returns the resulting reference count."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_reference_value","title":"napi_get_reference_value","description":"NAPI_EXTERN napi_status napi_get_reference_value(napi_env env,                                                  napi_ref ref,                                                  napi_value* result);  the napi_value passed in or out of these methods is a handle to the object to which the reference is related.  [in] env: The environment that the API is invoked under. [in] ref: napi_ref for which we requesting the corresponding Object. [out] result: The napi_value for the Object referenced by the napi_ref.  Returns napi_ok if the API succeeded. If still valid, this API returns the napi_value representing the JavaScript Object associated with the napi_ref. Otherwise, result will be NULL."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_cleanup_on_exit_of_the_current_node_js_instance","title":"Cleanup on exit of the current Node.js instance","description":"While a Node.js process typically releases all its resources when exiting, embedders of Node.js, or future Worker support, may require addons to register clean-up hooks that will be run once the current Node.js instance exits. N-API provides functions for registering and un-registering such callbacks. When those callbacks are run, all resources that are being held by the addon should be freed up."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_add_env_cleanup_hook","title":"napi_add_env_cleanup_hook","description":"NODE_EXTERN napi_status napi_add_env_cleanup_hook(napi_env env,                                                   void (*fun)(void* arg),                                                   void* arg);  Registers fun as a function to be run with the arg parameter once the current Node.js environment exits. A function can safely be specified multiple times with different arg values. In that case, it will be called multiple times as well. Providing the same fun and arg values multiple times is not allowed and will lead the process to abort. The hooks will be called in reverse order, i.e. the most recently added one will be called first. Removing this hook can be done by using napi_remove_env_cleanup_hook. Typically, that happens when the resource for which this hook was added is being torn down anyway."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_remove_env_cleanup_hook","title":"napi_remove_env_cleanup_hook","description":"NAPI_EXTERN napi_status napi_remove_env_cleanup_hook(napi_env env,                                                      void (*fun)(void* arg),                                                      void* arg);  Unregisters fun as a function to be run with the arg parameter once the current Node.js environment exits. Both the argument and the function value need to be exact matches. The function must have originally been registered with napi_add_env_cleanup_hook, otherwise the process will abort."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_module_registration","title":"Module registration","description":"N-API modules are registered in a manner similar to other modules except that instead of using the NODE_MODULE macro the following is used: NAPI_MODULE(NODE_GYP_MODULE_NAME, Init)  The next difference is the signature for the Init method. For a N-API module it is as follows: napi_value Init(napi_env env, napi_value exports);  The return value from Init is treated as the exports object for the module. The Init method is passed an empty object via the exports parameter as a convenience. If Init returns NULL, the parameter passed as exports is exported by the module. N-API modules cannot modify the module object but can specify anything as the exports property of the module. To add the method hello as a function so that it can be called as a method provided by the addon: napi_value Init(napi_env env, napi_value exports) {   napi_status status;   napi_property_descriptor desc =     {\"hello\", NULL, Method, NULL, NULL, NULL, napi_default, NULL};   status = napi_define_properties(env, exports, 1, &desc);   if (status != napi_ok) return NULL;   return exports; }  To set a function to be returned by the require() for the addon: napi_value Init(napi_env env, napi_value exports) {   napi_value method;   napi_status status;   status = napi_create_function(env, \"exports\", NAPI_AUTO_LENGTH, Method, NULL, &method);   if (status != napi_ok) return NULL;   return method; }  To define a class so that new instances can be created (often used with Object Wrap): \/\/ NOTE: partial example, not all referenced code is included napi_value Init(napi_env env, napi_value exports) {   napi_status status;   napi_property_descriptor properties[] = {     { \"value\", NULL, NULL, GetValue, SetValue, NULL, napi_default, NULL },     DECLARE_NAPI_METHOD(\"plusOne\", PlusOne),     DECLARE_NAPI_METHOD(\"multiply\", Multiply),   };    napi_value cons;   status =       napi_define_class(env, \"MyObject\", New, NULL, 3, properties, &cons);   if (status != napi_ok) return NULL;    status = napi_create_reference(env, cons, 1, &constructor);   if (status != napi_ok) return NULL;    status = napi_set_named_property(env, exports, \"MyObject\", cons);   if (status != napi_ok) return NULL;    return exports; }  If the module will be loaded multiple times during the lifetime of the Node.js process, use the NAPI_MODULE_INIT macro to initialize the module: NAPI_MODULE_INIT() {   napi_value answer;   napi_status result;    status = napi_create_int64(env, 42, &answer);   if (status != napi_ok) return NULL;    status = napi_set_named_property(env, exports, \"answer\", answer);   if (status != napi_ok) return NULL;    return exports; }  This macro includes NAPI_MODULE, and declares an Init function with a special name and with visibility beyond the addon. This will allow Node.js to initialize the module even if it is loaded multiple times. The variables env and exports will be available inside the function body following the macro invocation. For more details on setting properties on objects, see the section on Working with JavaScript Properties. For more details on building addon modules in general, refer to the existing API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_working_with_javascript_values","title":"Working with JavaScript Values","description":"N-API exposes a set of APIs to create all types of JavaScript values. Some of these types are documented under Section 6 of the ECMAScript Language Specification. Fundamentally, these APIs are used to do one of the following:  Create a new JavaScript object Convert from a primitive C type to an N-API value Convert from N-API value to a primitive C type Get global instances including undefined and null  N-API values are represented by the type napi_value. Any N-API call that requires a JavaScript value takes in a napi_value. In some cases, the API does check the type of the napi_value up-front. However, for better performance, it&#39;s better for the caller to make sure that the napi_value in question is of the JavaScript type expected by the API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_enum_types","title":"Enum types","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_valuetype","title":"napi_valuetype","description":"typedef enum {   \/\/ ES6 types (corresponds to typeof)   napi_undefined,   napi_null,   napi_boolean,   napi_number,   napi_string,   napi_symbol,   napi_object,   napi_function,   napi_external, } napi_valuetype;  Describes the type of a napi_value. This generally corresponds to the types described in Section 6.1 of the ECMAScript Language Specification. In addition to types in that section, napi_valuetype can also represent Functions and Objects with external data. A JavaScript value of type napi_external appears in JavaScript as a plain object such that no properties can be set on it, and no prototype."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_typedarray_type","title":"napi_typedarray_type","description":"typedef enum {   napi_int8_array,   napi_uint8_array,   napi_uint8_clamped_array,   napi_int16_array,   napi_uint16_array,   napi_int32_array,   napi_uint32_array,   napi_float32_array,   napi_float64_array, } napi_typedarray_type;  This represents the underlying binary scalar datatype of the TypedArray. Elements of this enum correspond to Section 22.2 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_object_creation_functions","title":"Object Creation Functions","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_array","title":"napi_create_array","description":"napi_status napi_create_array(napi_env env, napi_value* result)   [in] env: The environment that the N-API call is invoked under. [out] result: A napi_value representing a JavaScript Array.  Returns napi_ok if the API succeeded. This API returns an N-API value corresponding to a JavaScript Array type. JavaScript arrays are described in Section 22.1 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_array_with_length","title":"napi_create_array_with_length","description":"napi_status napi_create_array_with_length(napi_env env,                                           size_t length,                                           napi_value* result)   [in] env: The environment that the API is invoked under. [in] length: The initial length of the Array. [out] result: A napi_value representing a JavaScript Array.  Returns napi_ok if the API succeeded. This API returns an N-API value corresponding to a JavaScript Array type. The Array&#39;s length property is set to the passed-in length parameter. However, the underlying buffer is not guaranteed to be pre-allocated by the VM when the array is created - that behavior is left to the underlying VM implementation. If the buffer must be a contiguous block of memory that can be directly read and\/or written via C, consider using napi_create_external_arraybuffer. JavaScript arrays are described in Section 22.1 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_arraybuffer","title":"napi_create_arraybuffer","description":"napi_status napi_create_arraybuffer(napi_env env,                                     size_t byte_length,                                     void** data,                                     napi_value* result)   [in] env: The environment that the API is invoked under. [in] length: The length in bytes of the array buffer to create. [out] data: Pointer to the underlying byte buffer of the ArrayBuffer. [out] result: A napi_value representing a JavaScript ArrayBuffer.  Returns napi_ok if the API succeeded. This API returns an N-API value corresponding to a JavaScript ArrayBuffer. ArrayBuffers are used to represent fixed-length binary data buffers. They are normally used as a backing-buffer for TypedArray objects. The ArrayBuffer allocated will have an underlying byte buffer whose size is determined by the length parameter that&#39;s passed in. The underlying buffer is optionally returned back to the caller in case the caller wants to directly manipulate the buffer. This buffer can only be written to directly from native code. To write to this buffer from JavaScript, a typed array or DataView object would need to be created. JavaScript ArrayBuffer objects are described in Section 24.1 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_buffer","title":"napi_create_buffer","description":"napi_status napi_create_buffer(napi_env env,                                size_t size,                                void** data,                                napi_value* result)   [in] env: The environment that the API is invoked under. [in] size: Size in bytes of the underlying buffer. [out] data: Raw pointer to the underlying buffer. [out] result: A napi_value representing a node::Buffer.  Returns napi_ok if the API succeeded. This API allocates a node::Buffer object. While this is still a fully-supported data structure, in most cases using a TypedArray will suffice."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_buffer_copy","title":"napi_create_buffer_copy","description":"napi_status napi_create_buffer_copy(napi_env env,                                     size_t length,                                     const void* data,                                     void** result_data,                                     napi_value* result)   [in] env: The environment that the API is invoked under. [in] size: Size in bytes of the input buffer (should be the same as the size of the new buffer). [in] data: Raw pointer to the underlying buffer to copy from. [out] result_data: Pointer to the new Buffer&#39;s underlying data buffer. [out] result: A napi_value representing a node::Buffer.  Returns napi_ok if the API succeeded. This API allocates a node::Buffer object and initializes it with data copied from the passed-in buffer. While this is still a fully-supported data structure, in most cases using a TypedArray will suffice."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_external","title":"napi_create_external","description":"napi_status napi_create_external(napi_env env,                                  void* data,                                  napi_finalize finalize_cb,                                  void* finalize_hint,                                  napi_value* result)   [in] env: The environment that the API is invoked under. [in] data: Raw pointer to the external data. [in] finalize_cb: Optional callback to call when the external value is being collected. [in] finalize_hint: Optional hint to pass to the finalize callback during collection. [out] result: A napi_value representing an external value.  Returns napi_ok if the API succeeded. This API allocates a JavaScript value with external data attached to it. This is used to pass external data through JavaScript code, so it can be retrieved later by native code. The API allows the caller to pass in a finalize callback, in case the underlying native resource needs to be cleaned up when the external JavaScript value gets collected. The created value is not an object, and therefore does not support additional properties. It is considered a distinct value type: calling napi_typeof() with an external value yields napi_external."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_external_arraybuffer","title":"napi_create_external_arraybuffer","description":"napi_status napi_create_external_arraybuffer(napi_env env,                                  void* external_data,                                  size_t byte_length,                                  napi_finalize finalize_cb,                                  void* finalize_hint,                                  napi_value* result)   [in] env: The environment that the API is invoked under. [in] external_data: Pointer to the underlying byte buffer of the ArrayBuffer. [in] byte_length: The length in bytes of the underlying buffer. [in] finalize_cb: Optional callback to call when the ArrayBuffer is being collected. [in] finalize_hint: Optional hint to pass to the finalize callback during collection. [out] result: A napi_value representing a JavaScript ArrayBuffer.  Returns napi_ok if the API succeeded. This API returns an N-API value corresponding to a JavaScript ArrayBuffer. The underlying byte buffer of the ArrayBuffer is externally allocated and managed. The caller must ensure that the byte buffer remains valid until the finalize callback is called. JavaScript ArrayBuffers are described in Section 24.1 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_external_buffer","title":"napi_create_external_buffer","description":"napi_status napi_create_external_buffer(napi_env env,                                         size_t length,                                         void* data,                                         napi_finalize finalize_cb,                                         void* finalize_hint,                                         napi_value* result)   [in] env: The environment that the API is invoked under. [in] length: Size in bytes of the input buffer (should be the same as the size of the new buffer). [in] data: Raw pointer to the underlying buffer to copy from. [in] finalize_cb: Optional callback to call when the ArrayBuffer is being collected. [in] finalize_hint: Optional hint to pass to the finalize callback during collection. [out] result: A napi_value representing a node::Buffer.  Returns napi_ok if the API succeeded. This API allocates a node::Buffer object and initializes it with data backed by the passed in buffer. While this is still a fully-supported data structure, in most cases using a TypedArray will suffice. For Node.js >=4 Buffers are Uint8Arrays."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_function","title":"napi_create_function","description":"napi_status napi_create_function(napi_env env,                                  const char* utf8name,                                  size_t length,                                  napi_callback cb,                                  void* data,                                  napi_value* result)   [in] env: The environment that the API is invoked under. [in] utf8name: A string representing the name of the function encoded as UTF8. [in] length: The length of the utf8name in bytes, or NAPI_AUTO_LENGTH if it is null-terminated. [in] cb: A function pointer to the native function to be invoked when the created function is invoked from JavaScript. [in] data: Optional arbitrary context data to be passed into the native function when it is invoked. [out] result: A napi_value representing a JavaScript function.  Returns napi_ok if the API succeeded. This API returns an N-API value corresponding to a JavaScript Function object. It&#39;s used to wrap native functions so that they can be invoked from JavaScript. JavaScript Functions are described in Section 19.2 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_object","title":"napi_create_object","description":"napi_status napi_create_object(napi_env env, napi_value* result)   [in] env: The environment that the API is invoked under. [out] result: A napi_value representing a JavaScript Object.  Returns napi_ok if the API succeeded. This API allocates a default JavaScript Object. It is the equivalent of doing new Object() in JavaScript. The JavaScript Object type is described in Section 6.1.7 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_symbol","title":"napi_create_symbol","description":"napi_status napi_create_symbol(napi_env env,                                napi_value description,                                napi_value* result)   [in] env: The environment that the API is invoked under. [in] description: Optional napi_value which refers to a JavaScript String to be set as the description for the symbol. [out] result: A napi_value representing a JavaScript Symbol.  Returns napi_ok if the API succeeded. This API creates a JavaScript Symbol object from a UTF8-encoded C string. The JavaScript Symbol type is described in Section 19.4 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_typedarray","title":"napi_create_typedarray","description":"napi_status napi_create_typedarray(napi_env env,                                    napi_typedarray_type type,                                    size_t length,                                    napi_value arraybuffer,                                    size_t byte_offset,                                    napi_value* result)   [in] env: The environment that the API is invoked under. [in] type: Scalar datatype of the elements within the TypedArray. [in] length: Number of elements in the TypedArray. [in] arraybuffer: ArrayBuffer underlying the typed array. [in] byte_offset: The byte offset within the ArrayBuffer from which to start projecting the TypedArray. [out] result: A napi_value representing a JavaScript TypedArray.  Returns napi_ok if the API succeeded. This API creates a JavaScript TypedArray object over an existing ArrayBuffer. TypedArray objects provide an array-like view over an underlying data buffer where each element has the same underlying binary scalar datatype. It&#39;s required that (length * size_of_element) + byte_offset should be <= the size in bytes of the array passed in. If not, a RangeError exception is raised. JavaScript TypedArray objects are described in Section 22.2 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_dataview","title":"napi_create_dataview","description":"napi_status napi_create_dataview(napi_env env,                                  size_t byte_length,                                  napi_value arraybuffer,                                  size_t byte_offset,                                  napi_value* result)   [in] env: The environment that the API is invoked under. [in] length: Number of elements in the DataView. [in] arraybuffer: ArrayBuffer underlying the DataView. [in] byte_offset: The byte offset within the ArrayBuffer from which to start projecting the DataView. [out] result: A napi_value representing a JavaScript DataView.  Returns napi_ok if the API succeeded. This API creates a JavaScript DataView object over an existing ArrayBuffer. DataView objects provide an array-like view over an underlying data buffer, but one which allows items of different size and type in the ArrayBuffer. It is required that byte_length + byte_offset is less than or equal to the size in bytes of the array passed in. If not, a RangeError exception is raised. JavaScript DataView objects are described in Section 24.3 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_functions_to_convert_from_c_types_to_n_api","title":"Functions to convert from C types to N-API","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_int32","title":"napi_create_int32","description":"napi_status napi_create_int32(napi_env env, int32_t value, napi_value* result)   [in] env: The environment that the API is invoked under. [in] value: Integer value to be represented in JavaScript. [out] result: A napi_value representing a JavaScript Number.  Returns napi_ok if the API succeeded. This API is used to convert from the C int32_t type to the JavaScript Number type. The JavaScript Number type is described in Section 6.1.6 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_uint32","title":"napi_create_uint32","description":"napi_status napi_create_uint32(napi_env env, uint32_t value, napi_value* result)   [in] env: The environment that the API is invoked under. [in] value: Unsigned integer value to be represented in JavaScript. [out] result: A napi_value representing a JavaScript Number.  Returns napi_ok if the API succeeded. This API is used to convert from the C uint32_t type to the JavaScript Number type. The JavaScript Number type is described in Section 6.1.6 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_int64","title":"napi_create_int64","description":"napi_status napi_create_int64(napi_env env, int64_t value, napi_value* result)   [in] env: The environment that the API is invoked under. [in] value: Integer value to be represented in JavaScript. [out] result: A napi_value representing a JavaScript Number.  Returns napi_ok if the API succeeded. This API is used to convert from the C int64_t type to the JavaScript Number type. The JavaScript Number type is described in Section 6.1.6 of the ECMAScript Language Specification. Note the complete range of int64_t cannot be represented with full precision in JavaScript. Integer values outside the range of Number.MIN_SAFE_INTEGER -(2^53 - 1) - Number.MAX_SAFE_INTEGER (2^53 - 1) will lose precision."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_double","title":"napi_create_double","description":"napi_status napi_create_double(napi_env env, double value, napi_value* result)   [in] env: The environment that the API is invoked under. [in] value: Double-precision value to be represented in JavaScript. [out] result: A napi_value representing a JavaScript Number.  Returns napi_ok if the API succeeded. This API is used to convert from the C double type to the JavaScript Number type. The JavaScript Number type is described in Section 6.1.6 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_string_latin1","title":"napi_create_string_latin1","description":"napi_status napi_create_string_latin1(napi_env env,                                       const char* str,                                       size_t length,                                       napi_value* result);   [in] env: The environment that the API is invoked under. [in] str: Character buffer representing an ISO-8859-1-encoded string. [in] length: The length of the string in bytes, or NAPI_AUTO_LENGTH if it is null-terminated. [out] result: A napi_value representing a JavaScript String.  Returns napi_ok if the API succeeded. This API creates a JavaScript String object from an ISO-8859-1-encoded C string. The native string is copied. The JavaScript String type is described in Section 6.1.4 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_string_utf16","title":"napi_create_string_utf16","description":"napi_status napi_create_string_utf16(napi_env env,                                      const char16_t* str,                                      size_t length,                                      napi_value* result)   [in] env: The environment that the API is invoked under. [in] str: Character buffer representing a UTF16-LE-encoded string. [in] length: The length of the string in two-byte code units, or NAPI_AUTO_LENGTH if it is null-terminated. [out] result: A napi_value representing a JavaScript String.  Returns napi_ok if the API succeeded. This API creates a JavaScript String object from a UTF16-LE-encoded C string. The native string is copied. The JavaScript String type is described in Section 6.1.4 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_string_utf8","title":"napi_create_string_utf8","description":"napi_status napi_create_string_utf8(napi_env env,                                     const char* str,                                     size_t length,                                     napi_value* result)   [in] env: The environment that the API is invoked under. [in] str: Character buffer representing a UTF8-encoded string. [in] length: The length of the string in bytes, or NAPI_AUTO_LENGTH if it is null-terminated. [out] result: A napi_value representing a JavaScript String.  Returns napi_ok if the API succeeded. This API creates a JavaScript String object from a UTF8-encoded C string. The native string is copied. The JavaScript String type is described in Section 6.1.4 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_functions_to_convert_from_n_api_to_c_types","title":"Functions to convert from N-API to C types","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_array_length","title":"napi_get_array_length","description":"napi_status napi_get_array_length(napi_env env,                                   napi_value value,                                   uint32_t* result)   [in] env: The environment that the API is invoked under. [in] value: napi_value representing the JavaScript Array whose length is being queried. [out] result: uint32 representing length of the array.  Returns napi_ok if the API succeeded. This API returns the length of an array. Array length is described in Section 22.1.4.1 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_arraybuffer_info","title":"napi_get_arraybuffer_info","description":"napi_status napi_get_arraybuffer_info(napi_env env,                                       napi_value arraybuffer,                                       void** data,                                       size_t* byte_length)   [in] env: The environment that the API is invoked under. [in] arraybuffer: napi_value representing the ArrayBuffer being queried. [out] data: The underlying data buffer of the ArrayBuffer. [out] byte_length: Length in bytes of the underlying data buffer.  Returns napi_ok if the API succeeded. This API is used to retrieve the underlying data buffer of an ArrayBuffer and its length. WARNING: Use caution while using this API. The lifetime of the underlying data buffer is managed by the ArrayBuffer even after it&#39;s returned. A possible safe way to use this API is in conjunction with napi_create_reference, which can be used to guarantee control over the lifetime of the ArrayBuffer. It&#39;s also safe to use the returned data buffer within the same callback as long as there are no calls to other APIs that might trigger a GC."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_buffer_info","title":"napi_get_buffer_info","description":"napi_status napi_get_buffer_info(napi_env env,                                  napi_value value,                                  void** data,                                  size_t* length)   [in] env: The environment that the API is invoked under. [in] value: napi_value representing the node::Buffer being queried. [out] data: The underlying data buffer of the node::Buffer. [out] length: Length in bytes of the underlying data buffer.  Returns napi_ok if the API succeeded. This API is used to retrieve the underlying data buffer of a node::Buffer and it&#39;s length. Warning: Use caution while using this API since the underlying data buffer&#39;s lifetime is not guaranteed if it&#39;s managed by the VM."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_prototype","title":"napi_get_prototype","description":"napi_status napi_get_prototype(napi_env env,                                napi_value object,                                napi_value* result)   [in] env: The environment that the API is invoked under. [in] object: napi_value representing JavaScript Object whose prototype to return. This returns the equivalent of Object.getPrototypeOf (which is not the same as the function&#39;s prototype property). [out] result: napi_value representing prototype of the given object.  Returns napi_ok if the API succeeded."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_typedarray_info","title":"napi_get_typedarray_info","description":"napi_status napi_get_typedarray_info(napi_env env,                                      napi_value typedarray,                                      napi_typedarray_type* type,                                      size_t* length,                                      void** data,                                      napi_value* arraybuffer,                                      size_t* byte_offset)   [in] env: The environment that the API is invoked under. [in] typedarray: napi_value representing the TypedArray whose properties to query. [out] type: Scalar datatype of the elements within the TypedArray. [out] length: The number of elements in the TypedArray. [out] data: The data buffer underlying the TypedArray adjusted by the byte_offset value so that it points to the first element in the TypedArray. [out] arraybuffer: The ArrayBuffer underlying the TypedArray. [out] byte_offset: The byte offset within the underlying native array at which the first element of the arrays is located. The value for the data parameter has already been adjusted so that data points to the first element in the array. Therefore, the first byte of the native array would be at data - byte_offset.  Returns napi_ok if the API succeeded. This API returns various properties of a typed array. Warning: Use caution while using this API since the underlying data buffer is managed by the VM."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_dataview_info","title":"napi_get_dataview_info","description":"napi_status napi_get_dataview_info(napi_env env,                                    napi_value dataview,                                    size_t* byte_length,                                    void** data,                                    napi_value* arraybuffer,                                    size_t* byte_offset)   [in] env: The environment that the API is invoked under. [in] dataview: napi_value representing the DataView whose properties to query. [out] byte_length: Number of bytes in the DataView. [out] data: The data buffer underlying the DataView. [out] arraybuffer: ArrayBuffer underlying the DataView. [out] byte_offset: The byte offset within the data buffer from which to start projecting the DataView.  Returns napi_ok if the API succeeded. This API returns various properties of a DataView."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_value_bool","title":"napi_get_value_bool","description":"napi_status napi_get_value_bool(napi_env env, napi_value value, bool* result)   [in] env: The environment that the API is invoked under. [in] value: napi_value representing JavaScript Boolean. [out] result: C boolean primitive equivalent of the given JavaScript Boolean.  Returns napi_ok if the API succeeded. If a non-boolean napi_value is passed in it returns napi_boolean_expected. This API returns the C boolean primitive equivalent of the given JavaScript Boolean."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_value_double","title":"napi_get_value_double","description":"napi_status napi_get_value_double(napi_env env,                                   napi_value value,                                   double* result)   [in] env: The environment that the API is invoked under. [in] value: napi_value representing JavaScript Number. [out] result: C double primitive equivalent of the given JavaScript Number.  Returns napi_ok if the API succeeded. If a non-number napi_value is passed in it returns napi_number_expected. This API returns the C double primitive equivalent of the given JavaScript Number."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_value_external","title":"napi_get_value_external","description":"napi_status napi_get_value_external(napi_env env,                                     napi_value value,                                     void** result)   [in] env: The environment that the API is invoked under. [in] value: napi_value representing JavaScript external value. [out] result: Pointer to the data wrapped by the JavaScript external value.  Returns napi_ok if the API succeeded. If a non-external napi_value is passed in it returns napi_invalid_arg. This API retrieves the external data pointer that was previously passed to napi_create_external()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_value_int32","title":"napi_get_value_int32","description":"napi_status napi_get_value_int32(napi_env env,                                  napi_value value,                                  int32_t* result)   [in] env: The environment that the API is invoked under. [in] value: napi_value representing JavaScript Number. [out] result: C int32 primitive equivalent of the given JavaScript Number.  Returns napi_ok if the API succeeded. If a non-number napi_value is passed in napi_number_expected. This API returns the C int32 primitive equivalent of the given JavaScript Number. If the number exceeds the range of the 32 bit integer, then the result is truncated to the equivalent of the bottom 32 bits. This can result in a large positive number becoming a negative number if the value is > 2^31 -1. Non-finite number values (NaN, +Infinity, or -Infinity) set the result to zero."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_value_int64","title":"napi_get_value_int64","description":"napi_status napi_get_value_int64(napi_env env,                                  napi_value value,                                  int64_t* result)   [in] env: The environment that the API is invoked under. [in] value: napi_value representing JavaScript Number. [out] result: C int64 primitive equivalent of the given JavaScript Number.  Returns napi_ok if the API succeeded. If a non-number napi_value is passed in it returns napi_number_expected. This API returns the C int64 primitive equivalent of the given JavaScript Number. Number values outside the range of Number.MIN_SAFE_INTEGER -(2^53 - 1) - Number.MAX_SAFE_INTEGER (2^53 - 1) will lose precision. Non-finite number values (NaN, +Infinity, or -Infinity) set the result to zero."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_value_string_latin1","title":"napi_get_value_string_latin1","description":"napi_status napi_get_value_string_latin1(napi_env env,                                          napi_value value,                                          char* buf,                                          size_t bufsize,                                          size_t* result)   [in] env: The environment that the API is invoked under. [in] value: napi_value representing JavaScript string. [in] buf: Buffer to write the ISO-8859-1-encoded string into. If NULL is passed in, the length of the string (in bytes) is returned. [in] bufsize: Size of the destination buffer. When this value is insufficient, the returned string will be truncated. [out] result: Number of bytes copied into the buffer, excluding the null terminator.  Returns napi_ok if the API succeeded. If a non-String napi_value is passed in it returns napi_string_expected. This API returns the ISO-8859-1-encoded string corresponding the value passed in."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_value_string_utf8","title":"napi_get_value_string_utf8","description":"napi_status napi_get_value_string_utf8(napi_env env,                                        napi_value value,                                        char* buf,                                        size_t bufsize,                                        size_t* result)   [in] env: The environment that the API is invoked under. [in] value: napi_value representing JavaScript string. [in] buf: Buffer to write the UTF8-encoded string into. If NULL is passed in, the length of the string (in bytes) is returned. [in] bufsize: Size of the destination buffer. When this value is insufficient, the returned string will be truncated. [out] result: Number of bytes copied into the buffer, excluding the null terminator.  Returns napi_ok if the API succeeded. If a non-String napi_value is passed in it returns napi_string_expected. This API returns the UTF8-encoded string corresponding the value passed in."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_value_string_utf16","title":"napi_get_value_string_utf16","description":"napi_status napi_get_value_string_utf16(napi_env env,                                         napi_value value,                                         char16_t* buf,                                         size_t bufsize,                                         size_t* result)   [in] env: The environment that the API is invoked under. [in] value: napi_value representing JavaScript string. [in] buf: Buffer to write the UTF16-LE-encoded string into. If NULL is passed in, the length of the string (in 2-byte code units) is returned. [in] bufsize: Size of the destination buffer. When this value is insufficient, the returned string will be truncated. [out] result: Number of 2-byte code units copied into the buffer, excluding the null terminator.  Returns napi_ok if the API succeeded. If a non-String napi_value is passed in it returns napi_string_expected. This API returns the UTF16-encoded string corresponding the value passed in."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_value_uint32","title":"napi_get_value_uint32","description":"napi_status napi_get_value_uint32(napi_env env,                                   napi_value value,                                   uint32_t* result)   [in] env: The environment that the API is invoked under. [in] value: napi_value representing JavaScript Number. [out] result: C primitive equivalent of the given napi_value as a uint32_t.  Returns napi_ok if the API succeeded. If a non-number napi_value is passed in it returns napi_number_expected. This API returns the C primitive equivalent of the given napi_value as a uint32_t."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_functions_to_get_global_instances","title":"Functions to get global instances","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_boolean","title":"napi_get_boolean","description":"napi_status napi_get_boolean(napi_env env, bool value, napi_value* result)   [in] env: The environment that the API is invoked under. [in] value: The value of the boolean to retrieve. [out] result: napi_value representing JavaScript Boolean singleton to retrieve.  Returns napi_ok if the API succeeded. This API is used to return the JavaScript singleton object that is used to represent the given boolean value."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_global","title":"napi_get_global","description":"napi_status napi_get_global(napi_env env, napi_value* result)   [in] env: The environment that the API is invoked under. [out] result: napi_value representing JavaScript global object.  Returns napi_ok if the API succeeded. This API returns the global object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_null","title":"napi_get_null","description":"napi_status napi_get_null(napi_env env, napi_value* result)   [in] env: The environment that the API is invoked under. [out] result: napi_value representing JavaScript null object.  Returns napi_ok if the API succeeded. This API returns the null object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_undefined","title":"napi_get_undefined","description":"napi_status napi_get_undefined(napi_env env, napi_value* result)   [in] env: The environment that the API is invoked under. [out] result: napi_value representing JavaScript Undefined value.  Returns napi_ok if the API succeeded. This API returns the Undefined object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_working_with_javascript_values_abstract_operations","title":"Working with JavaScript Values - Abstract Operations","description":"N-API exposes a set of APIs to perform some abstract operations on JavaScript values. Some of these operations are documented under Section 7 of the ECMAScript Language Specification. These APIs support doing one of the following:  Coerce JavaScript values to specific JavaScript types (such as Number or String). Check the type of a JavaScript value. Check for equality between two JavaScript values."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_coerce_to_bool","title":"napi_coerce_to_bool","description":"napi_status napi_coerce_to_bool(napi_env env,                                 napi_value value,                                 napi_value* result)   [in] env: The environment that the API is invoked under. [in] value: The JavaScript value to coerce. [out] result: napi_value representing the coerced JavaScript Boolean.  Returns napi_ok if the API succeeded. This API implements the abstract operation ToBoolean() as defined in Section 7.1.2 of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in Object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_coerce_to_number","title":"napi_coerce_to_number","description":"napi_status napi_coerce_to_number(napi_env env,                                   napi_value value,                                   napi_value* result)   [in] env: The environment that the API is invoked under. [in] value: The JavaScript value to coerce. [out] result: napi_value representing the coerced JavaScript Number.  Returns napi_ok if the API succeeded. This API implements the abstract operation ToNumber() as defined in Section 7.1.3 of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in Object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_coerce_to_object","title":"napi_coerce_to_object","description":"napi_status napi_coerce_to_object(napi_env env,                                   napi_value value,                                   napi_value* result)   [in] env: The environment that the API is invoked under. [in] value: The JavaScript value to coerce. [out] result: napi_value representing the coerced JavaScript Object.  Returns napi_ok if the API succeeded. This API implements the abstract operation ToObject() as defined in Section 7.1.13 of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in Object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_coerce_to_string","title":"napi_coerce_to_string","description":"napi_status napi_coerce_to_string(napi_env env,                                   napi_value value,                                   napi_value* result)   [in] env: The environment that the API is invoked under. [in] value: The JavaScript value to coerce. [out] result: napi_value representing the coerced JavaScript String.  Returns napi_ok if the API succeeded. This API implements the abstract operation ToString() as defined in Section 7.1.13 of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in Object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_typeof","title":"napi_typeof","description":"napi_status napi_typeof(napi_env env, napi_value value, napi_valuetype* result)   [in] env: The environment that the API is invoked under. [in] value: The JavaScript value whose type to query. [out] result: The type of the JavaScript value.  Returns napi_ok if the API succeeded.  napi_invalid_arg if the type of value is not a known ECMAScript type and value is not an External value.  This API represents behavior similar to invoking the typeof Operator on the object as defined in Section 12.5.5 of the ECMAScript Language Specification. However, it has support for detecting an External value. If value has a type that is invalid, an error is returned."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_instanceof","title":"napi_instanceof","description":"napi_status napi_instanceof(napi_env env,                             napi_value object,                             napi_value constructor,                             bool* result)   [in] env: The environment that the API is invoked under. [in] object: The JavaScript value to check. [in] constructor: The JavaScript function object of the constructor function to check against. [out] result: Boolean that is set to true if object instanceof constructor is true.  Returns napi_ok if the API succeeded. This API represents invoking the instanceof Operator on the object as defined in Section 12.10.4 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_is_array","title":"napi_is_array","description":"napi_status napi_is_array(napi_env env, napi_value value, bool* result)   [in] env: The environment that the API is invoked under. [in] value: The JavaScript value to check. [out] result: Whether the given object is an array.  Returns napi_ok if the API succeeded. This API represents invoking the IsArray operation on the object as defined in Section 7.2.2 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_is_arraybuffer","title":"napi_is_arraybuffer","description":"napi_status napi_is_arraybuffer(napi_env env, napi_value value, bool* result)   [in] env: The environment that the API is invoked under. [in] value: The JavaScript value to check. [out] result: Whether the given object is an ArrayBuffer.  Returns napi_ok if the API succeeded. This API checks if the Object passed in is an array buffer."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_is_buffer","title":"napi_is_buffer","description":"napi_status napi_is_buffer(napi_env env, napi_value value, bool* result)   [in] env: The environment that the API is invoked under. [in] value: The JavaScript value to check. [out] result: Whether the given napi_value represents a node::Buffer object.  Returns napi_ok if the API succeeded. This API checks if the Object passed in is a buffer."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_is_error","title":"napi_is_error","description":"napi_status napi_is_error(napi_env env, napi_value value, bool* result)   [in] env: The environment that the API is invoked under. [in] value: The JavaScript value to check. [out] result: Whether the given napi_value represents an Error object.  Returns napi_ok if the API succeeded. This API checks if the Object passed in is an Error."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_is_typedarray","title":"napi_is_typedarray","description":"napi_status napi_is_typedarray(napi_env env, napi_value value, bool* result)   [in] env: The environment that the API is invoked under. [in] value: The JavaScript value to check. [out] result: Whether the given napi_value represents a TypedArray.  Returns napi_ok if the API succeeded. This API checks if the Object passed in is a typed array."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_is_dataview","title":"napi_is_dataview","description":"napi_status napi_is_dataview(napi_env env, napi_value value, bool* result)   [in] env: The environment that the API is invoked under. [in] value: The JavaScript value to check. [out] result: Whether the given napi_value represents a DataView.  Returns napi_ok if the API succeeded. This API checks if the Object passed in is a DataView."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_strict_equals","title":"napi_strict_equals","description":"napi_status napi_strict_equals(napi_env env,                                napi_value lhs,                                napi_value rhs,                                bool* result)   [in] env: The environment that the API is invoked under. [in] lhs: The JavaScript value to check. [in] rhs: The JavaScript value to check against. [out] result: Whether the two napi_value objects are equal.  Returns napi_ok if the API succeeded. This API represents the invocation of the Strict Equality algorithm as defined in Section 7.2.14 of the ECMAScript Language Specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_working_with_javascript_properties","title":"Working with JavaScript Properties","description":"N-API exposes a set of APIs to get and set properties on JavaScript objects. Some of these types are documented under Section 7 of the ECMAScript Language Specification. Properties in JavaScript are represented as a tuple of a key and a value. Fundamentally, all property keys in N-API can be represented in one of the following forms:  Named: a simple UTF8-encoded string Integer-Indexed: an index value represented by uint32_t JavaScript value: these are represented in N-API by napi_value. This can be a napi_value representing a String, Number, or Symbol.  N-API values are represented by the type napi_value. Any N-API call that requires a JavaScript value takes in a napi_value. However, it&#39;s the caller&#39;s responsibility to make sure that the napi_value in question is of the JavaScript type expected by the API. The APIs documented in this section provide a simple interface to get and set properties on arbitrary JavaScript objects represented by napi_value. For instance, consider the following JavaScript code snippet: const obj = {}; obj.myProp = 123;  The equivalent can be done using N-API values with the following snippet: napi_status status = napi_generic_failure;  \/\/ const obj = {} napi_value obj, value; status = napi_create_object(env, &obj); if (status != napi_ok) return status;  \/\/ Create a napi_value for 123 status = napi_create_int32(env, 123, &value); if (status != napi_ok) return status;  \/\/ obj.myProp = 123 status = napi_set_named_property(env, obj, \"myProp\", value); if (status != napi_ok) return status;  Indexed properties can be set in a similar manner. Consider the following JavaScript snippet: const arr = []; arr[123] = &#39;hello&#39;;  The equivalent can be done using N-API values with the following snippet: napi_status status = napi_generic_failure;  \/\/ const arr = []; napi_value arr, value; status = napi_create_array(env, &arr); if (status != napi_ok) return status;  \/\/ Create a napi_value for &#39;hello&#39; status = napi_create_string_utf8(env, \"hello\", NAPI_AUTO_LENGTH, &value); if (status != napi_ok) return status;  \/\/ arr[123] = &#39;hello&#39;; status = napi_set_element(env, arr, 123, value); if (status != napi_ok) return status;  Properties can be retrieved using the APIs described in this section. Consider the following JavaScript snippet: const arr = []; const value = arr[123];  The following is the approximate equivalent of the N-API counterpart: napi_status status = napi_generic_failure;  \/\/ const arr = [] napi_value arr, value; status = napi_create_array(env, &arr); if (status != napi_ok) return status;  \/\/ const value = arr[123] status = napi_get_element(env, arr, 123, &value); if (status != napi_ok) return status;  Finally, multiple properties can also be defined on an object for performance reasons. Consider the following JavaScript: const obj = {}; Object.defineProperties(obj, {   &#39;foo&#39;: { value: 123, writable: true, configurable: true, enumerable: true },   &#39;bar&#39;: { value: 456, writable: true, configurable: true, enumerable: true } });  The following is the approximate equivalent of the N-API counterpart: napi_status status = napi_status_generic_failure;  \/\/ const obj = {}; napi_value obj; status = napi_create_object(env, &obj); if (status != napi_ok) return status;  \/\/ Create napi_values for 123 and 456 napi_value fooValue, barValue; status = napi_create_int32(env, 123, &fooValue); if (status != napi_ok) return status; status = napi_create_int32(env, 456, &barValue); if (status != napi_ok) return status;  \/\/ Set the properties napi_property_descriptor descriptors[] = {   { \"foo\", NULL, NULL, NULL, NULL, fooValue, napi_default, NULL },   { \"bar\", NULL, NULL, NULL, NULL, barValue, napi_default, NULL } } status = napi_define_properties(env,                                 obj,                                 sizeof(descriptors) \/ sizeof(descriptors[0]),                                 descriptors); if (status != napi_ok) return status;"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_structures","title":"Structures","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_property_attributes","title":"napi_property_attributes","description":"typedef enum {   napi_default = 0,   napi_writable = 1 << 0,   napi_enumerable = 1 << 1,   napi_configurable = 1 << 2,    \/\/ Used with napi_define_class to distinguish static properties   \/\/ from instance properties. Ignored by napi_define_properties.   napi_static = 1 << 10, } napi_property_attributes;  napi_property_attributes are flags used to control the behavior of properties set on a JavaScript object. Other than napi_static they correspond to the attributes listed in Section 6.1.7.1 of the ECMAScript Language Specification. They can be one or more of the following bitflags:  napi_default - Used to indicate that no explicit attributes are set on the given property. By default, a property is read only, not enumerable and not configurable. napi_writable - Used to indicate that a given property is writable. napi_enumerable - Used to indicate that a given property is enumerable. napi_configurable - Used to indicate that a given property is configurable, as defined in Section 6.1.7.1 of the ECMAScript Language Specification. napi_static - Used to indicate that the property will be defined as a static property on a class as opposed to an instance property, which is the default. This is used only by napi_define_class. It is ignored by napi_define_properties."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_property_descriptor","title":"napi_property_descriptor","description":"typedef struct {   \/\/ One of utf8name or name should be NULL.   const char* utf8name;   napi_value name;    napi_callback method;   napi_callback getter;   napi_callback setter;   napi_value value;    napi_property_attributes attributes;   void* data; } napi_property_descriptor;   utf8name: Optional String describing the key for the property, encoded as UTF8. One of utf8name or name must be provided for the property. name: Optional napi_value that points to a JavaScript string or symbol to be used as the key for the property. One of utf8name or name must be provided for the property. value: The value that&#39;s retrieved by a get access of the property if the property is a data property. If this is passed in, set getter, setter, method and data to NULL (since these members won&#39;t be used). getter: A function to call when a get access of the property is performed. If this is passed in, set value and method to NULL (since these members won&#39;t be used). The given function is called implicitly by the runtime when the property is accessed from JavaScript code (or if a get on the property is performed using a N-API call). setter: A function to call when a set access of the property is performed. If this is passed in, set value and method to NULL (since these members won&#39;t be used). The given function is called implicitly by the runtime when the property is set from JavaScript code (or if a set on the property is performed using a N-API call). method: Set this to make the property descriptor object&#39;s value property to be a JavaScript function represented by method. If this is passed in, set value, getter and setter to NULL (since these members won&#39;t be used). attributes: The attributes associated with the particular property. See napi_property_attributes. data: The callback data passed into method, getter and setter if this function is invoked."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_functions","title":"Functions","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_property_names","title":"napi_get_property_names","description":"napi_status napi_get_property_names(napi_env env,                                     napi_value object,                                     napi_value* result);   [in] env: The environment that the N-API call is invoked under. [in] object: The object from which to retrieve the properties. [out] result: A napi_value representing an array of JavaScript values that represent the property names of the object. The API can be used to iterate over result using napi_get_array_length and napi_get_element.  Returns napi_ok if the API succeeded. This API returns the names of the enumerable properties of object as an array of strings. The properties of object whose key is a symbol will not be included."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_set_property","title":"napi_set_property","description":"napi_status napi_set_property(napi_env env,                               napi_value object,                               napi_value key,                               napi_value value);   [in] env: The environment that the N-API call is invoked under. [in] object: The object on which to set the property. [in] key: The name of the property to set. [in] value: The property value.  Returns napi_ok if the API succeeded. This API set a property on the Object passed in."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_property","title":"napi_get_property","description":"napi_status napi_get_property(napi_env env,                               napi_value object,                               napi_value key,                               napi_value* result);   [in] env: The environment that the N-API call is invoked under. [in] object: The object from which to retrieve the property. [in] key: The name of the property to retrieve. [out] result: The value of the property.  Returns napi_ok if the API succeeded. This API gets the requested property from the Object passed in."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_has_property","title":"napi_has_property","description":"napi_status napi_has_property(napi_env env,                               napi_value object,                               napi_value key,                               bool* result);   [in] env: The environment that the N-API call is invoked under. [in] object: The object to query. [in] key: The name of the property whose existence to check. [out] result: Whether the property exists on the object or not.  Returns napi_ok if the API succeeded. This API checks if the Object passed in has the named property."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_delete_property","title":"napi_delete_property","description":"napi_status napi_delete_property(napi_env env,                                  napi_value object,                                  napi_value key,                                  bool* result);   [in] env: The environment that the N-API call is invoked under. [in] object: The object to query. [in] key: The name of the property to delete. [out] result: Whether the property deletion succeeded or not. result can optionally be ignored by passing NULL.  Returns napi_ok if the API succeeded. This API attempts to delete the key own property from object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_has_own_property","title":"napi_has_own_property","description":"napi_status napi_has_own_property(napi_env env,                                   napi_value object,                                   napi_value key,                                   bool* result);   [in] env: The environment that the N-API call is invoked under. [in] object: The object to query. [in] key: The name of the own property whose existence to check. [out] result: Whether the own property exists on the object or not.  Returns napi_ok if the API succeeded. This API checks if the Object passed in has the named own property. key must be a string or a Symbol, or an error will be thrown. N-API will not perform any conversion between data types."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_set_named_property","title":"napi_set_named_property","description":"napi_status napi_set_named_property(napi_env env,                                     napi_value object,                                     const char* utf8Name,                                     napi_value value);   [in] env: The environment that the N-API call is invoked under. [in] object: The object on which to set the property. [in] utf8Name: The name of the property to set. [in] value: The property value.  Returns napi_ok if the API succeeded. This method is equivalent to calling napi_set_property with a napi_value created from the string passed in as utf8Name."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_named_property","title":"napi_get_named_property","description":"napi_status napi_get_named_property(napi_env env,                                     napi_value object,                                     const char* utf8Name,                                     napi_value* result);   [in] env: The environment that the N-API call is invoked under. [in] object: The object from which to retrieve the property. [in] utf8Name: The name of the property to get. [out] result: The value of the property.  Returns napi_ok if the API succeeded. This method is equivalent to calling napi_get_property with a napi_value created from the string passed in as utf8Name."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_has_named_property","title":"napi_has_named_property","description":"napi_status napi_has_named_property(napi_env env,                                     napi_value object,                                     const char* utf8Name,                                     bool* result);   [in] env: The environment that the N-API call is invoked under. [in] object: The object to query. [in] utf8Name: The name of the property whose existence to check. [out] result: Whether the property exists on the object or not.  Returns napi_ok if the API succeeded. This method is equivalent to calling napi_has_property with a napi_value created from the string passed in as utf8Name."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_set_element","title":"napi_set_element","description":"napi_status napi_set_element(napi_env env,                              napi_value object,                              uint32_t index,                              napi_value value);   [in] env: The environment that the N-API call is invoked under. [in] object: The object from which to set the properties. [in] index: The index of the property to set. [in] value: The property value.  Returns napi_ok if the API succeeded. This API sets and element on the Object passed in."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_element","title":"napi_get_element","description":"napi_status napi_get_element(napi_env env,                              napi_value object,                              uint32_t index,                              napi_value* result);   [in] env: The environment that the N-API call is invoked under. [in] object: The object from which to retrieve the property. [in] index: The index of the property to get. [out] result: The value of the property.  Returns napi_ok if the API succeeded. This API gets the element at the requested index."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_has_element","title":"napi_has_element","description":"napi_status napi_has_element(napi_env env,                              napi_value object,                              uint32_t index,                              bool* result);   [in] env: The environment that the N-API call is invoked under. [in] object: The object to query. [in] index: The index of the property whose existence to check. [out] result: Whether the property exists on the object or not.  Returns napi_ok if the API succeeded. This API returns if the Object passed in has an element at the requested index."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_delete_element","title":"napi_delete_element","description":"napi_status napi_delete_element(napi_env env,                                 napi_value object,                                 uint32_t index,                                 bool* result);   [in] env: The environment that the N-API call is invoked under. [in] object: The object to query. [in] index: The index of the property to delete. [out] result: Whether the element deletion succeeded or not. result can optionally be ignored by passing NULL.  Returns napi_ok if the API succeeded. This API attempts to delete the specified index from object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_define_properties","title":"napi_define_properties","description":"napi_status napi_define_properties(napi_env env,                                    napi_value object,                                    size_t property_count,                                    const napi_property_descriptor* properties);   [in] env: The environment that the N-API call is invoked under. [in] object: The object from which to retrieve the properties. [in] property_count: The number of elements in the properties array. [in] properties: The array of property descriptors.  Returns napi_ok if the API succeeded. This method allows the efficient definition of multiple properties on a given object. The properties are defined using property descriptors (see napi_property_descriptor). Given an array of such property descriptors, this API will set the properties on the object one at a time, as defined by DefineOwnProperty() (described in Section 9.1.6 of the ECMA262 specification)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_working_with_javascript_functions","title":"Working with JavaScript Functions","description":"N-API provides a set of APIs that allow JavaScript code to call back into native code. N-API APIs that support calling back into native code take in a callback functions represented by the napi_callback type. When the JavaScript VM calls back to native code, the napi_callback function provided is invoked. The APIs documented in this section allow the callback function to do the following:  Get information about the context in which the callback was invoked. Get the arguments passed into the callback. Return a napi_value back from the callback.  Additionally, N-API provides a set of functions which allow calling JavaScript functions from native code. One can either call a function like a regular JavaScript function call, or as a constructor function."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_call_function","title":"napi_call_function","description":"napi_status napi_call_function(napi_env env,                                napi_value recv,                                napi_value func,                                int argc,                                const napi_value* argv,                                napi_value* result)   [in] env: The environment that the API is invoked under. [in] recv: The this object passed to the called function. [in] func: napi_value representing the JavaScript function to be invoked. [in] argc: The count of elements in the argv array. [in] argv: Array of napi_values representing JavaScript values passed in as arguments to the function. [out] result: napi_value representing the JavaScript object returned.  Returns napi_ok if the API succeeded. This method allows a JavaScript function object to be called from a native add-on. This is the primary mechanism of calling back from the add-on&#39;s native code into JavaScript. For the special case of calling into JavaScript after an async operation, see napi_make_callback. A sample use case might look as follows. Consider the following JavaScript snippet: function AddTwo(num) {   return num + 2; }  Then, the above function can be invoked from a native add-on using the following code: \/\/ Get the function named \"AddTwo\" on the global object napi_value global, add_two, arg; napi_status status = napi_get_global(env, &global); if (status != napi_ok) return;  status = napi_get_named_property(env, global, \"AddTwo\", &add_two); if (status != napi_ok) return;  \/\/ const arg = 1337 status = napi_create_int32(env, 1337, &arg); if (status != napi_ok) return;  napi_value* argv = &arg; size_t argc = 1;  \/\/ AddTwo(arg); napi_value return_val; status = napi_call_function(env, global, add_two, argc, argv, &return_val); if (status != napi_ok) return;  \/\/ Convert the result back to a native type int32_t result; status = napi_get_value_int32(env, return_val, &result); if (status != napi_ok) return;"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_function","title":"napi_create_function","description":"napi_status napi_create_function(napi_env env,                                  const char* utf8name,                                  napi_callback cb,                                  void* data,                                  napi_value* result);   [in] env: The environment that the API is invoked under. [in] utf8Name: The name of the function encoded as UTF8. This is visible within JavaScript as the new function object&#39;s name property. [in] cb: The native function which should be called when this function object is invoked. [in] data: User-provided data context. This will be passed back into the function when invoked later. [out] result: napi_value representing the JavaScript function object for the newly created function.  Returns napi_ok if the API succeeded. This API allows an add-on author to create a function object in native code. This is the primary mechanism to allow calling into the add-on&#39;s native code from JavaScript. The newly created function is not automatically visible from script after this call. Instead, a property must be explicitly set on any object that is visible to JavaScript, in order for the function to be accessible from script. In order to expose a function as part of the add-on&#39;s module exports, set the newly created function on the exports object. A sample module might look as follows: napi_value SayHello(napi_env env, napi_callback_info info) {   printf(\"Hello\\n\");   return NULL; }  napi_value Init(napi_env env, napi_value exports) {   napi_status status;    napi_value fn;   status = napi_create_function(env, NULL, 0, SayHello, NULL, &fn);   if (status != napi_ok) return NULL;    status = napi_set_named_property(env, exports, \"sayHello\", fn);   if (status != napi_ok) return NULL;    return exports; }  NAPI_MODULE(NODE_GYP_MODULE_NAME, Init)  Given the above code, the add-on can be used from JavaScript as follows: const myaddon = require(&#39;.\/addon&#39;); myaddon.sayHello();  The string passed to require is not necessarily the name passed into NAPI_MODULE in the earlier snippet but the name of the target in binding.gyp responsible for creating the .node file."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_cb_info","title":"napi_get_cb_info","description":"napi_status napi_get_cb_info(napi_env env,                              napi_callback_info cbinfo,                              size_t* argc,                              napi_value* argv,                              napi_value* thisArg,                              void** data)   [in] env: The environment that the API is invoked under. [in] cbinfo: The callback info passed into the callback function. [in-out] argc: Specifies the size of the provided argv array and receives the actual count of arguments. [out] argv: Buffer to which the napi_value representing the arguments are copied. If there are more arguments than the provided count, only the requested number of arguments are copied. If there are fewer arguments provided than claimed, the rest of argv is filled with napi_value values that represent undefined. [out] this: Receives the JavaScript this argument for the call. [out] data: Receives the data pointer for the callback.  Returns napi_ok if the API succeeded. This method is used within a callback function to retrieve details about the call like the arguments and the this pointer from a given callback info."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_new_target","title":"napi_get_new_target","description":"napi_status napi_get_new_target(napi_env env,                                 napi_callback_info cbinfo,                                 napi_value* result)   [in] env: The environment that the API is invoked under. [in] cbinfo: The callback info passed into the callback function. [out] result: The new.target of the constructor call.  Returns napi_ok if the API succeeded. This API returns the new.target of the constructor call. If the current callback is not a constructor call, the result is NULL."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_new_instance","title":"napi_new_instance","description":"napi_status napi_new_instance(napi_env env,                               napi_value cons,                               size_t argc,                               napi_value* argv,                               napi_value* result)   [in] env: The environment that the API is invoked under. [in] cons: napi_value representing the JavaScript function to be invoked as a constructor. [in] argc: The count of elements in the argv array. [in] argv: Array of JavaScript values as napi_value representing the arguments to the constructor. [out] result: napi_value representing the JavaScript object returned, which in this case is the constructed object.  This method is used to instantiate a new JavaScript value using a given napi_value that represents the constructor for the object. For example, consider the following snippet: function MyObject(param) {   this.param = param; }  const arg = &#39;hello&#39;; const value = new MyObject(arg);  The following can be approximated in N-API using the following snippet: \/\/ Get the constructor function MyObject napi_value global, constructor, arg, value; napi_status status = napi_get_global(env, &global); if (status != napi_ok) return;  status = napi_get_named_property(env, global, \"MyObject\", &constructor); if (status != napi_ok) return;  \/\/ const arg = \"hello\" status = napi_create_string_utf8(env, \"hello\", NAPI_AUTO_LENGTH, &arg); if (status != napi_ok) return;  napi_value* argv = &arg; size_t argc = 1;  \/\/ const value = new MyObject(arg) status = napi_new_instance(env, constructor, argc, argv, &value);  Returns napi_ok if the API succeeded."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_object_wrap","title":"Object Wrap","description":"N-API offers a way to \"wrap\" C++ classes and instances so that the class constructor and methods can be called from JavaScript.  The napi_define_class API defines a JavaScript class with constructor, static properties and methods, and instance properties and methods that correspond to the C++ class. When JavaScript code invokes the constructor, the constructor callback uses napi_wrap to wrap a new C++ instance in a JavaScript object, then returns the wrapper object. When JavaScript code invokes a method or property accessor on the class, the corresponding napi_callback C++ function is invoked. For an instance callback, napi_unwrap obtains the C++ instance that is the target of the call.  For wrapped objects it may be difficult to distinguish between a function called on a class prototype and a function called on an instance of a class. A common pattern used to address this problem is to save a persistent reference to the class constructor for later instanceof checks. As an example: napi_value MyClass_constructor = NULL; status = napi_get_reference_value(env, MyClass::es_constructor, &MyClass_constructor); assert(napi_ok == status); bool is_instance = false; status = napi_instanceof(env, es_this, MyClass_constructor, &is_instance); assert(napi_ok == status); if (is_instance) {   \/\/ napi_unwrap() ... } else {   \/\/ otherwise... }  The reference must be freed once it is no longer needed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_define_class","title":"napi_define_class","description":"napi_status napi_define_class(napi_env env,                               const char* utf8name,                               size_t length,                               napi_callback constructor,                               void* data,                               size_t property_count,                               const napi_property_descriptor* properties,                               napi_value* result);   [in] env: The environment that the API is invoked under. [in] utf8name: Name of the JavaScript constructor function; this is not required to be the same as the C++ class name, though it is recommended for clarity. [in] length: The length of the utf8name in bytes, or NAPI_AUTO_LENGTH if it is null-terminated. [in] constructor: Callback function that handles constructing instances of the class. (This should be a static method on the class, not an actual C++ constructor function.) [in] data: Optional data to be passed to the constructor callback as the data property of the callback info. [in] property_count: Number of items in the properties array argument. [in] properties: Array of property descriptors describing static and instance data properties, accessors, and methods on the class See napi_property_descriptor. [out] result: A napi_value representing the constructor function for the class.  Returns napi_ok if the API succeeded. Defines a JavaScript class that corresponds to a C++ class, including:  A JavaScript constructor function that has the class name and invokes the provided C++ constructor callback. Properties on the constructor function corresponding to static data properties, accessors, and methods of the C++ class (defined by property descriptors with the napi_static attribute). Properties on the constructor function&#39;s prototype object corresponding to non-static data properties, accessors, and methods of the C++ class (defined by property descriptors without the napi_static attribute).  The C++ constructor callback should be a static method on the class that calls the actual class constructor, then wraps the new C++ instance in a JavaScript object, and returns the wrapper object. See napi_wrap() for details. The JavaScript constructor function returned from napi_define_class is often saved and used later, to construct new instances of the class from native code, and\/or check whether provided values are instances of the class. In that case, to prevent the function value from being garbage-collected, create a persistent reference to it using napi_create_reference and ensure the reference count is kept >= 1."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_wrap","title":"napi_wrap","description":"napi_status napi_wrap(napi_env env,                       napi_value js_object,                       void* native_object,                       napi_finalize finalize_cb,                       void* finalize_hint,                       napi_ref* result);   [in] env: The environment that the API is invoked under. [in] js_object: The JavaScript object that will be the wrapper for the native object. This object must have been created from the prototype of a constructor that was created using napi_define_class(). [in] native_object: The native instance that will be wrapped in the JavaScript object. [in] finalize_cb: Optional native callback that can be used to free the native instance when the JavaScript object is ready for garbage-collection. [in] finalize_hint: Optional contextual hint that is passed to the finalize callback. [out] result: Optional reference to the wrapped object.  Returns napi_ok if the API succeeded. Wraps a native instance in a JavaScript object. The native instance can be retrieved later using napi_unwrap(). When JavaScript code invokes a constructor for a class that was defined using napi_define_class(), the napi_callback for the constructor is invoked. After constructing an instance of the native class, the callback must then call napi_wrap() to wrap the newly constructed instance in the already-created JavaScript object that is the this argument to the constructor callback. (That this object was created from the constructor function&#39;s prototype, so it already has definitions of all the instance properties and methods.) Typically when wrapping a class instance, a finalize callback should be provided that simply deletes the native instance that is received as the data argument to the finalize callback. The optional returned reference is initially a weak reference, meaning it has a reference count of 0. Typically this reference count would be incremented temporarily during async operations that require the instance to remain valid. Caution: The optional returned reference (if obtained) should be deleted via napi_delete_reference ONLY in response to the finalize callback invocation. (If it is deleted before then, then the finalize callback may never be invoked.) Therefore, when obtaining a reference a finalize callback is also required in order to enable correct proper of the reference. This API may modify the prototype chain of the wrapper object. Afterward, additional manipulation of the wrapper&#39;s prototype chain may cause napi_unwrap() to fail. Calling napi_wrap() a second time on an object will return an error. To associate another native instance with the object, use napi_remove_wrap() first."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_unwrap","title":"napi_unwrap","description":"napi_status napi_unwrap(napi_env env,                         napi_value js_object,                         void** result);   [in] env: The environment that the API is invoked under. [in] js_object: The object associated with the native instance. [out] result: Pointer to the wrapped native instance.  Returns napi_ok if the API succeeded. Retrieves a native instance that was previously wrapped in a JavaScript object using napi_wrap(). When JavaScript code invokes a method or property accessor on the class, the corresponding napi_callback is invoked. If the callback is for an instance method or accessor, then the this argument to the callback is the wrapper object; the wrapped C++ instance that is the target of the call can be obtained then by calling napi_unwrap() on the wrapper object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_remove_wrap","title":"napi_remove_wrap","description":"napi_status napi_remove_wrap(napi_env env,                              napi_value js_object,                              void** result);   [in] env: The environment that the API is invoked under. [in] js_object: The object associated with the native instance. [out] result: Pointer to the wrapped native instance.  Returns napi_ok if the API succeeded. Retrieves a native instance that was previously wrapped in the JavaScript object js_object using napi_wrap() and removes the wrapping, thereby restoring the JavaScript object&#39;s prototype chain. If a finalize callback was associated with the wrapping, it will no longer be called when the JavaScript object becomes garbage-collected."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_simple_asynchronous_operations","title":"Simple Asynchronous Operations","description":"Addon modules often need to leverage async helpers from libuv as part of their implementation. This allows them to schedule work to be executed asynchronously so that their methods can return in advance of the work being completed. This is important in order to allow them to avoid blocking overall execution of the Node.js application. N-API provides an ABI-stable interface for these supporting functions which covers the most common asynchronous use cases. N-API defines the napi_work structure which is used to manage asynchronous workers. Instances are created\/deleted with napi_create_async_work and napi_delete_async_work. The execute and complete callbacks are functions that will be invoked when the executor is ready to execute and when it completes its task respectively. The execute function should avoid making any N-API calls that could result in the execution of JavaScript or interaction with JavaScript objects. Most often, any code that needs to make N-API calls should be made in complete callback instead. These functions implement the following interfaces: typedef void (*napi_async_execute_callback)(napi_env env,                                             void* data); typedef void (*napi_async_complete_callback)(napi_env env,                                              napi_status status,                                              void* data);  When these methods are invoked, the data parameter passed will be the addon-provided void* data that was passed into the napi_create_async_work call. Once created the async worker can be queued for execution using the napi_queue_async_work function: napi_status napi_queue_async_work(napi_env env,                                   napi_async_work work);  napi_cancel_async_work can be used if the work needs to be cancelled before the work has started execution. After calling napi_cancel_async_work, the complete callback will be invoked with a status value of napi_cancelled. The work should not be deleted before the complete callback invocation, even when it was cancelled."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_async_work","title":"napi_create_async_work","description":"napi_status napi_create_async_work(napi_env env,                                    napi_value async_resource,                                    napi_value async_resource_name,                                    napi_async_execute_callback execute,                                    napi_async_complete_callback complete,                                    void* data,                                    napi_async_work* result);   [in] env: The environment that the API is invoked under. [in] async_resource: An optional object associated with the async work that will be passed to possible async_hooks init hooks. [in] async_resource_name: Identifier for the kind of resource that is being provided for diagnostic information exposed by the async_hooks API. [in] execute: The native function which should be called to execute the logic asynchronously. The given function is called from a worker pool thread and can execute in parallel with the main event loop thread. [in] complete: The native function which will be called when the asynchronous logic is completed or is cancelled. The given function is called from the main event loop thread. [in] data: User-provided data context. This will be passed back into the execute and complete functions. [out] result: napi_async_work* which is the handle to the newly created async work.  Returns napi_ok if the API succeeded. This API allocates a work object that is used to execute logic asynchronously. It should be freed using napi_delete_async_work once the work is no longer required. async_resource_name should be a null-terminated, UTF-8-encoded string. The async_resource_name identifier is provided by the user and should be representative of the type of async work being performed. It is also recommended to apply namespacing to the identifier, e.g. by including the module name. See the async_hooks documentation for more information."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_delete_async_work","title":"napi_delete_async_work","description":"napi_status napi_delete_async_work(napi_env env,                                    napi_async_work work);   [in] env: The environment that the API is invoked under. [in] work: The handle returned by the call to napi_create_async_work.  Returns napi_ok if the API succeeded. This API frees a previously allocated work object. This API can be called even if there is a pending JavaScript exception."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_queue_async_work","title":"napi_queue_async_work","description":"napi_status napi_queue_async_work(napi_env env,                                   napi_async_work work);   [in] env: The environment that the API is invoked under. [in] work: The handle returned by the call to napi_create_async_work.  Returns napi_ok if the API succeeded. This API requests that the previously allocated work be scheduled for execution."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_cancel_async_work","title":"napi_cancel_async_work","description":"napi_status napi_cancel_async_work(napi_env env,                                    napi_async_work work);   [in] env: The environment that the API is invoked under. [in] work: The handle returned by the call to napi_create_async_work.  Returns napi_ok if the API succeeded. This API cancels queued work if it has not yet been started. If it has already started executing, it cannot be cancelled and napi_generic_failure will be returned. If successful, the complete callback will be invoked with a status value of napi_cancelled. The work should not be deleted before the complete callback invocation, even if it has been successfully cancelled. This API can be called even if there is a pending JavaScript exception."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_custom_asynchronous_operations","title":"Custom Asynchronous Operations","description":"The simple asynchronous work APIs above may not be appropriate for every scenario. When using any other asynchronous mechanism, the following APIs are necessary to ensure an asynchronous operation is properly tracked by the runtime."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_async_init","title":"napi_async_init","description":"napi_status napi_async_init(napi_env env,                             napi_value async_resource,                             napi_value async_resource_name,                             napi_async_context* result)   [in] env: The environment that the API is invoked under. [in] async_resource: An optional object associated with the async work that will be passed to possible async_hooks init hooks. [in] async_resource_name: Identifier for the kind of resource that is being provided for diagnostic information exposed by the async_hooks API. [out] result: The initialized async context.  Returns napi_ok if the API succeeded."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_async_destroy","title":"napi_async_destroy","description":"napi_status napi_async_destroy(napi_env env,                                napi_async_context async_context);   [in] env: The environment that the API is invoked under. [in] async_context: The async context to be destroyed.  Returns napi_ok if the API succeeded. This API can be called even if there is a pending JavaScript exception."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_make_callback","title":"napi_make_callback","description":"napi_status napi_make_callback(napi_env env,                                napi_async_context async_context,                                napi_value recv,                                napi_value func,                                int argc,                                const napi_value* argv,                                napi_value* result)   [in] env: The environment that the API is invoked under. [in] async_context: Context for the async operation that is  invoking the callback. This should normally be a value previously  obtained from napi_async_init. However NULL is also allowed,  which indicates the current async context (if any) is to be used  for the callback. [in] recv: The this object passed to the called function. [in] func: napi_value representing the JavaScript function to be invoked. [in] argc: The count of elements in the argv array. [in] argv: Array of JavaScript values as napi_value representing the arguments to the function. [out] result: napi_value representing the JavaScript object returned.  Returns napi_ok if the API succeeded. This method allows a JavaScript function object to be called from a native add-on. This API is similar to napi_call_function. However, it is used to call from native code back into JavaScript after returning from an async operation (when there is no other script on the stack). It is a fairly simple wrapper around node::MakeCallback. Note it is not necessary to use napi_make_callback from within a napi_async_complete_callback; in that situation the callback&#39;s async context has already been set up, so a direct call to napi_call_function is sufficient and appropriate. Use of the napi_make_callback function may be required when implementing custom async behavior that does not use napi_create_async_work."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_open_callback_scope","title":"napi_open_callback_scope","description":"NAPI_EXTERN napi_status napi_open_callback_scope(napi_env env,                                                  napi_value resource_object,                                                  napi_async_context context,                                                  napi_callback_scope* result)   [in] env: The environment that the API is invoked under. [in] resource_object: An optional object associated with the async work that will be passed to possible async_hooks init hooks. [in] context: Context for the async operation that is invoking the callback. This should be a value previously obtained from napi_async_init. [out] result: The newly created scope.  There are cases (for example resolving promises) where it is necessary to have the equivalent of the scope associated with a callback in place when making certain N-API calls. If there is no other script on the stack the napi_open_callback_scope and napi_close_callback_scope functions can be used to open\/close the required scope."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_close_callback_scope","title":"napi_close_callback_scope","description":"NAPI_EXTERN napi_status napi_close_callback_scope(napi_env env,                                                   napi_callback_scope scope)   [in] env: The environment that the API is invoked under. [in] scope: The scope to be closed.  This API can be called even if there is a pending JavaScript exception."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_version_management","title":"Version Management","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_node_version","title":"napi_get_node_version","description":"typedef struct {   uint32_t major;   uint32_t minor;   uint32_t patch;   const char* release; } napi_node_version;  napi_status napi_get_node_version(napi_env env,                                   const napi_node_version** version);   [in] env: The environment that the API is invoked under. [out] version: A pointer to version information for Node.js itself.  Returns napi_ok if the API succeeded. This function fills the version struct with the major, minor, and patch version of Node.js that is currently running, and the release field with the value of process.release.name. The returned buffer is statically allocated and does not need to be freed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_version","title":"napi_get_version","description":"napi_status napi_get_version(napi_env env,                              uint32_t* result);   [in] env: The environment that the API is invoked under. [out] result: The highest version of N-API supported.  Returns napi_ok if the API succeeded. This API returns the highest N-API version supported by the Node.js runtime. N-API is planned to be additive such that newer releases of Node.js may support additional API functions. In order to allow an addon to use a newer function when running with versions of Node.js that support it, while providing fallback behavior when running with Node.js versions that don&#39;t support it:  Call napi_get_version() to determine if the API is available. If available, dynamically load a pointer to the function using uv_dlsym(). Use the dynamically loaded pointer to invoke the function. If the function is not available, provide an alternate implementation that does not use the function."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_memory_management","title":"Memory Management","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_adjust_external_memory","title":"napi_adjust_external_memory","description":"NAPI_EXTERN napi_status napi_adjust_external_memory(napi_env env,                                                     int64_t change_in_bytes,                                                     int64_t* result);   [in] env: The environment that the API is invoked under. [in] change_in_bytes: The change in externally allocated memory that is kept alive by JavaScript objects. [out] result: The adjusted value  Returns napi_ok if the API succeeded. This function gives V8 an indication of the amount of externally allocated memory that is kept alive by JavaScript objects (i.e. a JavaScript object that points to its own memory allocated by a native module). Registering externally allocated memory will trigger global garbage collections more often than it would otherwise."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_promises","title":"Promises","description":"N-API provides facilities for creating Promise objects as described in Section 25.4 of the ECMA specification. It implements promises as a pair of objects. When a promise is created by napi_create_promise(), a \"deferred\" object is created and returned alongside the Promise. The deferred object is bound to the created Promise and is the only means to resolve or reject the Promise using napi_resolve_deferred() or napi_reject_deferred(). The deferred object that is created by napi_create_promise() is freed by napi_resolve_deferred() or napi_reject_deferred(). The Promise object may be returned to JavaScript where it can be used in the usual fashion. For example, to create a promise and pass it to an asynchronous worker: napi_deferred deferred; napi_value promise; napi_status status;  \/\/ Create the promise. status = napi_create_promise(env, &deferred, &promise); if (status != napi_ok) return NULL;  \/\/ Pass the deferred to a function that performs an asynchronous action. do_something_asynchronous(deferred);  \/\/ Return the promise to JS return promise;  The above function do_something_asynchronous() would perform its asynchronous action and then it would resolve or reject the deferred, thereby concluding the promise and freeing the deferred: napi_deferred deferred; napi_value undefined; napi_status status;  \/\/ Create a value with which to conclude the deferred. status = napi_get_undefined(env, &undefined); if (status != napi_ok) return NULL;  \/\/ Resolve or reject the promise associated with the deferred depending on \/\/ whether the asynchronous action succeeded. if (asynchronous_action_succeeded) {   status = napi_resolve_deferred(env, deferred, undefined); } else {   status = napi_reject_deferred(env, deferred, undefined); } if (status != napi_ok) return NULL;  \/\/ At this point the deferred has been freed, so we should assign NULL to it. deferred = NULL;"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_promise","title":"napi_create_promise","description":"napi_status napi_create_promise(napi_env env,                                 napi_deferred* deferred,                                 napi_value* promise);   [in] env: The environment that the API is invoked under. [out] deferred: A newly created deferred object which can later be passed to napi_resolve_deferred() or napi_reject_deferred() to resolve resp. reject the associated promise. [out] promise: The JavaScript promise associated with the deferred object.  Returns napi_ok if the API succeeded. This API creates a deferred object and a JavaScript promise."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_resolve_deferred","title":"napi_resolve_deferred","description":"napi_status napi_resolve_deferred(napi_env env,                                   napi_deferred deferred,                                   napi_value resolution);   [in] env: The environment that the API is invoked under. [in] deferred: The deferred object whose associated promise to resolve. [in] resolution: The value with which to resolve the promise.  This API resolves a JavaScript promise by way of the deferred object with which it is associated. Thus, it can only be used to resolve JavaScript promises for which the corresponding deferred object is available. This effectively means that the promise must have been created using napi_create_promise() and the deferred object returned from that call must have been retained in order to be passed to this API. The deferred object is freed upon successful completion."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_reject_deferred","title":"napi_reject_deferred","description":"napi_status napi_reject_deferred(napi_env env,                                  napi_deferred deferred,                                  napi_value rejection);   [in] env: The environment that the API is invoked under. [in] deferred: The deferred object whose associated promise to resolve. [in] rejection: The value with which to reject the promise.  This API rejects a JavaScript promise by way of the deferred object with which it is associated. Thus, it can only be used to reject JavaScript promises for which the corresponding deferred object is available. This effectively means that the promise must have been created using napi_create_promise() and the deferred object returned from that call must have been retained in order to be passed to this API. The deferred object is freed upon successful completion."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_is_promise","title":"napi_is_promise","description":"napi_status napi_is_promise(napi_env env,                             napi_value promise,                             bool* is_promise);   [in] env: The environment that the API is invoked under. [in] promise: The promise to examine [out] is_promise: Flag indicating whether promise is a native promise object - that is, a promise object created by the underlying engine."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_script_execution","title":"Script execution","description":"N-API provides an API for executing a string containing JavaScript using the underlying JavaScript engine."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_run_script","title":"napi_run_script","description":"NAPI_EXTERN napi_status napi_run_script(napi_env env,                                         napi_value script,                                         napi_value* result);   [in] env: The environment that the API is invoked under. [in] script: A JavaScript string containing the script to execute. [out] result: The value resulting from having executed the script."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_libuv_event_loop","title":"libuv event loop","description":"N-API provides a function for getting the current event loop associated with a specific napi_env."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_uv_event_loop","title":"napi_get_uv_event_loop","description":"NAPI_EXTERN napi_status napi_get_uv_event_loop(napi_env env,                                                uv_loop_t** loop);   [in] env: The environment that the API is invoked under. [out] loop: The current libuv loop instance."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_asynchronous_thread_safe_function_calls","title":"Asynchronous Thread-safe Function Calls","description":"JavaScript functions can normally only be called from a native addon&#39;s main thread. If an addon creates additional threads, then N-API functions that require a napi_env, napi_value, or napi_ref must not be called from those threads. When an addon has additional threads and JavaScript functions need to be invoked based on the processing completed by those threads, those threads must communicate with the addon&#39;s main thread so that the main thread can invoke the JavaScript function on their behalf. The thread-safe function APIs provide an easy way to do this. These APIs provide the type napi_threadsafe_function as well as APIs to create, destroy, and call objects of this type. napi_create_threadsafe_function() creates a persistent reference to a napi_value that holds a JavaScript function which can be called from multiple threads. The calls happen asynchronously. This means that values with which the JavaScript callback is to be called will be placed in a queue, and, for each value in the queue, a call will eventually be made to the JavaScript function. Upon creation of a napi_threadsafe_function a napi_finalize callback can be provided. This callback will be invoked on the main thread when the thread-safe function is about to be destroyed. It receives the context and the finalize data given during construction, and provides an opportunity for cleaning up after the threads e.g. by calling uv_thread_join(). It is important that, aside from the main loop thread, there be no threads left using the thread-safe function after the finalize callback completes. The context given during the call to napi_create_threadsafe_function() can be retrieved from any thread with a call to napi_get_threadsafe_function_context(). napi_call_threadsafe_function() can then be used for initiating a call into JavaScript. napi_call_threadsafe_function() accepts a parameter which controls whether the API behaves blockingly. If set to napi_tsfn_nonblocking, the API behaves non-blockingly, returning napi_queue_full if the queue was full, preventing data from being successfully added to the queue. If set to napi_tsfn_blocking, the API blocks until space becomes available in the queue. napi_call_threadsafe_function() never blocks if the thread-safe function was created with a maximum queue size of 0. The actual call into JavaScript is controlled by the callback given via the call_js_cb parameter. call_js_cb is invoked on the main thread once for each value that was placed into the queue by a successful call to napi_call_threadsafe_function(). If such a callback is not given, a default callback will be used, and the resulting JavaScript call will have no arguments. The call_js_cb callback receives the JavaScript function to call as a napi_value in its parameters, as well as the void* context pointer used when creating the napi_threadsafe_function, and the next data pointer that was created by one of the secondary threads. The callback can then use an API such as napi_call_function() to call into JavaScript. The callback may also be invoked with env and call_js_cb both set to NULL to indicate that calls into JavaScript are no longer possible, while items remain in the queue that may need to be freed. This normally occurs when the Node.js process exits while there is a thread-safe function still active. It is not necessary to call into JavaScript via napi_make_callback() because N-API runs call_js_cb in a context appropriate for callbacks. Threads can be added to and removed from a napi_threadsafe_function object during its existence. Thus, in addition to specifying an initial number of threads upon creation, napi_acquire_threadsafe_function can be called to indicate that a new thread will start making use of the thread-safe function. Similarly, napi_release_threadsafe_function can be called to indicate that an existing thread will stop making use of the thread-safe function. napi_threadsafe_function objects are destroyed when every thread which uses the object has called napi_release_threadsafe_function() or has received a return status of napi_closing in response to a call to napi_call_threadsafe_function. The queue is emptied before the napi_threadsafe_function is destroyed. It is important that napi_release_threadsafe_function() be the last API call made in conjunction with a given napi_threadsafe_function, because after the call completes, there is no guarantee that the napi_threadsafe_function is still allocated. For the same reason it is also important that no more use be made of a thread-safe function after receiving a return value of napi_closing in response to a call to napi_call_threadsafe_function. Data associated with the napi_threadsafe_function can be freed in its napi_finalize callback which was passed to napi_create_threadsafe_function(). Once the number of threads making use of a napi_threadsafe_function reaches zero, no further threads can start making use of it by calling napi_acquire_threadsafe_function(). In fact, all subsequent API calls associated with it, except napi_release_threadsafe_function(), will return an error value of napi_closing. The thread-safe function can be \"aborted\" by giving a value of napi_tsfn_abort to napi_release_threadsafe_function(). This will cause all subsequent APIs associated with the thread-safe function except napi_release_threadsafe_function() to return napi_closing even before its reference count reaches zero. In particular, napi_call_threadsafe_function() will return napi_closing, thus informing the threads that it is no longer possible to make asynchronous calls to the thread-safe function. This can be used as a criterion for terminating the thread. Upon receiving a return value of napi_closing from napi_call_threadsafe_function() a thread must make no further use of the thread-safe function because it is no longer guaranteed to be allocated. Similarly to libuv handles, thread-safe functions can be \"referenced\" and \"unreferenced\". A \"referenced\" thread-safe function will cause the event loop on the thread on which it is created to remain alive until the thread-safe function is destroyed. In contrast, an \"unreferenced\" thread-safe function will not prevent the event loop from exiting. The APIs napi_ref_threadsafe_function and napi_unref_threadsafe_function exist for this purpose."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_create_threadsafe_function","title":"napi_create_threadsafe_function","description":"NAPI_EXTERN napi_status napi_create_threadsafe_function(napi_env env,                                 napi_value func,                                 napi_value async_resource,                                 napi_value async_resource_name,                                 size_t max_queue_size,                                 size_t initial_thread_count,                                 void* thread_finalize_data,                                 napi_finalize thread_finalize_cb,                                 void* context,                                 napi_threadsafe_function_call_js call_js_cb,                                 napi_threadsafe_function* result);   [in] env: The environment that the API is invoked under. [in] func: The JavaScript function to call from another thread. [in] async_resource: An optional object associated with the async work that will be passed to possible async_hooks init hooks. [in] async_resource_name: A JavaScript string to provide an identifier for the kind of resource that is being provided for diagnostic information exposed by the async_hooks API. [in] max_queue_size: Maximum size of the queue. 0 for no limit. [in] initial_thread_count: The initial number of threads, including the main thread, which will be making use of this function. [in] thread_finalize_data: Data to be passed to thread_finalize_cb. [in] thread_finalize_cb: Function to call when the napi_threadsafe_function is being destroyed. [in] context: Optional data to attach to the resulting napi_threadsafe_function. [in] call_js_cb: Optional callback which calls the JavaScript function in response to a call on a different thread. This callback will be called on the main thread. If not given, the JavaScript function will be called with no parameters and with undefined as its this value. [out] result: The asynchronous thread-safe JavaScript function."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_get_threadsafe_function_context","title":"napi_get_threadsafe_function_context","description":"NAPI_EXTERN napi_status napi_get_threadsafe_function_context(napi_threadsafe_function func,                                      void** result);   [in] func: The thread-safe function for which to retrieve the context. [out] result: The location where to store the context.  This API may be called from any thread which makes use of func."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_call_threadsafe_function","title":"napi_call_threadsafe_function","description":"NAPI_EXTERN napi_status napi_call_threadsafe_function(napi_threadsafe_function func,                               void* data,                               napi_threadsafe_function_call_mode is_blocking);   [in] func: The asynchronous thread-safe JavaScript function to invoke. [in] data: Data to send into JavaScript via the callback call_js_cb provided during the creation of the thread-safe JavaScript function. [in] is_blocking: Flag whose value can be either napi_tsfn_blocking to indicate that the call should block if the queue is full or napi_tsfn_nonblocking to indicate that the call should return immediately with a status of napi_queue_full whenever the queue is full.  This API will return napi_closing if napi_release_threadsafe_function() was called with abort set to napi_tsfn_abort from any thread. The value is only added to the queue if the API returns napi_ok. This API may be called from any thread which makes use of func."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_acquire_threadsafe_function","title":"napi_acquire_threadsafe_function","description":"NAPI_EXTERN napi_status napi_acquire_threadsafe_function(napi_threadsafe_function func);   [in] func: The asynchronous thread-safe JavaScript function to start making use of.  A thread should call this API before passing func to any other thread-safe function APIs to indicate that it will be making use of func. This prevents func from being destroyed when all other threads have stopped making use of it. This API may be called from any thread which will start making use of func."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_release_threadsafe_function","title":"napi_release_threadsafe_function","description":"NAPI_EXTERN napi_status napi_release_threadsafe_function(napi_threadsafe_function func,                                  napi_threadsafe_function_release_mode mode);   [in] func: The asynchronous thread-safe JavaScript function whose reference count to decrement. [in] mode: Flag whose value can be either napi_tsfn_release to indicate that the current thread will make no further calls to the thread-safe function, or napi_tsfn_abort to indicate that in addition to the current thread, no other thread should make any further calls to the thread-safe function. If set to napi_tsfn_abort, further calls to napi_call_threadsafe_function() will return napi_closing, and no further values will be placed in the queue.  A thread should call this API when it stops making use of func. Passing func to any thread-safe APIs after having called this API has undefined results, as func may have been destroyed. This API may be called from any thread which will stop making use of func."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_ref_threadsafe_function","title":"napi_ref_threadsafe_function","description":"NAPI_EXTERN napi_status napi_ref_threadsafe_function(napi_env env, napi_threadsafe_function func);   [in] env: The environment that the API is invoked under. [in] func: The thread-safe function to reference.  This API is used to indicate that the event loop running on the main thread should not exit until func has been destroyed. Similar to uv_ref it is also idempotent. This API may only be called from the main thread."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_unref_threadsafe_function","title":"napi_unref_threadsafe_function","description":"NAPI_EXTERN napi_status napi_unref_threadsafe_function(napi_env env, napi_threadsafe_function func);   [in] env: The environment that the API is invoked under. [in] func: The thread-safe function to unreference.  This API is used to indicate that the event loop running on the main thread may exit before func is destroyed. Similar to uv_unref it is also idempotent. This API may only be called from the main thread."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_command_line_options","title":"Command Line Options","description":"Node.js comes with a variety of CLI options. These options expose built-in debugging, multiple ways to execute scripts, and other helpful runtime options. To view this documentation as a manual page in a terminal, run man node."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_synopsis","title":"Synopsis","description":"node [options] [V8 options] [script.js | -e \"script\" | -] [--] [arguments] node debug [script.js | -e \"script\" | <host>:<port>] \u2026 node --v8-options Execute without arguments to start the REPL. For more info about node debug, please see the debugger documentation."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_options","title":"Options","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_","title":"`-`","description":"Alias for stdin, analogous to the use of - in other command line utilities, meaning that the script will be read from stdin, and the rest of the options are passed to that script."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_","title":"`--`","description":"Indicate the end of node options. Pass the rest of the arguments to the script. If no script filename or eval\/print script is supplied prior to this, then the next argument will be used as a script filename."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_abort_on_uncaught_exception","title":"`--abort-on-uncaught-exception`","description":"Aborting instead of exiting causes a core file to be generated for post-mortem analysis using a debugger (such as lldb, gdb, and mdb). If this flag is passed, the behavior can still be set to not abort through process.setUncaughtExceptionCaptureCallback() (and through usage of the domain module that uses it)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_enable_fips","title":"`--enable-fips`","description":"Enable FIPS-compliant crypto at startup. (Requires Node.js to be built with .\/configure --openssl-fips.)"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_experimental_modules","title":"`--experimental-modules`","description":"Enable experimental ES module support and caching modules."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_experimental_repl_await","title":"`--experimental-repl-await`","description":"Enable experimental top-level await keyword support in REPL."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_experimental_vm_modules","title":"`--experimental-vm-modules`","description":"Enable experimental ES Module support in the vm module."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_experimental_worker","title":"`--experimental-worker`","description":"Enable experimental worker threads using the worker_threads module."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_force_fips","title":"`--force-fips`","description":"Force FIPS-compliant crypto on startup. (Cannot be disabled from script code.) (Same requirements as --enable-fips.)"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_icu_data_dir_file","title":"`--icu-data-dir=file`","description":"Specify ICU data load path. (Overrides NODE_ICU_DATA.)"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_inspect_brk_host_port","title":"`--inspect-brk[=[host:]port]`","description":"Activate inspector on host:port and break at start of user script. Default host:port is 127.0.0.1:9229."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_inspect_port_host_port","title":"`--inspect-port=[host:]port`","description":"Set the host:port to be used when the inspector is activated. Useful when activating the inspector by sending the SIGUSR1 signal. Default host is 127.0.0.1."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_inspect_host_port","title":"`--inspect[=[host:]port]`","description":"Activate inspector on host:port. Default is 127.0.0.1:9229. V8 inspector integration allows tools such as Chrome DevTools and IDEs to debug and profile Node.js instances. The tools attach to Node.js instances via a tcp port and communicate using the Chrome DevTools Protocol."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_napi_modules","title":"`--napi-modules`","description":"This option is a no-op. It is kept for compatibility."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_no_deprecation","title":"`--no-deprecation`","description":"Silence deprecation warnings."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_no_force_async_hooks_checks","title":"`--no-force-async-hooks-checks`","description":"Disables runtime checks for async_hooks. These will still be enabled dynamically when async_hooks is enabled."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_no_warnings","title":"`--no-warnings`","description":"Silence all process warnings (including deprecations)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_openssl_config_file","title":"`--openssl-config=file`","description":"Load an OpenSSL configuration file on startup. Among other uses, this can be used to enable FIPS-compliant crypto if Node.js is built with .\/configure --openssl-fips."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_pending_deprecation","title":"`--pending-deprecation`","description":"Emit pending deprecation warnings. Pending deprecations are generally identical to a runtime deprecation with the notable exception that they are turned off by default and will not be emitted unless either the --pending-deprecation command line flag, or the NODE_PENDING_DEPRECATION=1 environment variable, is set. Pending deprecations are used to provide a kind of selective \"early warning\" mechanism that developers may leverage to detect deprecated API usage."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_preserve_symlinks","title":"`--preserve-symlinks`","description":"Instructs the module loader to preserve symbolic links when resolving and caching modules. By default, when Node.js loads a module from a path that is symbolically linked to a different on-disk location, Node.js will dereference the link and use the actual on-disk \"real path\" of the module as both an identifier and as a root path to locate other dependency modules. In most cases, this default behavior is acceptable. However, when using symbolically linked peer dependencies, as illustrated in the example below, the default behavior causes an exception to be thrown if moduleA attempts to require moduleB as a peer dependency: {appDir}  \u251c\u2500\u2500 app  \u2502   \u251c\u2500\u2500 index.js  \u2502   \u2514\u2500\u2500 node_modules  \u2502       \u251c\u2500\u2500 moduleA -> {appDir}\/moduleA  \u2502       \u2514\u2500\u2500 moduleB  \u2502           \u251c\u2500\u2500 index.js  \u2502           \u2514\u2500\u2500 package.json  \u2514\u2500\u2500 moduleA      \u251c\u2500\u2500 index.js      \u2514\u2500\u2500 package.json  The --preserve-symlinks command line flag instructs Node.js to use the symlink path for modules as opposed to the real path, allowing symbolically linked peer dependencies to be found. Note, however, that using --preserve-symlinks can have other side effects. Specifically, symbolically linked native modules can fail to load if those are linked from more than one location in the dependency tree (Node.js would see those as two separate modules and would attempt to load the module multiple times, causing an exception to be thrown). The --preserve-symlinks flag does not apply to the main module, which allows node --preserve-symlinks node_module\/.bin\/<foo> to work.  To apply the same behavior for the main module, also use --preserve-symlinks-main."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_preserve_symlinks_main","title":"`--preserve-symlinks-main`","description":"Instructs the module loader to preserve symbolic links when resolving and caching the main module (require.main). This flag exists so that the main module can be opted-in to the same behavior that --preserve-symlinks gives to all other imports; they are separate flags, however, for backward compatibility with older Node.js versions. Note that --preserve-symlinks-main does not imply --preserve-symlinks; it is expected that --preserve-symlinks-main will be used in addition to --preserve-symlinks when it is not desirable to follow symlinks before resolving relative paths. See --preserve-symlinks for more information."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_prof","title":"`--prof`","description":"Generate V8 profiler output."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_prof_process","title":"`--prof-process`","description":"Process V8 profiler output generated using the V8 option --prof."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_redirect_warnings_file","title":"`--redirect-warnings=file`","description":"Write process warnings to the given file instead of printing to stderr. The file will be created if it does not exist, and will be appended to if it does. If an error occurs while attempting to write the warning to the file, the warning will be written to stderr instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_throw_deprecation","title":"`--throw-deprecation`","description":"Throw errors for deprecations."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tls_cipher_list_list","title":"`--tls-cipher-list=list`","description":"Specify an alternative default TLS cipher list. Requires Node.js to be built with crypto support (default)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_trace_deprecation","title":"`--trace-deprecation`","description":"Print stack traces for deprecations."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_trace_event_categories","title":"`--trace-event-categories`","description":"A comma separated list of categories that should be traced when trace event tracing is enabled using --trace-events-enabled."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_trace_event_file_pattern","title":"`--trace-event-file-pattern`","description":"Template string specifying the filepath for the trace event data, it supports ${rotation} and ${pid}."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_trace_events_enabled","title":"`--trace-events-enabled`","description":"Enables the collection of trace event tracing information."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_trace_sync_io","title":"`--trace-sync-io`","description":"Prints a stack trace whenever synchronous I\/O is detected after the first turn of the event loop."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_trace_warnings","title":"`--trace-warnings`","description":"Print stack traces for process warnings (including deprecations)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_track_heap_objects","title":"`--track-heap-objects`","description":"Track heap object allocations for heap snapshots."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_use_bundled_ca_use_openssl_ca","title":"`--use-bundled-ca`, `--use-openssl-ca`","description":"Use bundled Mozilla CA store as supplied by current Node.js version or use OpenSSL&#39;s default CA store. The default store is selectable at build-time. The bundled CA store, as supplied by Node.js, is a snapshot of Mozilla CA store that is fixed at release time. It is identical on all supported platforms. Using OpenSSL store allows for external modifications of the store. For most Linux and BSD distributions, this store is maintained by the distribution maintainers and system administrators. OpenSSL CA store location is dependent on configuration of the OpenSSL library but this can be altered at runtime using environment variables. See SSL_CERT_DIR and SSL_CERT_FILE."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_v8_options","title":"`--v8-options`","description":"Print V8 command line options. V8 options allow words to be separated by both dashes (-) or underscores (_). For example, --stack-trace-limit is equivalent to --stack_trace_limit."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_v8_pool_size_num","title":"`--v8-pool-size=num`","description":"Set V8&#39;s thread pool size which will be used to allocate background jobs. If set to 0 then V8 will choose an appropriate size of the thread pool based on the number of online processors. If the value provided is larger than V8&#39;s maximum, then the largest value will be chosen."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zero_fill_buffers","title":"`--zero-fill-buffers`","description":"Automatically zero-fills all newly allocated Buffer and SlowBuffer instances."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_c_check","title":"`-c`, `--check`","description":"Syntax check the script without executing."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_e_eval_script","title":"`-e`, `--eval \"script\"`","description":"Evaluate the following argument as JavaScript. The modules which are predefined in the REPL can also be used in script. On Windows, using cmd.exe a single quote will not work correctly because it only recognizes double \" for quoting. In Powershell or Git bash, both &#39; and \" are usable."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_h_help","title":"`-h`, `--help`","description":"Print node command line options. The output of this option is less detailed than this document."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_i_interactive","title":"`-i`, `--interactive`","description":"Opens the REPL even if stdin does not appear to be a terminal."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_p_print_script","title":"`-p`, `--print \"script\"`","description":"Identical to -e but prints the result."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_r_require_module","title":"`-r`, `--require module`","description":"Preload the specified module at startup. Follows require()&#39;s module resolution rules. module may be either a path to a file, or a node module name."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_v_version","title":"`-v`, `--version`","description":"Print node&#39;s version."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_environment_variables","title":"Environment Variables","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_node_debug_module","title":"`NODE_DEBUG=module[,\u2026]`","description":"&#39;,&#39;-separated list of core modules that should print debug information."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_node_disable_colors_1","title":"`NODE_DISABLE_COLORS=1`","description":"When set to 1 colors will not be used in the REPL."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_node_extra_ca_certs_file","title":"`NODE_EXTRA_CA_CERTS=file`","description":"When set, the well known \"root\" CAs (like VeriSign) will be extended with the extra certificates in file. The file should consist of one or more trusted certificates in PEM format. A message will be emitted (once) with process.emitWarning() if the file is missing or malformed, but any errors are otherwise ignored. Note that neither the well known nor extra certificates are used when the ca options property is explicitly specified for a TLS or HTTPS client or server."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_node_icu_data_file","title":"`NODE_ICU_DATA=file`","description":"Data path for ICU (Intl object) data. Will extend linked-in data when compiled with small-icu support."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_node_no_warnings_1","title":"`NODE_NO_WARNINGS=1`","description":"When set to 1, process warnings are silenced."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_node_options_options","title":"`NODE_OPTIONS=options...`","description":"A space-separated list of command line options. options... are interpreted as if they had been specified on the command line before the actual command line (so they can be overridden). Node.js will exit with an error if an option that is not allowed in the environment is used, such as -p or a script file. Node options that are allowed are:  --enable-fips --experimental-modules --experimental-repl-await --experimental-vm-modules --experimental-worker --force-fips --icu-data-dir --inspect --inspect-brk --inspect-port --loader --napi-modules --no-deprecation --no-force-async-hooks-checks --no-warnings --openssl-config --pending-deprecation --redirect-warnings --require, -r --throw-deprecation --tls-cipher-list --trace-deprecation --trace-event-categories --trace-event-file-pattern --trace-events-enabled --trace-sync-io --trace-warnings --track-heap-objects --use-bundled-ca --use-openssl-ca --v8-pool-size --zero-fill-buffers  V8 options that are allowed are:  --abort-on-uncaught-exception --max-old-space-size --perf-basic-prof --perf-prof --stack-trace-limit"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_node_path_path","title":"`NODE_PATH=path[:\u2026]`","description":"&#39;:&#39;-separated list of directories prefixed to the module search path. On Windows, this is a &#39;;&#39;-separated list instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_node_pending_deprecation_1","title":"`NODE_PENDING_DEPRECATION=1`","description":"When set to 1, emit pending deprecation warnings. Pending deprecations are generally identical to a runtime deprecation with the notable exception that they are turned off by default and will not be emitted unless either the --pending-deprecation command line flag, or the NODE_PENDING_DEPRECATION=1 environment variable, is set. Pending deprecations are used to provide a kind of selective \"early warning\" mechanism that developers may leverage to detect deprecated API usage."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_node_preserve_symlinks_1","title":"`NODE_PRESERVE_SYMLINKS=1`","description":"When set to 1, instructs the module loader to preserve symbolic links when resolving and caching modules."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_node_redirect_warnings_file","title":"`NODE_REDIRECT_WARNINGS=file`","description":"When set, process warnings will be emitted to the given file instead of printing to stderr. The file will be created if it does not exist, and will be appended to if it does. If an error occurs while attempting to write the warning to the file, the warning will be written to stderr instead. This is equivalent to using the --redirect-warnings=file command-line flag."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_node_repl_history_file","title":"`NODE_REPL_HISTORY=file`","description":"Path to the file used to store the persistent REPL history. The default path is ~\/.node_repl_history, which is overridden by this variable. Setting the value to an empty string (&#39;&#39; or &#39; &#39;) disables persistent REPL history."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_openssl_conf_file","title":"`OPENSSL_CONF=file`","description":"Load an OpenSSL configuration file on startup. Among other uses, this can be used to enable FIPS-compliant crypto if Node.js is built with .\/configure --openssl-fips. If the --openssl-config command line option is used, the environment variable is ignored."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_ssl_cert_dir_dir","title":"`SSL_CERT_DIR=dir`","description":"If --use-openssl-ca is enabled, this overrides and sets OpenSSL&#39;s directory containing trusted certificates. Be aware that unless the child environment is explicitly set, this environment variable will be inherited by any child processes, and if they use OpenSSL, it may cause them to trust the same CAs as node."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_ssl_cert_file_file","title":"`SSL_CERT_FILE=file`","description":"If --use-openssl-ca is enabled, this overrides and sets OpenSSL&#39;s file containing trusted certificates. Be aware that unless the child environment is explicitly set, this environment variable will be inherited by any child processes, and if they use OpenSSL, it may cause them to trust the same CAs as node."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_uv_threadpool_size_size","title":"`UV_THREADPOOL_SIZE=size`","description":"Set the number of threads used in libuv&#39;s threadpool to size threads. Asynchronous system APIs are used by Node.js whenever possible, but where they do not exist, libuv&#39;s threadpool is used to create asynchronous node APIs based on synchronous system APIs. Node.js APIs that use the threadpool are:  all fs APIs, other than the file watcher APIs and those that are explicitly synchronous crypto.pbkdf2() crypto.randomBytes(), unless it is used without a callback crypto.randomFill() dns.lookup() all zlib APIs, other than those that are explicitly synchronous  Because libuv&#39;s threadpool has a fixed size, it means that if for whatever reason any of these APIs takes a long time, other (seemingly unrelated) APIs that run in libuv&#39;s threadpool will experience degraded performance. In order to mitigate this issue, one potential solution is to increase the size of libuv&#39;s threadpool by setting the &#39;UV_THREADPOOL_SIZE&#39; environment variable to a value greater than 4 (its current default value). For more information, see the libuv threadpool documentation."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_debugger","title":"Debugger","description":"Node.js includes an out-of-process debugging utility accessible via a V8 Inspector and built-in debugging client. To use it, start Node.js with the inspect argument followed by the path to the script to debug; a prompt will be displayed indicating successful launch of the debugger: $ node inspect myscript.js < Debugger listening on ws:\/\/127.0.0.1:9229\/80e7a814-7cd3-49fb-921a-2e02228cd5ba < For help, see: https:\/\/nodejs.org\/en\/docs\/inspector < Debugger attached. Break on start in myscript.js:1 > 1 (function (exports, require, module, __filename, __dirname) { global.x = 5;   2 setTimeout(() => {   3   console.log(&#39;world&#39;); debug>  Node.js&#39;s debugger client is not a full-featured debugger, but simple step and inspection are possible. Inserting the statement debugger; into the source code of a script will enable a breakpoint at that position in the code:  \/\/ myscript.js global.x = 5; setTimeout(() => {   debugger;   console.log(&#39;world&#39;); }, 1000); console.log(&#39;hello&#39;);  Once the debugger is run, a breakpoint will occur at line 3: $ node inspect myscript.js < Debugger listening on ws:\/\/127.0.0.1:9229\/80e7a814-7cd3-49fb-921a-2e02228cd5ba < For help, see: https:\/\/nodejs.org\/en\/docs\/inspector < Debugger attached. Break on start in myscript.js:1 > 1 (function (exports, require, module, __filename, __dirname) { global.x = 5;   2 setTimeout(() => {   3   debugger; debug> cont < hello break in myscript.js:3   1 (function (exports, require, module, __filename, __dirname) { global.x = 5;   2 setTimeout(() => { > 3   debugger;   4   console.log(&#39;world&#39;);   5 }, 1000); debug> next break in myscript.js:4   2 setTimeout(() => {   3   debugger; > 4   console.log(&#39;world&#39;);   5 }, 1000);   6 console.log(&#39;hello&#39;); debug> repl Press Ctrl + C to leave debug repl > x 5 > 2 + 2 4 debug> next < world break in myscript.js:5   3   debugger;   4   console.log(&#39;world&#39;); > 5 }, 1000);   6 console.log(&#39;hello&#39;);   7 debug> .exit  The repl command allows code to be evaluated remotely. The next command steps to the next line. Type help to see what other commands are available. Pressing enter without typing a command will repeat the previous debugger command."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_watchers","title":"Watchers","description":"It is possible to watch expression and variable values while debugging. On every breakpoint, each expression from the watchers list will be evaluated in the current context and displayed immediately before the breakpoint&#39;s source code listing. To begin watching an expression, type watch(&#39;my_expression&#39;). The command watchers will print the active watchers. To remove a watcher, type unwatch(&#39;my_expression&#39;)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_command_reference","title":"Command reference","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_stepping","title":"Stepping","description":"cont, c - Continue execution next, n - Step next step, s - Step in out, o - Step out pause - Pause running code (like pause button in Developer Tools)"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_breakpoints","title":"Breakpoints","description":"setBreakpoint(), sb() - Set breakpoint on current line setBreakpoint(line), sb(line) - Set breakpoint on specific line setBreakpoint(&#39;fn()&#39;), sb(...) - Set breakpoint on a first statement in functions body setBreakpoint(&#39;script.js&#39;, 1), sb(...) - Set breakpoint on first line of script.js clearBreakpoint(&#39;script.js&#39;, 1), cb(...) - Clear breakpoint in script.js on line 1  It is also possible to set a breakpoint in a file (module) that is not loaded yet: $ node inspect main.js < Debugger listening on ws:\/\/127.0.0.1:9229\/4e3db158-9791-4274-8909-914f7facf3bd < For help, see: https:\/\/nodejs.org\/en\/docs\/inspector < Debugger attached. Break on start in main.js:1 > 1 (function (exports, require, module, __filename, __dirname) { const mod = require(&#39;.\/mod.js&#39;);   2 mod.hello();   3 mod.hello(); debug> setBreakpoint(&#39;mod.js&#39;, 22) Warning: script &#39;mod.js&#39; was not loaded yet. debug> c break in mod.js:22  20 \/\/ USE OR OTHER DEALINGS IN THE SOFTWARE.  21 >22 exports.hello = function() {  23   return &#39;hello from module&#39;;  24 }; debug>"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_execution_control","title":"Execution control","description":"run - Run script (automatically runs on debugger&#39;s start) restart - Restart script kill - Kill script"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_various","title":"Various","description":"scripts - List all loaded scripts version - Display V8&#39;s version"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_advanced_usage","title":"Advanced Usage","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_v8_inspector_integration_for_node_js","title":"V8 Inspector Integration for Node.js","description":"V8 Inspector integration allows attaching Chrome DevTools to Node.js instances for debugging and profiling. It uses the Chrome DevTools Protocol. V8 Inspector can be enabled by passing the --inspect flag when starting a Node.js application. It is also possible to supply a custom port with that flag, e.g. --inspect=9222 will accept DevTools connections on port 9222. To break on the first line of the application code, pass the --inspect-brk flag instead of --inspect. $ node --inspect index.js Debugger listening on 127.0.0.1:9229. To start debugging, open the following URL in Chrome:     chrome-devtools:\/\/devtools\/bundled\/js_app.html?experiments=true&v8only=true&ws=127.0.0.1:9229\/dc9010dd-f8b8-4ac5-a510-c1a114ec7d29  (In the example above, the UUID dc9010dd-f8b8-4ac5-a510-c1a114ec7d29 at the end of the URL is generated on the fly, it varies in different debugging sessions.) If the Chrome browser is older than 66.0.3345.0, use inspector.html instead of js_app.html in the above URL."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_deprecated_apis","title":"Deprecated APIs","description":"Node.js may deprecate APIs when either: (a) use of the API is considered to be unsafe, (b) an improved alternative API is available, or (c) breaking changes to the API are expected in a future major release. Node.js utilizes three kinds of Deprecations:  Documentation-only Runtime End-of-Life  A Documentation-only deprecation is one that is expressed only within the Node.js API docs. These generate no side-effects while running Node.js. Some Documentation-only deprecations trigger a runtime warning when launched with --pending-deprecation flag (or its alternative, NODE_PENDING_DEPRECATION=1 environment variable), similarly to Runtime deprecations below. Documentation-only deprecations that support that flag are explicitly labeled as such in the list of Deprecated APIs. A Runtime deprecation will, by default, generate a process warning that will be printed to stderr the first time the deprecated API is used. When the --throw-deprecation command-line flag is used, a Runtime deprecation will cause an error to be thrown. An End-of-Life deprecation is used when functionality is or will soon be removed from Node.js."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_revoking_deprecations","title":"Revoking deprecations","description":"Occasionally, the deprecation of an API may be reversed. In such situations, this document will be updated with information relevant to the decision. However, the deprecation identifier will not be modified."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_list_of_deprecated_apis","title":"List of Deprecated APIs","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0001_http_outgoingmessage_prototype_flush","title":"DEP0001: http.OutgoingMessage.prototype.flush","description":"Type: Runtime The OutgoingMessage.prototype.flush() method is deprecated. Use OutgoingMessage.prototype.flushHeaders() instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0002_require_linklist","title":"DEP0002: require('\\_linklist')","description":"Type: End-of-Life The _linklist module is deprecated. Please use a userland alternative."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0003_writablestate_buffer","title":"DEP0003: \\_writableState.buffer","description":"Type: Runtime The _writableState.buffer property is deprecated. Use the _writableState.getBuffer() method instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0004_cryptostream_prototype_readystate","title":"DEP0004: CryptoStream.prototype.readyState","description":"Type: Documentation-only The CryptoStream.prototype.readyState property is deprecated and should not be used."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0005_buffer_constructor","title":"DEP0005: Buffer() constructor","description":"Type: Runtime (supports --pending-deprecation) The Buffer() function and new Buffer() constructor are deprecated due to API usability issues that can potentially lead to accidental security issues. As an alternative, use of the following methods of constructing Buffer objects is strongly recommended:  Buffer.alloc(size[, fill[, encoding]]) - Create a Buffer with initialized memory. Buffer.allocUnsafe(size) - Create a Buffer with uninitialized memory. Buffer.allocUnsafeSlow(size) - Create a Buffer with uninitialized  memory. Buffer.from(array) - Create a Buffer with a copy of array Buffer.from(arrayBuffer[, byteOffset[, length]]) - Create a Buffer that wraps the given arrayBuffer. Buffer.from(buffer) - Create a Buffer that copies buffer. Buffer.from(string[, encoding]) - Create a Buffer that copies string.  As of v10.0.0, a deprecation warning is printed at runtime when --pending-deprecation is used or when the calling code is outside node_modules in order to better target developers, rather than users."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0006_child_process_options_customfds","title":"DEP0006: child\\_process options.customFds","description":"Type: Runtime Within the child_process module&#39;s spawn(), fork(), and exec() methods, the options.customFds option is deprecated. The options.stdio option should be used instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0007_replace_cluster_worker_suicide_with_worker_exitedafterdisconnect","title":"DEP0007: Replace cluster worker.suicide with worker.exitedAfterDisconnect","description":"Type: End-of-Life In an earlier version of the Node.js cluster, a boolean property with the name suicide was added to the Worker object. The intent of this property was to provide an indication of how and why the Worker instance exited. In Node.js 6.0.0, the old property was deprecated and replaced with a new worker.exitedAfterDisconnect property. The old property name did not precisely describe the actual semantics and was unnecessarily emotion-laden."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0008_require_constants","title":"DEP0008: require('constants')","description":"Type: Documentation-only The constants module is deprecated. When requiring access to constants relevant to specific Node.js builtin modules, developers should instead refer to the constants property exposed by the relevant module. For instance, require(&#39;fs&#39;).constants and require(&#39;os&#39;).constants."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0009_crypto_pbkdf2_without_digest","title":"DEP0009: crypto.pbkdf2 without digest","description":"Type: End-of-Life Use of the crypto.pbkdf2() API without specifying a digest was deprecated in Node.js 6.0 because the method defaulted to using the non-recommended &#39;SHA1&#39; digest. Previously, a deprecation warning was printed. Starting in Node.js 8.0.0, calling crypto.pbkdf2() or crypto.pbkdf2Sync() with an undefined digest will throw a TypeError."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0010_crypto_createcredentials","title":"DEP0010: crypto.createCredentials","description":"Type: Runtime The crypto.createCredentials() API is deprecated. Please use tls.createSecureContext() instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0011_crypto_credentials","title":"DEP0011: crypto.Credentials","description":"Type: Runtime The crypto.Credentials class is deprecated. Please use tls.SecureContext instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0012_domain_dispose","title":"DEP0012: Domain.dispose","description":"Type: End-of-Life Domain.dispose() has been removed. Recover from failed I\/O actions explicitly via error event handlers set on the domain instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0013_fs_asynchronous_function_without_callback","title":"DEP0013: fs asynchronous function without callback","description":"Type: End-of-Life Calling an asynchronous function without a callback throws a TypeError in Node.js 10.0.0 onwards. (See https:\/\/github.com\/nodejs\/node\/pull\/12562.)"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0014_fs_read_legacy_string_interface","title":"DEP0014: fs.read legacy String interface","description":"Type: End-of-Life The fs.read() legacy String interface is deprecated. Use the Buffer API as mentioned in the documentation instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0015_fs_readsync_legacy_string_interface","title":"DEP0015: fs.readSync legacy String interface","description":"Type: End-of-Life The fs.readSync() legacy String interface is deprecated. Use the Buffer API as mentioned in the documentation instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0016_global_root","title":"DEP0016: GLOBAL\/root","description":"Type: Runtime The GLOBAL and root aliases for the global property are deprecated and should no longer be used."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0017_intl_v8breakiterator","title":"DEP0017: Intl.v8BreakIterator","description":"Type: End-of-Life Intl.v8BreakIterator was a non-standard extension and has been removed. See Intl.Segmenter."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0018_unhandled_promise_rejections","title":"DEP0018: Unhandled promise rejections","description":"Type: Runtime Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0019_require_resolved_outside_directory","title":"DEP0019: require('.') resolved outside directory","description":"Type: Runtime In certain cases, require(&#39;.&#39;) may resolve outside the package directory. This behavior is deprecated and will be removed in a future major Node.js release."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0020_server_connections","title":"DEP0020: Server.connections","description":"Type: Runtime The Server.connections property is deprecated. Please use the Server.getConnections() method instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0021_server_listenfd","title":"DEP0021: Server.listenFD","description":"Type: Runtime The Server.listenFD() method is deprecated. Please use Server.listen({fd: <number>}) instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0022_os_tmpdir","title":"DEP0022: os.tmpDir()","description":"Type: Runtime The os.tmpDir() API is deprecated. Please use os.tmpdir() instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0023_os_getnetworkinterfaces","title":"DEP0023: os.getNetworkInterfaces()","description":"Type: Runtime The os.getNetworkInterfaces() method is deprecated. Please use the os.networkInterfaces property instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0024_replserver_prototype_converttocontext","title":"DEP0024: REPLServer.prototype.convertToContext()","description":"Type: End-of-Life The REPLServer.prototype.convertToContext() API is deprecated and should not be used."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0025_require_sys","title":"DEP0025: require('sys')","description":"Type: Runtime The sys module is deprecated. Please use the util module instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0026_util_print","title":"DEP0026: util.print()","description":"Type: Runtime The util.print() API is deprecated. Please use console.log() instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0027_util_puts","title":"DEP0027: util.puts()","description":"Type: Runtime The util.puts() API is deprecated. Please use console.log() instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0028_util_debug","title":"DEP0028: util.debug()","description":"Type: Runtime The util.debug() API is deprecated. Please use console.error() instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0029_util_error","title":"DEP0029: util.error()","description":"Type: Runtime The util.error() API is deprecated. Please use console.error() instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0030_slowbuffer","title":"DEP0030: SlowBuffer","description":"Type: Documentation-only The SlowBuffer class is deprecated. Please use Buffer.allocUnsafeSlow(size) instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0031_ecdh_setpublickey","title":"DEP0031: ecdh.setPublicKey()","description":"Type: Documentation-only The ecdh.setPublicKey() method is now deprecated as its inclusion in the API is not useful."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0032_domain_module","title":"DEP0032: domain module","description":"Type: Documentation-only The domain module is deprecated and should not be used."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0033_eventemitter_listenercount","title":"DEP0033: EventEmitter.listenerCount()","description":"Type: Documentation-only The EventEmitter.listenerCount(emitter, eventName) API is deprecated. Please use emitter.listenerCount(eventName) instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0034_fs_exists_path_callback","title":"DEP0034: fs.exists(path, callback)","description":"Type: Documentation-only The fs.exists(path, callback) API is deprecated. Please use fs.stat() or fs.access() instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0035_fs_lchmod_path_mode_callback","title":"DEP0035: fs.lchmod(path, mode, callback)","description":"Type: Documentation-only The fs.lchmod(path, mode, callback) API is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0036_fs_lchmodsync_path_mode","title":"DEP0036: fs.lchmodSync(path, mode)","description":"Type: Documentation-only The fs.lchmodSync(path, mode) API is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0039_require_extensions","title":"DEP0039: require.extensions","description":"Type: Documentation-only The require.extensions property is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0040_punycode_module","title":"DEP0040: punycode module","description":"Type: Documentation-only The punycode module is deprecated. Please use a userland alternative instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0041_node_repl_history_file_environment_variable","title":"DEP0041: NODE\\_REPL\\_HISTORY\\_FILE environment variable","description":"Type: End-of-Life The NODE_REPL_HISTORY_FILE environment variable was removed. Please use NODE_REPL_HISTORY instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0042_tls_cryptostream","title":"DEP0042: tls.CryptoStream","description":"Type: Documentation-only The tls.CryptoStream class is deprecated. Please use tls.TLSSocket instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0043_tls_securepair","title":"DEP0043: tls.SecurePair","description":"Type: Documentation-only The tls.SecurePair class is deprecated. Please use tls.TLSSocket instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0044_util_isarray","title":"DEP0044: util.isArray()","description":"Type: Documentation-only The util.isArray() API is deprecated. Please use Array.isArray() instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0045_util_isboolean","title":"DEP0045: util.isBoolean()","description":"Type: Documentation-only The util.isBoolean() API is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0046_util_isbuffer","title":"DEP0046: util.isBuffer()","description":"Type: Documentation-only The util.isBuffer() API is deprecated. Please use Buffer.isBuffer() instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0047_util_isdate","title":"DEP0047: util.isDate()","description":"Type: Documentation-only The util.isDate() API is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0048_util_iserror","title":"DEP0048: util.isError()","description":"Type: Documentation-only The util.isError() API is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0049_util_isfunction","title":"DEP0049: util.isFunction()","description":"Type: Documentation-only The util.isFunction() API is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0050_util_isnull","title":"DEP0050: util.isNull()","description":"Type: Documentation-only The util.isNull() API is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0051_util_isnullorundefined","title":"DEP0051: util.isNullOrUndefined()","description":"Type: Documentation-only The util.isNullOrUndefined() API is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0052_util_isnumber","title":"DEP0052: util.isNumber()","description":"Type: Documentation-only The util.isNumber() API is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0053_util_isobject","title":"DEP0053 util.isObject()","description":"Type: Documentation-only The util.isObject() API is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0054_util_isprimitive","title":"DEP0054: util.isPrimitive()","description":"Type: Documentation-only The util.isPrimitive() API is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0055_util_isregexp","title":"DEP0055: util.isRegExp()","description":"Type: Documentation-only The util.isRegExp() API is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0056_util_isstring","title":"DEP0056: util.isString()","description":"Type: Documentation-only The util.isString() API is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0057_util_issymbol","title":"DEP0057: util.isSymbol()","description":"Type: Documentation-only The util.isSymbol() API is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0058_util_isundefined","title":"DEP0058: util.isUndefined()","description":"Type: Documentation-only The util.isUndefined() API is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0059_util_log","title":"DEP0059: util.log()","description":"Type: Documentation-only The util.log() API is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0060_util_extend","title":"DEP0060: util.\\_extend()","description":"Type: Documentation-only The util._extend() API is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0061_fs_syncwritestream","title":"DEP0061: fs.SyncWriteStream","description":"Type: Runtime The fs.SyncWriteStream class was never intended to be a publicly accessible API. No alternative API is available. Please use a userland alternative."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0062_node_debug","title":"DEP0062: node --debug","description":"Type: Runtime --debug activates the legacy V8 debugger interface, which was removed as of V8 5.8. It is replaced by Inspector which is activated with --inspect instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0063_serverresponse_prototype_writeheader","title":"DEP0063: ServerResponse.prototype.writeHeader()","description":"Type: Documentation-only The http module ServerResponse.prototype.writeHeader() API is deprecated. Please use ServerResponse.prototype.writeHead() instead. The ServerResponse.prototype.writeHeader() method was never documented as an officially supported API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0064_tls_createsecurepair","title":"DEP0064: tls.createSecurePair()","description":"Type: Runtime The tls.createSecurePair() API was deprecated in documentation in Node.js 0.11.3. Users should use tls.Socket instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0065_repl_repl_mode_magic_and_node_repl_mode_magic","title":"DEP0065: repl.REPL_MODE_MAGIC and NODE_REPL_MODE=magic","description":"Type: End-of-Life The repl module&#39;s REPL_MODE_MAGIC constant, used for replMode option, has been removed. Its behavior has been functionally identical to that of REPL_MODE_SLOPPY since Node.js 6.0.0, when V8 5.0 was imported. Please use REPL_MODE_SLOPPY instead. The NODE_REPL_MODE environment variable is used to set the underlying replMode of an interactive node session. Its value, magic, is also removed. Please use sloppy instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0066_outgoingmessage_headers_outgoingmessage_headernames","title":"DEP0066: outgoingMessage.\\_headers, outgoingMessage.\\_headerNames","description":"Type: Documentation-only The http module outgoingMessage._headers and outgoingMessage._headerNames properties are deprecated. Use one of the public methods (e.g. outgoingMessage.getHeader(), outgoingMessage.getHeaders(), outgoingMessage.getHeaderNames(), outgoingMessage.hasHeader(), outgoingMessage.removeHeader(), outgoingMessage.setHeader()) for working with outgoing headers. The outgoingMessage._headers and outgoingMessage._headerNames properties were never documented as officially supported properties."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0067_outgoingmessage_prototype_renderheaders","title":"DEP0067: OutgoingMessage.prototype.\\_renderHeaders","description":"Type: Documentation-only The http module OutgoingMessage.prototype._renderHeaders() API is deprecated. The OutgoingMessage.prototype._renderHeaders property was never documented as an officially supported API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0068_node_debug","title":"DEP0068: node debug","description":"Type: Runtime node debug corresponds to the legacy CLI debugger which has been replaced with a V8-inspector based CLI debugger available through node inspect."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0069_vm_runindebugcontext_string","title":"DEP0069: vm.runInDebugContext(string)","description":"Type: End-of-Life DebugContext has been removed in V8 and is not available in Node.js 10+. DebugContext was an experimental API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0070_async_hooks_currentid","title":"DEP0070: async_hooks.currentId()","description":"Type: End-of-Life async_hooks.currentId() was renamed to async_hooks.executionAsyncId() for clarity. This change was made while async_hooks was an experimental API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0071_async_hooks_triggerid","title":"DEP0071: async_hooks.triggerId()","description":"Type: End-of-Life async_hooks.triggerId() was renamed to async_hooks.triggerAsyncId() for clarity. This change was made while async_hooks was an experimental API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0072_async_hooks_asyncresource_triggerid","title":"DEP0072: async_hooks.AsyncResource.triggerId()","description":"Type: End-of-Life async_hooks.AsyncResource.triggerId() was renamed to async_hooks.AsyncResource.triggerAsyncId() for clarity. This change was made while async_hooks was an experimental API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0073_several_internal_properties_of_net_server","title":"DEP0073: Several internal properties of net.Server","description":"Type: End-of-Life Accessing several internal, undocumented properties of net.Server instances with inappropriate names is deprecated. As the original API was undocumented and not generally useful for non-internal code, no replacement API is provided."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0074_replserver_bufferedcommand","title":"DEP0074: REPLServer.bufferedCommand","description":"Type: Runtime The REPLServer.bufferedCommand property was deprecated in favor of REPLServer.clearBufferedCommand()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0075_replserver_parsereplkeyword","title":"DEP0075: REPLServer.parseREPLKeyword()","description":"Type: Runtime REPLServer.parseREPLKeyword() was removed from userland visibility."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0076_tls_parsecertstring","title":"DEP0076: tls.parseCertString()","description":"Type: Runtime tls.parseCertString() is a trivial parsing helper that was made public by mistake. This function can usually be replaced with: const querystring = require(&#39;querystring&#39;); querystring.parse(str, &#39;\\n&#39;, &#39;=&#39;);  This function is not completely equivalent to querystring.parse(). One difference is that querystring.parse() does url decoding: > querystring.parse(&#39;%E5%A5%BD=1&#39;, &#39;\\n&#39;, &#39;=&#39;); { &#39;\u597d&#39;: &#39;1&#39; } > tls.parseCertString(&#39;%E5%A5%BD=1&#39;); { &#39;%E5%A5%BD&#39;: &#39;1&#39; }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0077_module_debug","title":"DEP0077: Module.\\_debug()","description":"Type: Runtime Module._debug() is deprecated. The Module._debug() function was never documented as an officially supported API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0078_replserver_turnoffeditormode","title":"DEP0078: REPLServer.turnOffEditorMode()","description":"Type: Runtime REPLServer.turnOffEditorMode() was removed from userland visibility."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0079_custom_inspection_function_on_objects_via_inspect","title":"DEP0079: Custom inspection function on Objects via .inspect()","description":"Type: Runtime Using a property named inspect on an object to specify a custom inspection function for util.inspect() is deprecated. Use util.inspect.custom instead. For backward compatibility with Node.js prior to version 6.4.0, both may be specified."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0080_path_makelong","title":"DEP0080: path.\\_makeLong()","description":"Type: Documentation-only The internal path._makeLong() was not intended for public use. However, userland modules have found it useful. The internal API is deprecated and replaced with an identical, public path.toNamespacedPath() method."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0081_fs_truncate_using_a_file_descriptor","title":"DEP0081: fs.truncate() using a file descriptor","description":"Type: Runtime fs.truncate() fs.truncateSync() usage with a file descriptor is deprecated. Please use fs.ftruncate() or fs.ftruncateSync() to work with file descriptors."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0082_replserver_prototype_memory","title":"DEP0082: REPLServer.prototype.memory()","description":"Type: Runtime REPLServer.prototype.memory() is only necessary for the internal mechanics of the REPLServer itself. Do not use this function."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0083_disabling_ecdh_by_setting_ecdhcurve_to_false","title":"DEP0083: Disabling ECDH by setting ecdhCurve to false","description":"Type: Runtime The ecdhCurve option to tls.createSecureContext() and tls.TLSSocket could be set to false to disable ECDH entirely on the server only. This mode is deprecated in preparation for migrating to OpenSSL 1.1.0 and consistency with the client. Use the ciphers parameter instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0084_requiring_bundled_internal_dependencies","title":"DEP0084: requiring bundled internal dependencies","description":"Type: Runtime Since Node.js versions 4.4.0 and 5.2.0, several modules only intended for internal usage are mistakenly exposed to user code through require(). These modules are:  v8\/tools\/codemap v8\/tools\/consarray v8\/tools\/csvparser v8\/tools\/logreader v8\/tools\/profile_view v8\/tools\/profile v8\/tools\/SourceMap v8\/tools\/splaytree v8\/tools\/tickprocessor-driver v8\/tools\/tickprocessor node-inspect\/lib\/_inspect (from 7.6.0) node-inspect\/lib\/internal\/inspect_client (from 7.6.0) node-inspect\/lib\/internal\/inspect_repl (from 7.6.0)  The v8\/* modules do not have any exports, and if not imported in a specific order would in fact throw errors. As such there are virtually no legitimate use cases for importing them through require(). On the other hand, node-inspect may be installed locally through a package manager, as it is published on the npm registry under the same name. No source code modification is necessary if that is done."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0085_asynchooks_sensitive_api","title":"DEP0085: AsyncHooks Sensitive API","description":"Type: End-of-Life The AsyncHooks Sensitive API was never documented and had various minor issues. (See https:\/\/github.com\/nodejs\/node\/issues\/15572.) Use the AsyncResource API instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0086_remove_runinasyncidscope","title":"DEP0086: Remove runInAsyncIdScope","description":"Type: End-of-Life runInAsyncIdScope doesn&#39;t emit the &#39;before&#39; or &#39;after&#39; event and can thus cause a lot of issues. See https:\/\/github.com\/nodejs\/node\/issues\/14328 for more details."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0089_require_assert","title":"DEP0089: require('assert')","description":"Type: Documentation-only Importing assert directly is not recommended as the exposed functions will use loose equality checks. Use require(&#39;assert&#39;).strict instead. The API is the same as the legacy assert but it will always use strict equality checks."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0090_invalid_gcm_authentication_tag_lengths","title":"DEP0090: Invalid GCM authentication tag lengths","description":"Type: Runtime Node.js supports all GCM authentication tag lengths which are accepted by OpenSSL when calling decipher.setAuthTag(). This behavior will change in a future version at which point only authentication tag lengths of 128, 120, 112, 104, 96, 64, and 32 bits will be allowed. Authentication tags whose length is not included in this list will be considered invalid in compliance with NIST SP 800-38D."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0091_crypto_default_encoding","title":"DEP0091: crypto.DEFAULT_ENCODING","description":"Type: Runtime The crypto.DEFAULT_ENCODING property is deprecated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0092_top_level_this_bound_to_module_exports","title":"DEP0092: Top-level `this` bound to `module.exports`","description":"Type: Documentation-only Assigning properties to the top-level this as an alternative to module.exports is deprecated. Developers should use exports or module.exports instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0093_crypto_fips_is_deprecated_and_replaced","title":"DEP0093: crypto.fips is deprecated and replaced.","description":"Type: Documentation-only The crypto.fips property is deprecated. Please use crypto.setFips() and crypto.getFips() instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0094_using_assert_fail_with_more_than_one_argument","title":"DEP0094: Using `assert.fail()` with more than one argument.","description":"Type: Runtime Using assert.fail() with more than one argument is deprecated. Use assert.fail() with only one argument or use a different assert module method."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0095_timers_enroll","title":"DEP0095: timers.enroll()","description":"Type: Runtime timers.enroll() is deprecated. Please use the publicly documented setTimeout() or setInterval() instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0096_timers_unenroll","title":"DEP0096: timers.unenroll()","description":"Type: Runtime timers.unenroll() is deprecated. Please use the publicly documented clearTimeout() or clearInterval() instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0097_makecallback_with_domain_property","title":"DEP0097: MakeCallback with domain property","description":"Type: Runtime Users of MakeCallback that add the domain property to carry context, should start using the async_context variant of MakeCallback or CallbackScope, or the high-level AsyncResource class."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0098_asynchooks_embedder_asyncresource_emitbefore_and_asyncresource_emitafter_apis","title":"DEP0098: AsyncHooks Embedder AsyncResource.emitBefore and AsyncResource.emitAfter APIs","description":"Type: Runtime The embedded API provided by AsyncHooks exposes .emitBefore() and .emitAfter() methods which are very easy to use incorrectly which can lead to unrecoverable errors. Use asyncResource.runInAsyncScope() API instead which provides a much safer, and more convenient, alternative. See https:\/\/github.com\/nodejs\/node\/pull\/18513 for more details."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0099_async_context_unaware_node_makecallback_c_apis","title":"DEP0099: async context-unaware node::MakeCallback C++ APIs","description":"Type: Compile-time Certain versions of node::MakeCallback APIs available to native modules are deprecated. Please use the versions of the API that accept an async_context parameter."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0100_process_assert","title":"DEP0100: process.assert()","description":"Type: Runtime process.assert() is deprecated. Please use the assert module instead. This was never a documented feature."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0101_with_lttng","title":"DEP0101: --with-lttng","description":"Type: End-of-Life The --with-lttng compile-time option has been removed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0102_using_noassert_in_buffer_read_write_operations","title":"DEP0102: Using `noAssert` in Buffer#(read|write) operations.","description":"Type: End-of-Life Using the noAssert argument has no functionality anymore. All input is going to be verified, no matter if it is set to true or not. Skipping the verification could lead to hard to find errors and crashes."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0103_process_binding_util_is_typechecks","title":"DEP0103: process.binding('util').is[...] typechecks","description":"Type: Documentation-only (supports --pending-deprecation) Using process.binding() in general should be avoided. The type checking methods in particular can be replaced by using util.types."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0104_process_env_string_coercion","title":"DEP0104: process.env string coercion","description":"Type: Documentation-only (supports --pending-deprecation) When assigning a non-string property to process.env, the assigned value is implicitly converted to a string. This behavior is deprecated if the assigned value is not a string, boolean, or number. In the future, such assignment may result in a thrown error. Please convert the property to a string before assigning it to process.env."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0105_decipher_finaltol","title":"DEP0105: decipher.finaltol","description":"Type: Runtime decipher.finaltol() has never been documented and is currently an alias for decipher.final(). In the future, this API will likely be removed, and it is recommended to use decipher.final() instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0106_crypto_createcipher_and_crypto_createdecipher","title":"DEP0106: crypto.createCipher and crypto.createDecipher","description":"Type: Documentation-only Using crypto.createCipher() and crypto.createDecipher() should be avoided as they use a weak key derivation function (MD5 with no salt) and static initialization vectors. It is recommended to derive a key using crypto.pbkdf2() and to use crypto.createCipheriv() and crypto.createDecipheriv() to obtain the Cipher and Decipher objects respectively."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0107_tls_convertnpnprotocols","title":"DEP0107: tls.convertNPNProtocols()","description":"Type: Runtime This was an undocumented helper function not intended for use outside Node.js core and obsoleted by the removal of NPN (Next Protocol Negotiation) support."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0108_zlib_bytesread","title":"DEP0108: zlib.bytesRead","description":"Type: Documentation-only Deprecated alias for zlib.bytesWritten. This original name was chosen because it also made sense to interpret the value as the number of bytes read by the engine, but is inconsistent with other streams in Node.js that expose values under these names."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dep0110_vm_script_cached_data","title":"DEP0110: vm.Script cached data","description":"Type: Documentation-only The option produceCachedData has been deprecated. Use script.createCachedData() instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_ecmascript_modules","title":"ECMAScript Modules","description":"Node.js contains support for ES Modules based upon the Node.js EP for ES Modules. Not all features of the EP are complete and will be landing as both VM support and implementation is ready. Error messages are still being polished."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_enabling","title":"Enabling","description":"The --experimental-modules flag can be used to enable features for loading ESM modules. Once this has been set, files ending with .mjs will be able to be loaded as ES Modules. node --experimental-modules my-app.mjs"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_features","title":"Features","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_supported","title":"Supported","description":"Only the CLI argument for the main entry point to the program can be an entry point into an ESM graph. Dynamic import can also be used to create entry points into ESM graphs at runtime."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_unsupported","title":"Unsupported","description":"Feature Reason     require(&#39;.\/foo.mjs&#39;) ES Modules have differing resolution and timing, use dynamic import"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_notable_differences_between_import_and_require","title":"Notable differences between `import` and `require`","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_no_node_path","title":"No NODE_PATH","description":"NODE_PATH is not part of resolving import specifiers. Please use symlinks if this behavior is desired."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_no_require_extensions","title":"No `require.extensions`","description":"require.extensions is not used by import. The expectation is that loader hooks can provide this workflow in the future."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_no_require_cache","title":"No `require.cache`","description":"require.cache is not used by import. It has a separate cache."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_url_based_paths","title":"URL based paths","description":"ESM are resolved and cached based upon URL semantics. This means that files containing special characters such as # and ? need to be escaped. Modules will be loaded multiple times if the import specifier used to resolve them have a different query or fragment. import &#39;.\/foo?query=1&#39;; \/\/ loads .\/foo with query of \"?query=1\" import &#39;.\/foo?query=2&#39;; \/\/ loads .\/foo with query of \"?query=2\"  For now, only modules using the file: protocol can be loaded."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_interop_with_existing_modules","title":"Interop with existing modules","description":"All CommonJS, JSON, and C++ modules can be used with import. Modules loaded this way will only be loaded once, even if their query or fragment string differs between import statements. When loaded via import these modules will provide a single default export representing the value of module.exports at the time they finished evaluating. \/\/ foo.js module.exports = { one: 1 };  \/\/ bar.js import foo from &#39;.\/foo.js&#39;; foo.one === 1; \/\/ true  Builtin modules will provide named exports of their public API, as well as a default export which can be used for, among other things, modifying the named exports. Named exports of builtin modules are updated when the corresponding exports property is accessed, redefined, or deleted. import EventEmitter from &#39;events&#39;; const e = new EventEmitter();  import { readFile } from &#39;fs&#39;; readFile(&#39;.\/foo.txt&#39;, (err, source) => {   if (err) {     console.error(err);   } else {     console.log(source);   } });  import fs, { readFileSync } from &#39;fs&#39;;  fs.readFileSync = () => Buffer.from(&#39;Hello, ESM&#39;);  fs.readFileSync === readFileSync;"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_loader_hooks","title":"Loader hooks","description":"To customize the default module resolution, loader hooks can optionally be provided via a --loader .\/loader-name.mjs argument to Node.js. When hooks are used they only apply to ES module loading and not to any CommonJS modules loaded."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_resolve_hook","title":"Resolve hook","description":"The resolve hook returns the resolved file URL and module format for a given module specifier and parent file URL: const baseURL = new URL(&#39;file:\/\/&#39;); baseURL.pathname = `${process.cwd()}\/`;  export async function resolve(specifier,                               parentModuleURL = baseURL,                               defaultResolver) {   return {     url: new URL(specifier, parentModuleURL).href,     format: &#39;esm&#39;   }; }  The parentModuleURL is provided as undefined when performing main Node.js load itself. The default Node.js ES module resolution function is provided as a third argument to the resolver for easy compatibility workflows. In addition to returning the resolved file URL value, the resolve hook also returns a format property specifying the module format of the resolved module. This can be one of the following:    format Description     &#39;esm&#39; Load a standard JavaScript module   &#39;cjs&#39; Load a node-style CommonJS module   &#39;builtin&#39; Load a node builtin CommonJS module   &#39;json&#39; Load a JSON file   &#39;addon&#39; Load a C++ Addon   &#39;dynamic&#39; Use a dynamic instantiate hook    For example, a dummy loader to load JavaScript restricted to browser resolution rules with only JS file extension and Node.js builtin modules support could be written: import path from &#39;path&#39;; import process from &#39;process&#39;; import Module from &#39;module&#39;;  const builtins = Module.builtinModules; const JS_EXTENSIONS = new Set([&#39;.js&#39;, &#39;.mjs&#39;]);  const baseURL = new URL(&#39;file:\/\/&#39;); baseURL.pathname = `${process.cwd()}\/`;  export function resolve(specifier, parentModuleURL = baseURL, defaultResolve) {   if (builtins.includes(specifier)) {     return {       url: specifier,       format: &#39;builtin&#39;     };   }   if (\/^\\.{0,2}[\/]\/.test(specifier) !== true && !specifier.startsWith(&#39;file:&#39;)) {     \/\/ For node_modules support:     \/\/ return defaultResolve(specifier, parentModuleURL);     throw new Error(       `imports must begin with &#39;\/&#39;, &#39;.\/&#39;, or &#39;..\/&#39;; &#39;${specifier}&#39; does not`);   }   const resolved = new URL(specifier, parentModuleURL);   const ext = path.extname(resolved.pathname);   if (!JS_EXTENSIONS.has(ext)) {     throw new Error(       `Cannot load file with non-JavaScript file extension ${ext}.`);   }   return {     url: resolved.href,     format: &#39;esm&#39;   }; }  With this loader, running: NODE_OPTIONS=&#39;--experimental-modules --loader .\/custom-loader.mjs&#39; node x.js  would load the module x.js as an ES module with relative resolution support (with node_modules loading skipped in this example)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dynamic_instantiate_hook","title":"Dynamic instantiate hook","description":"To create a custom dynamic module that doesn&#39;t correspond to one of the existing format interpretations, the dynamicInstantiate hook can be used. This hook is called only for modules that return format: &#39;dynamic&#39; from the resolve hook. export async function dynamicInstantiate(url) {   return {     exports: [&#39;customExportName&#39;],     execute: (exports) => {       \/\/ get and set functions provided for pre-allocated export names       exports.customExportName.set(&#39;value&#39;);     }   }; }  With the list of module exports provided upfront, the execute function will then be called at the exact point of module evaluation order for that module in the import tree."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_errors","title":"Errors","description":"Applications running in Node.js will generally experience four categories of errors:  Standard JavaScript errors such as {EvalError}, {SyntaxError}, {RangeError}, {ReferenceError}, {TypeError}, and {URIError}. System errors triggered by underlying operating system constraints such as attempting to open a file that does not exist or attempting to send data over a closed socket. User-specified errors triggered by application code. AssertionErrors are a special class of error that can be triggered when Node.js detects an exceptional logic violation that should never occur. These are raised typically by the assert module.  All JavaScript and System errors raised by Node.js inherit from, or are instances of, the standard JavaScript {Error} class and are guaranteed to provide at least the properties available on that class."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_error_propagation_and_interception","title":"Error Propagation and Interception","description":"Node.js supports several mechanisms for propagating and handling errors that occur while an application is running. How these errors are reported and handled depends entirely on the type of Error and the style of the API that is called. All JavaScript errors are handled as exceptions that immediately generate and throw an error using the standard JavaScript throw mechanism. These are handled using the try\u2026catch construct provided by the JavaScript language. \/\/ Throws with a ReferenceError because z is undefined try {   const m = 1;   const n = m + z; } catch (err) {   \/\/ Handle the error here. }  Any use of the JavaScript throw mechanism will raise an exception that must be handled using try\u2026catch or the Node.js process will exit immediately. With few exceptions, Synchronous APIs (any blocking method that does not accept a callback function, such as fs.readFileSync), will use throw to report errors. Errors that occur within Asynchronous APIs may be reported in multiple ways:  Most asynchronous methods that accept a callback function will accept an Error object passed as the first argument to that function. If that first argument is not null and is an instance of Error, then an error occurred that should be handled.     const fs = require(&#39;fs&#39;);   fs.readFile(&#39;a file that does not exist&#39;, (err, data) => {     if (err) {       console.error(&#39;There was an error reading the file!&#39;, err);       return;     }     \/\/ Otherwise handle the data   });   When an asynchronous method is called on an object that is an EventEmitter, errors can be routed to that object&#39;s &#39;error&#39; event. const net = require(&#39;net&#39;); const connection = net.connect(&#39;localhost&#39;);  \/\/ Adding an &#39;error&#39; event handler to a stream: connection.on(&#39;error&#39;, (err) => {   \/\/ If the connection is reset by the server, or if it can&#39;t   \/\/ connect at all, or on any sort of error encountered by   \/\/ the connection, the error will be sent here.   console.error(err); });  connection.pipe(process.stdout);   A handful of typically asynchronous methods in the Node.js API may still use the throw mechanism to raise exceptions that must be handled using try\u2026catch. There is no comprehensive list of such methods; please refer to the documentation of each method to determine the appropriate error handling mechanism required.   The use of the &#39;error&#39; event mechanism is most common for stream-based and event emitter-based APIs, which themselves represent a series of asynchronous operations over time (as opposed to a single operation that may pass or fail). For all EventEmitter objects, if an &#39;error&#39; event handler is not provided, the error will be thrown, causing the Node.js process to report an uncaught exception and crash unless either: The domain module is used appropriately or a handler has been registered for the &#39;uncaughtException&#39; event. const EventEmitter = require(&#39;events&#39;); const ee = new EventEmitter();  setImmediate(() => {   \/\/ This will crash the process because no &#39;error&#39; event   \/\/ handler has been added.   ee.emit(&#39;error&#39;, new Error(&#39;This will crash&#39;)); });  Errors generated in this way cannot be intercepted using try\u2026catch as they are thrown after the calling code has already exited. Developers must refer to the documentation for each method to determine exactly how errors raised by those methods are propagated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_error_first_callbacks","title":"Error-first callbacks","description":"Most asynchronous methods exposed by the Node.js core API follow an idiomatic pattern referred to as an error-first callback (sometimes referred to as a Node.js style callback). With this pattern, a callback function is passed to the method as an argument. When the operation either completes or an error is raised, the callback function is called with the Error object (if any) passed as the first argument. If no error was raised, the first argument will be passed as null. const fs = require(&#39;fs&#39;);  function errorFirstCallback(err, data) {   if (err) {     console.error(&#39;There was an error&#39;, err);     return;   }   console.log(data); }  fs.readFile(&#39;\/some\/file\/that\/does-not-exist&#39;, errorFirstCallback); fs.readFile(&#39;\/some\/file\/that\/does-exist&#39;, errorFirstCallback);  The JavaScript try\u2026catch mechanism cannot be used to intercept errors generated by asynchronous APIs. A common mistake for beginners is to try to use throw inside an error-first callback: \/\/ THIS WILL NOT WORK: const fs = require(&#39;fs&#39;);  try {   fs.readFile(&#39;\/some\/file\/that\/does-not-exist&#39;, (err, data) => {     \/\/ mistaken assumption: throwing here...     if (err) {       throw err;     }   }); } catch (err) {   \/\/ This will not catch the throw!   console.error(err); }  This will not work because the callback function passed to fs.readFile() is called asynchronously. By the time the callback has been called, the surrounding code (including the try { } catch (err) { } block will have already exited. Throwing an error inside the callback can crash the Node.js process in most cases. If domains are enabled, or a handler has been registered with process.on(&#39;uncaughtException&#39;), such errors can be intercepted."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_exceptions_vs_errors","title":"Exceptions vs. Errors","description":"A JavaScript exception is a value that is thrown as a result of an invalid operation or as the target of a throw statement. While it is not required that these values are instances of Error or classes which inherit from Error, all exceptions thrown by Node.js or the JavaScript runtime will be instances of Error. Some exceptions are unrecoverable at the JavaScript layer. Such exceptions will always cause the Node.js process to crash. Examples include assert() checks or abort() calls in the C++ layer."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_system_errors","title":"System Errors","description":"System errors are generated when exceptions occur within the Node.js runtime environment. Typically, these are operational errors that occur when an application violates an operating system constraint such as attempting to read a file that does not exist or when the user does not have sufficient permissions. System errors are typically generated at the syscall level: an exhaustive list of error codes and their meanings is available by running man 2 intro or man 3 errno on most Unices; or online. In Node.js, system errors are represented as augmented Error objects with added properties."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_common_system_errors","title":"Common System Errors","description":"This list is not exhaustive, but enumerates many of the common system errors encountered when writing a Node.js program. An exhaustive list may be found here.  EACCES (Permission denied): An attempt was made to access a file in a way forbidden by its file access permissions.  EADDRINUSE (Address already in use): An attempt to bind a server (net, http, or https) to a local address failed due to another server on the local system already occupying that address.  ECONNREFUSED (Connection refused): No connection could be made because the target machine actively refused it. This usually results from trying to connect to a service that is inactive on the foreign host.  ECONNRESET (Connection reset by peer): A connection was forcibly closed by a peer. This normally results from a loss of the connection on the remote socket due to a timeout or reboot. Commonly encountered via the http and net modules.  EEXIST (File exists): An existing file was the target of an operation that required that the target not exist.  EISDIR (Is a directory): An operation expected a file, but the given pathname was a directory.  EMFILE (Too many open files in system): Maximum number of file descriptors allowable on the system has been reached, and requests for another descriptor cannot be fulfilled until at least one has been closed. This is encountered when opening many files at once in parallel, especially on systems (in particular, macOS) where there is a low file descriptor limit for processes. To remedy a low limit, run ulimit -n 2048 in the same shell that will run the Node.js process.  ENOENT (No such file or directory): Commonly raised by fs operations to indicate that a component of the specified pathname does not exist \u2014 no entity (file or directory) could be found by the given path.  ENOTDIR (Not a directory): A component of the given pathname existed, but was not a directory as expected. Commonly raised by fs.readdir.  ENOTEMPTY (Directory not empty): A directory with entries was the target of an operation that requires an empty directory \u2014 usually fs.unlink.  EPERM (Operation not permitted): An attempt was made to perform an operation that requires elevated privileges.  EPIPE (Broken pipe): A write on a pipe, socket, or FIFO for which there is no process to read the data. Commonly encountered at the net and http layers, indicative that the remote side of the stream being written to has been closed.  ETIMEDOUT (Operation timed out): A connect or send request failed because the connected party did not properly respond after a period of time. Usually encountered by http or net \u2014 often a sign that a socket.end() was not properly called."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_node_js_error_codes","title":"Node.js Error Codes","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_ambiguous_argument","title":"ERR_AMBIGUOUS_ARGUMENT","description":"This is triggered by the assert module in case e.g., assert.throws(fn, message) is used in a way that the message is the thrown error message. This is ambiguous because the message is not verifying the error message and will only be thrown in case no error is thrown."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_arg_not_iterable","title":"ERR_ARG_NOT_ITERABLE","description":"An iterable argument (i.e. a value that works with for...of loops) was required, but not provided to a Node.js API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_assertion","title":"ERR_ASSERTION","description":"A special type of error that can be triggered whenever Node.js detects an exceptional logic violation that should never occur. These are raised typically by the assert module."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_async_callback","title":"ERR_ASYNC_CALLBACK","description":"An attempt was made to register something that is not a function as an AsyncHooks callback."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_async_type","title":"ERR_ASYNC_TYPE","description":"The type of an asynchronous resource was invalid. Note that users are also able to define their own types if using the public embedder API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_buffer_out_of_bounds","title":"ERR_BUFFER_OUT_OF_BOUNDS","description":"An operation outside the bounds of a Buffer was attempted."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_buffer_too_large","title":"ERR_BUFFER_TOO_LARGE","description":"An attempt has been made to create a Buffer larger than the maximum allowed size."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_cannot_transfer_object","title":"ERR_CANNOT_TRANSFER_OBJECT","description":"The value passed to postMessage() contained an object that is not supported for transferring."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_cannot_watch_sigint","title":"ERR_CANNOT_WATCH_SIGINT","description":"Node.js was unable to watch for the SIGINT signal."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_child_closed_before_reply","title":"ERR_CHILD_CLOSED_BEFORE_REPLY","description":"A child process was closed before the parent received a reply."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_child_process_ipc_required","title":"ERR_CHILD_PROCESS_IPC_REQUIRED","description":"Used when a child process is being forked without specifying an IPC channel."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_child_process_stdio_maxbuffer","title":"ERR_CHILD_PROCESS_STDIO_MAXBUFFER","description":"Used when the main process is trying to read data from the child process&#39;s STDERR\/STDOUT, and the data&#39;s length is longer than the maxBuffer option."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_closed_message_port","title":"ERR_CLOSED_MESSAGE_PORT","description":"There was an attempt to use a MessagePort instance in a closed state, usually after .close() has been called."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_console_writable_stream","title":"ERR_CONSOLE_WRITABLE_STREAM","description":"Console was instantiated without stdout stream, or Console has a non-writable stdout or stderr stream."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_construct_call_required","title":"ERR_CONSTRUCT_CALL_REQUIRED","description":"A constructor for a class was called without new."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_cpu_usage","title":"ERR_CPU_USAGE","description":"The native call from process.cpuUsage could not be processed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_crypto_custom_engine_not_supported","title":"ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED","description":"A client certificate engine was requested that is not supported by the version of OpenSSL being used."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_crypto_ecdh_invalid_format","title":"ERR_CRYPTO_ECDH_INVALID_FORMAT","description":"An invalid value for the format argument was passed to the crypto.ECDH() class getPublicKey() method."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_crypto_ecdh_invalid_public_key","title":"ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY","description":"An invalid value for the key argument has been passed to the crypto.ECDH() class computeSecret() method. It means that the public key lies outside of the elliptic curve."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_crypto_engine_unknown","title":"ERR_CRYPTO_ENGINE_UNKNOWN","description":"An invalid crypto engine identifier was passed to require(&#39;crypto&#39;).setEngine()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_crypto_fips_forced","title":"ERR_CRYPTO_FIPS_FORCED","description":"The --force-fips command-line argument was used but there was an attempt to enable or disable FIPS mode in the crypto module."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_crypto_fips_unavailable","title":"ERR_CRYPTO_FIPS_UNAVAILABLE","description":"An attempt was made to enable or disable FIPS mode, but FIPS mode was not available."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_crypto_hash_digest_no_utf16","title":"ERR_CRYPTO_HASH_DIGEST_NO_UTF16","description":"The UTF-16 encoding was used with hash.digest(). While the hash.digest() method does allow an encoding argument to be passed in, causing the method to return a string rather than a Buffer, the UTF-16 encoding (e.g. ucs or utf16le) is not supported."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_crypto_hash_finalized","title":"ERR_CRYPTO_HASH_FINALIZED","description":"hash.digest() was called multiple times. The hash.digest() method must be called no more than one time per instance of a Hash object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_crypto_hash_update_failed","title":"ERR_CRYPTO_HASH_UPDATE_FAILED","description":"hash.update() failed for any reason. This should rarely, if ever, happen."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_crypto_invalid_digest","title":"ERR_CRYPTO_INVALID_DIGEST","description":"An invalid crypto digest algorithm was specified."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_crypto_invalid_state","title":"ERR_CRYPTO_INVALID_STATE","description":"A crypto method was used on an object that was in an invalid state. For instance, calling cipher.getAuthTag() before calling cipher.final()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_crypto_pbkdf2_error","title":"ERR_CRYPTO_PBKDF2_ERROR","description":"The PBKDF2 algorithm failed for unspecified reasons. OpenSSL does not provide more details and therefore neither does Node.js."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_crypto_scrypt_invalid_parameter","title":"ERR_CRYPTO_SCRYPT_INVALID_PARAMETER","description":"One or more crypto.scrypt() or crypto.scryptSync() parameters are outside their legal range."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_crypto_scrypt_not_supported","title":"ERR_CRYPTO_SCRYPT_NOT_SUPPORTED","description":"Node.js was compiled without scrypt support. Not possible with the official release binaries but can happen with custom builds, including distro builds."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_crypto_sign_key_required","title":"ERR_CRYPTO_SIGN_KEY_REQUIRED","description":"A signing key was not provided to the sign.sign() method."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_crypto_timing_safe_equal_length","title":"ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH","description":"crypto.timingSafeEqual() was called with Buffer, TypedArray, or DataView arguments of different lengths."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_dns_set_servers_failed","title":"ERR_DNS_SET_SERVERS_FAILED","description":"c-ares failed to set the DNS server."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_domain_callback_not_available","title":"ERR_DOMAIN_CALLBACK_NOT_AVAILABLE","description":"The domain module was not usable since it could not establish the required error handling hooks, because process.setUncaughtExceptionCaptureCallback() had been called at an earlier point in time."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_domain_cannot_set_uncaught_exception_capture","title":"ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE","description":"process.setUncaughtExceptionCaptureCallback() could not be called because the domain module has been loaded at an earlier point in time. The stack trace is extended to include the point in time at which the domain module had been loaded."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_encoding_invalid_encoded_data","title":"ERR_ENCODING_INVALID_ENCODED_DATA","description":"Data provided to util.TextDecoder() API was invalid according to the encoding provided."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_encoding_not_supported","title":"ERR_ENCODING_NOT_SUPPORTED","description":"Encoding provided to util.TextDecoder() API was not one of the WHATWG Supported Encodings."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_falsy_value_rejection","title":"ERR_FALSY_VALUE_REJECTION","description":"A Promise that was callbackified via util.callbackify() was rejected with a falsy value."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_fs_file_too_large","title":"ERR_FS_FILE_TOO_LARGE","description":"An attempt has been made to read a file whose size is larger than the maximum allowed size for a Buffer."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_fs_invalid_symlink_type","title":"ERR_FS_INVALID_SYMLINK_TYPE","description":"An invalid symlink type was passed to the fs.symlink() or fs.symlinkSync() methods."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http_headers_sent","title":"ERR_HTTP_HEADERS_SENT","description":"An attempt was made to add more headers after the headers had already been sent."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http_invalid_header_value","title":"ERR_HTTP_INVALID_HEADER_VALUE","description":"An invalid HTTP header value was specified."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http_invalid_status_code","title":"ERR_HTTP_INVALID_STATUS_CODE","description":"Status code was outside the regular status code range (100-999)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http_trailer_invalid","title":"ERR_HTTP_TRAILER_INVALID","description":"The Trailer header was set even though the transfer encoding does not support that."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_altsvc_invalid_origin","title":"ERR_HTTP2_ALTSVC_INVALID_ORIGIN","description":"HTTP\/2 ALTSVC frames require a valid origin."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_altsvc_length","title":"ERR_HTTP2_ALTSVC_LENGTH","description":"HTTP\/2 ALTSVC frames are limited to a maximum of 16,382 payload bytes."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_connect_authority","title":"ERR_HTTP2_CONNECT_AUTHORITY","description":"For HTTP\/2 requests using the CONNECT method, the :authority pseudo-header is required."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_connect_path","title":"ERR_HTTP2_CONNECT_PATH","description":"For HTTP\/2 requests using the CONNECT method, the :path pseudo-header is forbidden."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_connect_scheme","title":"ERR_HTTP2_CONNECT_SCHEME","description":"For HTTP\/2 requests using the CONNECT method, the :scheme pseudo-header is forbidden."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_error","title":"ERR_HTTP2_ERROR","description":"A non-specific HTTP\/2 error has occurred."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_goaway_session","title":"ERR_HTTP2_GOAWAY_SESSION","description":"New HTTP\/2 Streams may not be opened after the Http2Session has received a GOAWAY frame from the connected peer."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_headers_after_respond","title":"ERR_HTTP2_HEADERS_AFTER_RESPOND","description":"An additional headers was specified after an HTTP\/2 response was initiated."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_headers_sent","title":"ERR_HTTP2_HEADERS_SENT","description":"An attempt was made to send multiple response headers."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_header_single_value","title":"ERR_HTTP2_HEADER_SINGLE_VALUE","description":"Multiple values were provided for an HTTP\/2 header field that was required to have only a single value."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_info_status_not_allowed","title":"ERR_HTTP2_INFO_STATUS_NOT_ALLOWED","description":"Informational HTTP status codes (1xx) may not be set as the response status code on HTTP\/2 responses."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_invalid_connection_headers","title":"ERR_HTTP2_INVALID_CONNECTION_HEADERS","description":"HTTP\/1 connection specific headers are forbidden to be used in HTTP\/2 requests and responses."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_invalid_header_value","title":"ERR_HTTP2_INVALID_HEADER_VALUE","description":"An invalid HTTP\/2 header value was specified."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_invalid_info_status","title":"ERR_HTTP2_INVALID_INFO_STATUS","description":"An invalid HTTP informational status code has been specified. Informational status codes must be an integer between 100 and 199 (inclusive)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_invalid_packed_settings_length","title":"ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH","description":"Input Buffer and Uint8Array instances passed to the http2.getUnpackedSettings() API must have a length that is a multiple of six."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_invalid_pseudoheader","title":"ERR_HTTP2_INVALID_PSEUDOHEADER","description":"Only valid HTTP\/2 pseudoheaders (:status, :path, :authority, :scheme, and :method) may be used."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_invalid_session","title":"ERR_HTTP2_INVALID_SESSION","description":"An action was performed on an Http2Session object that had already been destroyed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_invalid_setting_value","title":"ERR_HTTP2_INVALID_SETTING_VALUE","description":"An invalid value has been specified for an HTTP\/2 setting."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_invalid_stream","title":"ERR_HTTP2_INVALID_STREAM","description":"An operation was performed on a stream that had already been destroyed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_max_pending_settings_ack","title":"ERR_HTTP2_MAX_PENDING_SETTINGS_ACK","description":"Whenever an HTTP\/2 SETTINGS frame is sent to a connected peer, the peer is required to send an acknowledgment that it has received and applied the new SETTINGS. By default, a maximum number of unacknowledged SETTINGS frames may be sent at any given time. This error code is used when that limit has been reached."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_no_socket_manipulation","title":"ERR_HTTP2_NO_SOCKET_MANIPULATION","description":"An attempt was made to directly manipulate (read, write, pause, resume, etc.) a socket attached to an Http2Session."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_out_of_streams","title":"ERR_HTTP2_OUT_OF_STREAMS","description":"The number of streams created on a single HTTP\/2 session reached the maximum limit."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_payload_forbidden","title":"ERR_HTTP2_PAYLOAD_FORBIDDEN","description":"A message payload was specified for an HTTP response code for which a payload is forbidden."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_ping_cancel","title":"ERR_HTTP2_PING_CANCEL","description":"An HTTP\/2 ping was canceled."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_ping_length","title":"ERR_HTTP2_PING_LENGTH","description":"HTTP\/2 ping payloads must be exactly 8 bytes in length."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_pseudoheader_not_allowed","title":"ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED","description":"An HTTP\/2 pseudo-header has been used inappropriately. Pseudo-headers are header key names that begin with the : prefix."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_push_disabled","title":"ERR_HTTP2_PUSH_DISABLED","description":"An attempt was made to create a push stream, which had been disabled by the client."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_send_file","title":"ERR_HTTP2_SEND_FILE","description":"An attempt was made to use the Http2Stream.prototype.responseWithFile() API to send a directory."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_send_file_noseek","title":"ERR_HTTP2_SEND_FILE_NOSEEK","description":"An attempt was made to use the Http2Stream.prototype.responseWithFile() API to send something other than a regular file, but offset or length options were provided."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_session_error","title":"ERR_HTTP2_SESSION_ERROR","description":"The Http2Session closed with a non-zero error code."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_socket_bound","title":"ERR_HTTP2_SOCKET_BOUND","description":"An attempt was made to connect a Http2Session object to a net.Socket or tls.TLSSocket that had already been bound to another Http2Session object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_status_101","title":"ERR_HTTP2_STATUS_101","description":"Use of the 101 Informational status code is forbidden in HTTP\/2."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_status_invalid","title":"ERR_HTTP2_STATUS_INVALID","description":"An invalid HTTP status code has been specified. Status codes must be an integer between 100 and 599 (inclusive)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_stream_cancel","title":"ERR_HTTP2_STREAM_CANCEL","description":"An Http2Stream was destroyed before any data was transmitted to the connected peer."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_stream_error","title":"ERR_HTTP2_STREAM_ERROR","description":"A non-zero error code was been specified in an RST_STREAM frame."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_stream_self_dependency","title":"ERR_HTTP2_STREAM_SELF_DEPENDENCY","description":"When setting the priority for an HTTP\/2 stream, the stream may be marked as a dependency for a parent stream. This error code is used when an attempt is made to mark a stream and dependent of itself."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_trailers_already_sent","title":"ERR_HTTP2_TRAILERS_ALREADY_SENT","description":"Trailing headers have already been sent on the Http2Stream."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_trailers_not_ready","title":"ERR_HTTP2_TRAILERS_NOT_READY","description":"The http2stream.sendTrailers() method cannot be called until after the &#39;wantTrailers&#39; event is emitted on an Http2Stream object. The &#39;wantTrailers&#39; event will only be emitted if the waitForTrailers option is set for the Http2Stream."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_http2_unsupported_protocol","title":"ERR_HTTP2_UNSUPPORTED_PROTOCOL","description":"http2.connect() was passed a URL that uses any protocol other than http: or https:."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_index_out_of_range","title":"ERR_INDEX_OUT_OF_RANGE","description":"A given index was out of the accepted range (e.g. negative offsets)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_inspector_already_connected","title":"ERR_INSPECTOR_ALREADY_CONNECTED","description":"While using the inspector module, an attempt was made to connect when the inspector was already connected."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_inspector_closed","title":"ERR_INSPECTOR_CLOSED","description":"While using the inspector module, an attempt was made to use the inspector after the session had already closed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_inspector_not_available","title":"ERR_INSPECTOR_NOT_AVAILABLE","description":"The inspector module is not available for use."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_inspector_not_connected","title":"ERR_INSPECTOR_NOT_CONNECTED","description":"While using the inspector module, an attempt was made to use the inspector before it was connected."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_address_family","title":"ERR_INVALID_ADDRESS_FAMILY","description":"The provided address family is not understood by the Node.js API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_arg_type","title":"ERR_INVALID_ARG_TYPE","description":"An argument of the wrong type was passed to a Node.js API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_arg_value","title":"ERR_INVALID_ARG_VALUE","description":"An invalid or unsupported value was passed for a given argument."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_array_length","title":"ERR_INVALID_ARRAY_LENGTH","description":"An array was not of the expected length or in a valid range."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_async_id","title":"ERR_INVALID_ASYNC_ID","description":"An invalid asyncId or triggerAsyncId was passed using AsyncHooks. An id less than -1 should never happen."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_buffer_size","title":"ERR_INVALID_BUFFER_SIZE","description":"A swap was performed on a Buffer but its size was not compatible with the operation."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_callback","title":"ERR_INVALID_CALLBACK","description":"A callback function was required but was not been provided to a Node.js API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_char","title":"ERR_INVALID_CHAR","description":"Invalid characters were detected in headers."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_cursor_pos","title":"ERR_INVALID_CURSOR_POS","description":"A cursor on a given stream cannot be moved to a specified row without a specified column."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_domain_name","title":"ERR_INVALID_DOMAIN_NAME","description":"hostname can not be parsed from a provided URL."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_fd","title":"ERR_INVALID_FD","description":"A file descriptor (&#39;fd&#39;) was not valid (e.g. it was a negative value)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_fd_type","title":"ERR_INVALID_FD_TYPE","description":"A file descriptor (&#39;fd&#39;) type was not valid."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_file_url_host","title":"ERR_INVALID_FILE_URL_HOST","description":"A Node.js API that consumes file: URLs (such as certain functions in the fs module) encountered a file URL with an incompatible host. This situation can only occur on Unix-like systems where only localhost or an empty host is supported."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_file_url_path","title":"ERR_INVALID_FILE_URL_PATH","description":"A Node.js API that consumes file: URLs (such as certain functions in the fs module) encountered a file URL with an incompatible path. The exact semantics for determining whether a path can be used is platform-dependent."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_handle_type","title":"ERR_INVALID_HANDLE_TYPE","description":"An attempt was made to send an unsupported \"handle\" over an IPC communication channel to a child process. See subprocess.send() and process.send() for more information."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_http_token","title":"ERR_INVALID_HTTP_TOKEN","description":"An invalid HTTP token was supplied."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_ip_address","title":"ERR_INVALID_IP_ADDRESS","description":"An IP address is not valid."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_opt_value","title":"ERR_INVALID_OPT_VALUE","description":"An invalid or unexpected value was passed in an options object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_opt_value_encoding","title":"ERR_INVALID_OPT_VALUE_ENCODING","description":"An invalid or unknown file encoding was passed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_performance_mark","title":"ERR_INVALID_PERFORMANCE_MARK","description":"While using the Performance Timing API (perf_hooks), a performance mark is invalid."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_protocol","title":"ERR_INVALID_PROTOCOL","description":"An invalid options.protocol was passed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_repl_eval_config","title":"ERR_INVALID_REPL_EVAL_CONFIG","description":"Both breakEvalOnSigint and eval options were set in the REPL config, which is not supported."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_return_property","title":"ERR_INVALID_RETURN_PROPERTY","description":"Thrown in case a function option does not provide a valid value for one of its returned object properties on execution."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_return_property_value","title":"ERR_INVALID_RETURN_PROPERTY_VALUE","description":"Thrown in case a function option does not provide an expected value type for one of its returned object properties on execution."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_return_value","title":"ERR_INVALID_RETURN_VALUE","description":"Thrown in case a function option does not return an expected value type on execution. For example when a function is expected to return a promise."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_sync_fork_input","title":"ERR_INVALID_SYNC_FORK_INPUT","description":"A Buffer, Uint8Array or string was provided as stdio input to a synchronous fork. See the documentation for the child_process module for more information."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_this","title":"ERR_INVALID_THIS","description":"A Node.js API function was called with an incompatible this value. Example: const urlSearchParams = new URLSearchParams(&#39;foo=bar&baz=new&#39;);  const buf = Buffer.alloc(1); urlSearchParams.has.call(buf, &#39;foo&#39;); \/\/ Throws a TypeError with code &#39;ERR_INVALID_THIS&#39;"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_transfer_object","title":"ERR_INVALID_TRANSFER_OBJECT","description":"An invalid transfer object was passed to postMessage()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_tuple","title":"ERR_INVALID_TUPLE","description":"An element in the iterable provided to the WHATWG URLSearchParams constructor did not represent a [name, value] tuple \u2013 that is, if an element is not iterable, or does not consist of exactly two elements."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_uri","title":"ERR_INVALID_URI","description":"An invalid URI was passed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_url","title":"ERR_INVALID_URL","description":"An invalid URL was passed to the WHATWG URL constructor to be parsed. The thrown error object typically has an additional property &#39;input&#39; that contains the URL that failed to parse."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_invalid_url_scheme","title":"ERR_INVALID_URL_SCHEME","description":"An attempt was made to use a URL of an incompatible scheme (protocol) for a specific purpose. It is only used in the WHATWG URL API support in the fs module (which only accepts URLs with &#39;file&#39; scheme), but may be used in other Node.js APIs as well in the future."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_ipc_channel_closed","title":"ERR_IPC_CHANNEL_CLOSED","description":"An attempt was made to use an IPC communication channel that was already closed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_ipc_disconnected","title":"ERR_IPC_DISCONNECTED","description":"An attempt was made to disconnect an IPC communication channel that was already disconnected. See the documentation for the child_process module for more information."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_ipc_one_pipe","title":"ERR_IPC_ONE_PIPE","description":"An attempt was made to create a child Node.js process using more than one IPC communication channel. See the documentation for the child_process module for more information."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_ipc_sync_fork","title":"ERR_IPC_SYNC_FORK","description":"An attempt was made to open an IPC communication channel with a synchronously forked Node.js process. See the documentation for the child_process module for more information."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_memory_allocation_failed","title":"ERR_MEMORY_ALLOCATION_FAILED","description":"An attempt was made to allocate memory (usually in the C++ layer) but it failed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_method_not_implemented","title":"ERR_METHOD_NOT_IMPLEMENTED","description":"A method is required but not implemented."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_missing_args","title":"ERR_MISSING_ARGS","description":"A required argument of a Node.js API was not passed. This is only used for strict compliance with the API specification (which in some cases may accept func(undefined) but not func()). In most native Node.js APIs, func(undefined) and func() are treated identically, and the ERR_INVALID_ARG_TYPE error code may be used instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_missing_dynamic_instantiate_hook","title":"ERR_MISSING_DYNAMIC_INSTANTIATE_HOOK","description":"An ES6 module loader hook specified format: &#39;dynamic&#39; but did not provide a dynamicInstantiate hook."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_missing_message_port_in_transfer_list","title":"ERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST","description":"A MessagePort was found in the object passed to a postMessage() call, but not provided in the transferList for that call."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_missing_module","title":"ERR_MISSING_MODULE","description":"An ES6 module could not be resolved."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_missing_platform_for_worker","title":"ERR_MISSING_PLATFORM_FOR_WORKER","description":"The V8 platform used by this instance of Node.js does not support creating Workers. This is caused by lack of embedder support for Workers. In particular, this error will not occur with standard builds of Node.js."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_module_resolution_legacy","title":"ERR_MODULE_RESOLUTION_LEGACY","description":"A failure occurred resolving imports in an ES6 module."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_multiple_callback","title":"ERR_MULTIPLE_CALLBACK","description":"A callback was called more than once. A callback is almost always meant to only be called once as the query can either be fulfilled or rejected but not both at the same time. The latter would be possible by calling a callback more than once."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_napi_cons_function","title":"ERR_NAPI_CONS_FUNCTION","description":"While using N-API, a constructor passed was not a function."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_napi_invalid_dataview_args","title":"ERR_NAPI_INVALID_DATAVIEW_ARGS","description":"While calling napi_create_dataview(), a given offset was outside the bounds of the dataview or offset + length was larger than a length of given buffer."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_napi_invalid_typedarray_alignment","title":"ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT","description":"While calling napi_create_typedarray(), the provided offset was not a multiple of the element size."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_napi_invalid_typedarray_length","title":"ERR_NAPI_INVALID_TYPEDARRAY_LENGTH","description":"While calling napi_create_typedarray(), (length * size_of_element) + byte_offset was larger than the length of given buffer."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_napi_tsfn_call_js","title":"ERR_NAPI_TSFN_CALL_JS","description":"An error occurred while invoking the JavaScript portion of the thread-safe function."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_napi_tsfn_get_undefined","title":"ERR_NAPI_TSFN_GET_UNDEFINED","description":"An error occurred while attempting to retrieve the JavaScript undefined value."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_napi_tsfn_start_idle_loop","title":"ERR_NAPI_TSFN_START_IDLE_LOOP","description":"On the main thread, values are removed from the queue associated with the thread-safe function in an idle loop. This error indicates that an error has occurred when attempting to start the loop."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_napi_tsfn_stop_idle_loop","title":"ERR_NAPI_TSFN_STOP_IDLE_LOOP","description":"Once no more items are left in the queue, the idle loop must be suspended. This error indicates that the idle loop has failed to stop."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_no_crypto","title":"ERR_NO_CRYPTO","description":"An attempt was made to use crypto features while Node.js was not compiled with OpenSSL crypto support."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_no_icu","title":"ERR_NO_ICU","description":"An attempt was made to use features that require ICU, but Node.js was not compiled with ICU support."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_no_longer_supported","title":"ERR_NO_LONGER_SUPPORTED","description":"A Node.js API was called in an unsupported manner, such as Buffer.write(string, encoding, offset[, length])."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_out_of_range","title":"ERR_OUT_OF_RANGE","description":"A given value is out of the accepted range."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_require_esm","title":"ERR_REQUIRE_ESM","description":"An attempt was made to require() an ES6 module."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_script_execution_interrupted","title":"ERR_SCRIPT_EXECUTION_INTERRUPTED","description":"Script execution was interrupted by SIGINT (For example, when Ctrl+C was pressed)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_server_already_listen","title":"ERR_SERVER_ALREADY_LISTEN","description":"The server.listen() method was called while a net.Server was already listening. This applies to all instances of net.Server, including HTTP, HTTPS, and HTTP\/2 Server instances."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_server_not_running","title":"ERR_SERVER_NOT_RUNNING","description":"The server.close() method was called when a net.Server was not running. This applies to all instances of net.Server, including HTTP, HTTPS, and HTTP\/2 Server instances."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_socket_already_bound","title":"ERR_SOCKET_ALREADY_BOUND","description":"An attempt was made to bind a socket that has already been bound."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_socket_bad_buffer_size","title":"ERR_SOCKET_BAD_BUFFER_SIZE","description":"An invalid (negative) size was passed for either the recvBufferSize or sendBufferSize options in dgram.createSocket()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_socket_bad_port","title":"ERR_SOCKET_BAD_PORT","description":"An API function expecting a port > 0 and < 65536 received an invalid value."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_socket_bad_type","title":"ERR_SOCKET_BAD_TYPE","description":"An API function expecting a socket type (udp4 or udp6) received an invalid value."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_socket_buffer_size","title":"ERR_SOCKET_BUFFER_SIZE","description":"While using dgram.createSocket(), the size of the receive or send Buffer could not be determined."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_socket_cannot_send","title":"ERR_SOCKET_CANNOT_SEND","description":"Data could be sent on a socket."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_socket_closed","title":"ERR_SOCKET_CLOSED","description":"An attempt was made to operate on an already closed socket."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_socket_dgram_not_running","title":"ERR_SOCKET_DGRAM_NOT_RUNNING","description":"A call was made and the UDP subsystem was not running."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_stderr_close","title":"ERR_STDERR_CLOSE","description":"An attempt was made to close the process.stderr stream. By design, Node.js does not allow stdout or stderr streams to be closed by user code."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_stdout_close","title":"ERR_STDOUT_CLOSE","description":"An attempt was made to close the process.stdout stream. By design, Node.js does not allow stdout or stderr streams to be closed by user code."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_stream_cannot_pipe","title":"ERR_STREAM_CANNOT_PIPE","description":"An attempt was made to call stream.pipe() on a Writable stream."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_stream_destroyed","title":"ERR_STREAM_DESTROYED","description":"A stream method was called that cannot complete because the stream was destroyed using stream.destroy()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_stream_null_values","title":"ERR_STREAM_NULL_VALUES","description":"An attempt was made to call stream.write() with a null chunk."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_stream_premature_close","title":"ERR_STREAM_PREMATURE_CLOSE","description":"An error returned by stream.finished() and stream.pipeline(), when a stream or a pipeline ends non gracefully with no explicit error."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_stream_push_after_eof","title":"ERR_STREAM_PUSH_AFTER_EOF","description":"An attempt was made to call stream.push() after a null(EOF) had been pushed to the stream."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_stream_read_not_implemented","title":"ERR_STREAM_READ_NOT_IMPLEMENTED","description":"An attempt was made to use a readable stream that did not implement readable._read()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_stream_unshift_after_end_event","title":"ERR_STREAM_UNSHIFT_AFTER_END_EVENT","description":"An attempt was made to call stream.unshift() after the &#39;end&#39; event was emitted."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_stream_wrap","title":"ERR_STREAM_WRAP","description":"Prevents an abort if a string decoder was set on the Socket or if the decoder is in objectMode. Example const Socket = require(&#39;net&#39;).Socket; const instance = new Socket();  instance.setEncoding(&#39;utf8&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_stream_write_after_end","title":"ERR_STREAM_WRITE_AFTER_END","description":"An attempt was made to call stream.write() after stream.end() has been called."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_string_too_long","title":"ERR_STRING_TOO_LONG","description":"An attempt has been made to create a string longer than the maximum allowed length."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_system_error","title":"ERR_SYSTEM_ERROR","description":"An unspecified or non-specific system error has occurred within the Node.js process. The error object will have an err.info object property with additional details."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_tls_cert_altname_invalid","title":"ERR_TLS_CERT_ALTNAME_INVALID","description":"While using TLS, the hostname\/IP of the peer did not match any of the subjectAltNames in its certificate."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_tls_dh_param_size","title":"ERR_TLS_DH_PARAM_SIZE","description":"While using TLS, the parameter offered for the Diffie-Hellman (DH) key-agreement protocol is too small. By default, the key length must be greater than or equal to 1024 bits to avoid vulnerabilities, even though it is strongly recommended to use 2048 bits or larger for stronger security."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_tls_handshake_timeout","title":"ERR_TLS_HANDSHAKE_TIMEOUT","description":"A TLS\/SSL handshake timed out. In this case, the server must also abort the connection."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_tls_renegotiation_disabled","title":"ERR_TLS_RENEGOTIATION_DISABLED","description":"An attempt was made to renegotiate TLS on a socket instance with TLS disabled."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_tls_required_server_name","title":"ERR_TLS_REQUIRED_SERVER_NAME","description":"While using TLS, the server.addContext() method was called without providing a hostname in the first parameter."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_tls_session_attack","title":"ERR_TLS_SESSION_ATTACK","description":"An excessive amount of TLS renegotiations is detected, which is a potential vector for denial-of-service attacks."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_tls_sni_from_server","title":"ERR_TLS_SNI_FROM_SERVER","description":"An attempt was made to issue Server Name Indication from a TLS server-side socket, which is only valid from a client."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_trace_events_category_required","title":"ERR_TRACE_EVENTS_CATEGORY_REQUIRED","description":"The trace_events.createTracing() method requires at least one trace event category."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_trace_events_unavailable","title":"ERR_TRACE_EVENTS_UNAVAILABLE","description":"The trace_events module could not be loaded because Node.js was compiled with the --without-v8-platform flag."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_transform_already_transforming","title":"ERR_TRANSFORM_ALREADY_TRANSFORMING","description":"A Transform stream finished while it was still transforming."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_transform_with_length_0","title":"ERR_TRANSFORM_WITH_LENGTH_0","description":"A Transform stream finished with data still in the write buffer."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_tty_init_failed","title":"ERR_TTY_INIT_FAILED","description":"The initialization of a TTY failed due to a system error."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_uncaught_exception_capture_already_set","title":"ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET","description":"process.setUncaughtExceptionCaptureCallback() was called twice, without first resetting the callback to null. This error is designed to prevent accidentally overwriting a callback registered from another module."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_unescaped_characters","title":"ERR_UNESCAPED_CHARACTERS","description":"A string that contained unescaped characters was received."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_unhandled_error","title":"ERR_UNHANDLED_ERROR","description":"An unhandled error occurred (for instance, when an &#39;error&#39; event is emitted by an EventEmitter but an &#39;error&#39; handler is not registered)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_unknown_builtin_module","title":"ERR_UNKNOWN_BUILTIN_MODULE","description":"Used to identify a specific kind of internal Node.js error that should not typically be triggered by user code. Instances of this error point to an internal bug within the Node.js binary itself."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_unknown_encoding","title":"ERR_UNKNOWN_ENCODING","description":"An invalid or unknown encoding option was passed to an API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_unknown_file_extension","title":"ERR_UNKNOWN_FILE_EXTENSION","description":"An attempt was made to load a module with an unknown or unsupported file extension."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_unknown_module_format","title":"ERR_UNKNOWN_MODULE_FORMAT","description":"An attempt was made to load a module with an unknown or unsupported format."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_unknown_signal","title":"ERR_UNKNOWN_SIGNAL","description":"An invalid or unknown process signal was passed to an API expecting a valid signal (such as subprocess.kill())."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_unknown_stdin_type","title":"ERR_UNKNOWN_STDIN_TYPE","description":"An attempt was made to launch a Node.js process with an unknown stdin file type. This error is usually an indication of a bug within Node.js itself, although it is possible for user code to trigger it."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_unknown_stream_type","title":"ERR_UNKNOWN_STREAM_TYPE","description":"An attempt was made to launch a Node.js process with an unknown stdout or stderr file type. This error is usually an indication of a bug within Node.js itself, although it is possible for user code to trigger it."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_v8breakiterator","title":"ERR_V8BREAKITERATOR","description":"The V8 BreakIterator API was used but the full ICU data set is not installed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_valid_performance_entry_type","title":"ERR_VALID_PERFORMANCE_ENTRY_TYPE","description":"While using the Performance Timing API (perf_hooks), no valid performance entry types were found."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_value_out_of_range","title":"ERR_VALUE_OUT_OF_RANGE","description":"Superseded by ERR_OUT_OF_RANGE."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_vm_module_already_linked","title":"ERR_VM_MODULE_ALREADY_LINKED","description":"The module attempted to be linked is not eligible for linking, because of one of the following reasons:  It has already been linked (linkingStatus is &#39;linked&#39;) It is being linked (linkingStatus is &#39;linking&#39;) Linking has failed for this module (linkingStatus is &#39;errored&#39;)"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_vm_module_different_context","title":"ERR_VM_MODULE_DIFFERENT_CONTEXT","description":"The module being returned from the linker function is from a different context than the parent module. Linked modules must share the same context."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_vm_module_linking_errored","title":"ERR_VM_MODULE_LINKING_ERRORED","description":"The linker function returned a module for which linking has failed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_vm_module_not_linked","title":"ERR_VM_MODULE_NOT_LINKED","description":"The module must be successfully linked before instantiation."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_vm_module_not_module","title":"ERR_VM_MODULE_NOT_MODULE","description":"The fulfilled value of a linking promise is not a vm.Module object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_vm_module_status","title":"ERR_VM_MODULE_STATUS","description":"The current module&#39;s status does not allow for this operation. The specific meaning of the error depends on the specific function."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_worker_path","title":"ERR_WORKER_PATH","description":"The path for the main script of a worker is neither an absolute path nor a relative path starting with .\/ or ..\/."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_worker_unserializable_error","title":"ERR_WORKER_UNSERIALIZABLE_ERROR","description":"All attempts at serializing an uncaught exception from a worker thread failed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_worker_unsupported_extension","title":"ERR_WORKER_UNSUPPORTED_EXTENSION","description":"The pathname used for the main script of a worker has an unknown file extension."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_err_zlib_initialization_failed","title":"ERR_ZLIB_INITIALIZATION_FAILED","description":"Creation of a zlib object failed due to incorrect configuration."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_global_objects","title":"Global Objects","description":"These objects are available in all modules. The following variables may appear to be global but are not. They exist only in the scope of modules, see the module system documentation:  __dirname __filename exports module require()  The objects listed here are specific to Node.js. There are a number of built-in objects that are part of the JavaScript language itself, which are also globally accessible."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_class_buffer","title":"Class: Buffer","description":"{Function}  Used to handle binary data. See the buffer section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_clearimmediate_immediateobject","title":"clearImmediate(immediateObject)","description":"clearImmediate is described in the timers section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_clearinterval_intervalobject","title":"clearInterval(intervalObject)","description":"clearInterval is described in the timers section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_cleartimeout_timeoutobject","title":"clearTimeout(timeoutObject)","description":"clearTimeout is described in the timers section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console","title":"console","description":"{Object}  Used to print to stdout and stderr. See the console section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_global","title":"global","description":"{Object} The global namespace object.  In browsers, the top-level scope is the global scope. This means that within the browser var something will define a new global variable. In Node.js this is different. The top-level scope is not the global scope; var something inside a Node.js module will be local to that module."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process","title":"process","description":"{Object}  The process object. See the process object section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_setimmediate_callback_args","title":"setImmediate(callback[, ...args])","description":"setImmediate is described in the timers section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_setinterval_callback_delay_args","title":"setInterval(callback, delay[, ...args])","description":"setInterval is described in the timers section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_settimeout_callback_delay_args","title":"setTimeout(callback, delay[, ...args])","description":"setTimeout is described in the timers section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_url","title":"URL","description":"The WHATWG URL class. See the URL section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_urlsearchparams","title":"URLSearchParams","description":"The WHATWG URLSearchParams class. See the URLSearchParams section."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process","title":"Process","description":"The process object is a global that provides information about, and control over, the current Node.js process. As a global, it is always available to Node.js applications without using require()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_abort","title":"process.abort()","description":"The process.abort() method causes the Node.js process to exit immediately and generate a core file. This feature is not available in Worker threads."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_chdir_directory","title":"process.chdir(directory)","description":"The process.chdir() method changes the current working directory of the Node.js process or throws an exception if doing so fails (for instance, if the specified directory does not exist). console.log(`Starting directory: ${process.cwd()}`); try {   process.chdir(&#39;\/tmp&#39;);   console.log(`New directory: ${process.cwd()}`); } catch (err) {   console.error(`chdir: ${err}`); }  This feature is not available in Worker threads."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_cpuusage_previousvalue","title":"process.cpuUsage([previousValue])","description":"The process.cpuUsage() method returns the user and system CPU time usage of the current process, in an object with properties user and system, whose values are microsecond values (millionth of a second). These values measure time spent in user and system code respectively, and may end up being greater than actual elapsed time if multiple CPU cores are performing work for this process. The result of a previous call to process.cpuUsage() can be passed as the argument to the function, to get a diff reading. const startUsage = process.cpuUsage(); \/\/ { user: 38579, system: 6986 }  \/\/ spin the CPU for 500 milliseconds const now = Date.now(); while (Date.now() - now < 500);  console.log(process.cpuUsage(startUsage)); \/\/ { user: 514883, system: 11226 }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_cwd","title":"process.cwd()","description":"The process.cwd() method returns the current working directory of the Node.js process. console.log(`Current directory: ${process.cwd()}`);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_disconnect","title":"process.disconnect()","description":"If the Node.js process is spawned with an IPC channel (see the Child Process and Cluster documentation), the process.disconnect() method will close the IPC channel to the parent process, allowing the child process to exit gracefully once there are no other connections keeping it alive. The effect of calling process.disconnect() is that same as calling the parent process&#39;s ChildProcess.disconnect(). If the Node.js process was not spawned with an IPC channel, process.disconnect() will be undefined."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_dlopen_module_filename_flags","title":"process.dlopen(module, filename[, flags])","description":"The process.dlopen() method allows to dynamically load shared objects. It is primarily used by require() to load C++ Addons, and should not be used directly, except in special cases. In other words, require() should be preferred over process.dlopen(), unless there are specific reasons. The flags argument is an integer that allows to specify dlopen behavior. See the os.constants.dlopen documentation for details. If there are specific reasons to use process.dlopen() (for instance, to specify dlopen flags), it&#39;s often useful to use require.resolve() to look up the module&#39;s path. An important drawback when calling process.dlopen() is that the module instance must be passed. Functions exported by the C++ Addon will be accessible via module.exports. The example below shows how to load a C++ Addon, named as binding, that exports a foo function. All the symbols will be loaded before the call returns, by passing the RTLD_NOW constant. In this example the constant is assumed to be available. const os = require(&#39;os&#39;); process.dlopen(module, require.resolve(&#39;binding&#39;),                os.constants.dlopen.RTLD_NOW); module.exports.foo();"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_emitwarning_warning_options","title":"process.emitWarning(warning[, options])","description":"The process.emitWarning() method can be used to emit custom or application specific process warnings. These can be listened for by adding a handler to the &#39;warning&#39; event. \/\/ Emit a warning with a code and additional detail. process.emitWarning(&#39;Something happened!&#39;, {   code: &#39;MY_WARNING&#39;,   detail: &#39;This is some additional information&#39; }); \/\/ Emits: \/\/ (node:56338) [MY_WARNING] Warning: Something happened! \/\/ This is some additional information  In this example, an Error object is generated internally by process.emitWarning() and passed through to the &#39;warning&#39; handler. process.on(&#39;warning&#39;, (warning) => {   console.warn(warning.name);    \/\/ &#39;Warning&#39;   console.warn(warning.message); \/\/ &#39;Something happened!&#39;   console.warn(warning.code);    \/\/ &#39;MY_WARNING&#39;   console.warn(warning.stack);   \/\/ Stack trace   console.warn(warning.detail);  \/\/ &#39;This is some additional information&#39; });  If warning is passed as an Error object, the options argument is ignored."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_emitwarning_warning_type_code_ctor","title":"process.emitWarning(warning[, type[, code]][, ctor])","description":"The process.emitWarning() method can be used to emit custom or application specific process warnings. These can be listened for by adding a handler to the &#39;warning&#39; event. \/\/ Emit a warning using a string. process.emitWarning(&#39;Something happened!&#39;); \/\/ Emits: (node: 56338) Warning: Something happened!  \/\/ Emit a warning using a string and a type. process.emitWarning(&#39;Something Happened!&#39;, &#39;CustomWarning&#39;); \/\/ Emits: (node:56338) CustomWarning: Something Happened!  process.emitWarning(&#39;Something happened!&#39;, &#39;CustomWarning&#39;, &#39;WARN001&#39;); \/\/ Emits: (node:56338) [WARN001] CustomWarning: Something happened!  In each of the previous examples, an Error object is generated internally by process.emitWarning() and passed through to the &#39;warning&#39; handler. process.on(&#39;warning&#39;, (warning) => {   console.warn(warning.name);   console.warn(warning.message);   console.warn(warning.code);   console.warn(warning.stack); });  If warning is passed as an Error object, it will be passed through to the &#39;warning&#39; event handler unmodified (and the optional type, code and ctor arguments will be ignored): \/\/ Emit a warning using an Error object. const myWarning = new Error(&#39;Something happened!&#39;); \/\/ Use the Error name property to specify the type name myWarning.name = &#39;CustomWarning&#39;; myWarning.code = &#39;WARN001&#39;;  process.emitWarning(myWarning); \/\/ Emits: (node:56338) [WARN001] CustomWarning: Something happened!  A TypeError is thrown if warning is anything other than a string or Error object. Note that while process warnings use Error objects, the process warning mechanism is not a replacement for normal error handling mechanisms. The following additional handling is implemented if the warning type is &#39;DeprecationWarning&#39;:  If the --throw-deprecation command-line flag is used, the deprecation warning is thrown as an exception rather than being emitted as an event. If the --no-deprecation command-line flag is used, the deprecation warning is suppressed. If the --trace-deprecation command-line flag is used, the deprecation warning is printed to stderr along with the full stack trace."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_avoiding_duplicate_warnings","title":"Avoiding duplicate warnings","description":"As a best practice, warnings should be emitted only once per process. To do so, it is recommended to place the emitWarning() behind a simple boolean flag as illustrated in the example below: function emitMyWarning() {   if (!emitMyWarning.warned) {     emitMyWarning.warned = true;     process.emitWarning(&#39;Only warn once!&#39;);   } } emitMyWarning(); \/\/ Emits: (node: 56339) Warning: Only warn once! emitMyWarning(); \/\/ Emits nothing"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_exit_code","title":"process.exit([code])","description":"The process.exit() method instructs Node.js to terminate the process synchronously with an exit status of code. If code is omitted, exit uses either the &#39;success&#39; code 0 or the value of process.exitCode if it has been set. Node.js will not terminate until all the &#39;exit&#39; event listeners are called. To exit with a &#39;failure&#39; code: process.exit(1);  The shell that executed Node.js should see the exit code as 1. Calling process.exit() will force the process to exit as quickly as possible even if there are still asynchronous operations pending that have not yet completed fully, including I\/O operations to process.stdout and process.stderr. In most situations, it is not actually necessary to call process.exit() explicitly. The Node.js process will exit on its own if there is no additional work pending in the event loop. The process.exitCode property can be set to tell the process which exit code to use when the process exits gracefully. For instance, the following example illustrates a misuse of the process.exit() method that could lead to data printed to stdout being truncated and lost: \/\/ This is an example of what *not* to do: if (someConditionNotMet()) {   printUsageToStdout();   process.exit(1); }  The reason this is problematic is because writes to process.stdout in Node.js are sometimes asynchronous and may occur over multiple ticks of the Node.js event loop. Calling process.exit(), however, forces the process to exit before those additional writes to stdout can be performed. Rather than calling process.exit() directly, the code should set the process.exitCode and allow the process to exit naturally by avoiding scheduling any additional work for the event loop: \/\/ How to properly set the exit code while letting \/\/ the process exit gracefully. if (someConditionNotMet()) {   printUsageToStdout();   process.exitCode = 1; }  If it is necessary to terminate the Node.js process due to an error condition, throwing an uncaught error and allowing the process to terminate accordingly is safer than calling process.exit(). In Worker threads, this function stops the current thread rather than the current process."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_getegid","title":"process.getegid()","description":"The process.getegid() method returns the numerical effective group identity of the Node.js process. (See getegid(2).) if (process.getegid) {   console.log(`Current gid: ${process.getegid()}`); }  This function is only available on POSIX platforms (i.e. not Windows or Android)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_geteuid","title":"process.geteuid()","description":"The process.geteuid() method returns the numerical effective user identity of the process. (See geteuid(2).) if (process.geteuid) {   console.log(`Current uid: ${process.geteuid()}`); }  This function is only available on POSIX platforms (i.e. not Windows or Android)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_getgid","title":"process.getgid()","description":"The process.getgid() method returns the numerical group identity of the process. (See getgid(2).) if (process.getgid) {   console.log(`Current gid: ${process.getgid()}`); }  This function is only available on POSIX platforms (i.e. not Windows or Android)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_getgroups","title":"process.getgroups()","description":"The process.getgroups() method returns an array with the supplementary group IDs. POSIX leaves it unspecified if the effective group ID is included but Node.js ensures it always is. This function is only available on POSIX platforms (i.e. not Windows or Android)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_getuid","title":"process.getuid()","description":"The process.getuid() method returns the numeric user identity of the process. (See getuid(2).) if (process.getuid) {   console.log(`Current uid: ${process.getuid()}`); }  This function is only available on POSIX platforms (i.e. not Windows or Android)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_hasuncaughtexceptioncapturecallback","title":"process.hasUncaughtExceptionCaptureCallback()","description":"Indicates whether a callback has been set using process.setUncaughtExceptionCaptureCallback()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_hrtime_time","title":"process.hrtime([time])","description":"The process.hrtime() method returns the current high-resolution real time in a [seconds, nanoseconds] tuple Array, where nanoseconds is the remaining part of the real time that can&#39;t be represented in second precision. time is an optional parameter that must be the result of a previous process.hrtime() call to diff with the current time. If the parameter passed in is not a tuple Array, a TypeError will be thrown. Passing in a user-defined array instead of the result of a previous call to process.hrtime() will lead to undefined behavior. These times are relative to an arbitrary time in the past, and not related to the time of day and therefore not subject to clock drift. The primary use is for measuring performance between intervals: const NS_PER_SEC = 1e9; const time = process.hrtime(); \/\/ [ 1800216, 25 ]  setTimeout(() => {   const diff = process.hrtime(time);   \/\/ [ 1, 552 ]    console.log(`Benchmark took ${diff[0] * NS_PER_SEC + diff[1]} nanoseconds`);   \/\/ benchmark took 1000000552 nanoseconds }, 1000);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_initgroups_user_extragroup","title":"process.initgroups(user, extraGroup)","description":"The process.initgroups() method reads the \/etc\/group file and initializes the group access list, using all groups of which the user is a member. This is a privileged operation that requires that the Node.js process either have root access or the CAP_SETGID capability. Note that care must be taken when dropping privileges. Example: console.log(process.getgroups());         \/\/ [ 0 ] process.initgroups(&#39;bnoordhuis&#39;, 1000);   \/\/ switch user console.log(process.getgroups());         \/\/ [ 27, 30, 46, 1000, 0 ] process.setgid(1000);                     \/\/ drop root gid console.log(process.getgroups());         \/\/ [ 27, 30, 46, 1000 ]  This function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_kill_pid_signal","title":"process.kill(pid[, signal])","description":"The process.kill() method sends the signal to the process identified by pid. Signal names are strings such as &#39;SIGINT&#39; or &#39;SIGHUP&#39;. See Signal Events and kill(2) for more information. This method will throw an error if the target pid does not exist. As a special case, a signal of 0 can be used to test for the existence of a process. Windows platforms will throw an error if the pid is used to kill a process group. Even though the name of this function is process.kill(), it is really just a signal sender, like the kill system call. The signal sent may do something other than kill the target process. process.on(&#39;SIGHUP&#39;, () => {   console.log(&#39;Got SIGHUP signal.&#39;); });  setTimeout(() => {   console.log(&#39;Exiting.&#39;);   process.exit(0); }, 100);  process.kill(process.pid, &#39;SIGHUP&#39;);  When SIGUSR1 is received by a Node.js process, Node.js will start the debugger, see Signal Events."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_memoryusage","title":"process.memoryUsage()","description":"The process.memoryUsage() method returns an object describing the memory usage of the Node.js process measured in bytes. For example, the code: console.log(process.memoryUsage());  Will generate:  {   rss: 4935680,   heapTotal: 1826816,   heapUsed: 650472,   external: 49879 }  heapTotal and heapUsed refer to V8&#39;s memory usage. external refers to the memory usage of C++ objects bound to JavaScript objects managed by V8. rss, Resident Set Size, is the amount of space occupied in the main memory device (that is a subset of the total allocated memory) for the process, which includes the heap, code segment and stack. The heap is where objects, strings, and closures are stored. Variables are stored in the stack and the actual JavaScript code resides in the code segment. When using Worker threads, rss will be a value that is valid for the entire process, while the other fields will only refer to the current thread."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_nexttick_callback_args","title":"process.nextTick(callback[, ...args])","description":"The process.nextTick() method adds the callback to the \"next tick queue\". Once the current turn of the event loop turn runs to completion, all callbacks currently in the next tick queue will be called. This is not a simple alias to setTimeout(fn, 0). It is much more efficient. It runs before any additional I\/O events (including timers) fire in subsequent ticks of the event loop. console.log(&#39;start&#39;); process.nextTick(() => {   console.log(&#39;nextTick callback&#39;); }); console.log(&#39;scheduled&#39;); \/\/ Output: \/\/ start \/\/ scheduled \/\/ nextTick callback  This is important when developing APIs in order to give users the opportunity to assign event handlers after an object has been constructed but before any I\/O has occurred: function MyThing(options) {   this.setupOptions(options);    process.nextTick(() => {     this.startDoingStuff();   }); }  const thing = new MyThing(); thing.getReadyForStuff();  \/\/ thing.startDoingStuff() gets called now, not before.  It is very important for APIs to be either 100% synchronous or 100% asynchronous. Consider this example: \/\/ WARNING!  DO NOT USE!  BAD UNSAFE HAZARD! function maybeSync(arg, cb) {   if (arg) {     cb();     return;   }    fs.stat(&#39;file&#39;, cb); }  This API is hazardous because in the following case: const maybeTrue = Math.random() > 0.5;  maybeSync(maybeTrue, () => {   foo(); });  bar();  It is not clear whether foo() or bar() will be called first. The following approach is much better: function definitelyAsync(arg, cb) {   if (arg) {     process.nextTick(cb);     return;   }    fs.stat(&#39;file&#39;, cb); }  The next tick queue is completely drained on each pass of the event loop before additional I\/O is processed. As a result, recursively setting nextTick() callbacks will block any I\/O from happening, just like a while(true); loop."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_send_message_sendhandle_options_callback","title":"process.send(message[, sendHandle[, options]][, callback])","description":"If Node.js is spawned with an IPC channel, the process.send() method can be used to send messages to the parent process. Messages will be received as a &#39;message&#39; event on the parent&#39;s ChildProcess object. If Node.js was not spawned with an IPC channel, process.send() will be undefined. The message goes through serialization and parsing. The resulting message might not be the same as what is originally sent."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_setegid_id","title":"process.setegid(id)","description":"The process.setegid() method sets the effective group identity of the process. (See setegid(2).) The id can be passed as either a numeric ID or a group name string. If a group name is specified, this method blocks while resolving the associated a numeric ID. if (process.getegid && process.setegid) {   console.log(`Current gid: ${process.getegid()}`);   try {     process.setegid(501);     console.log(`New gid: ${process.getegid()}`);   } catch (err) {     console.log(`Failed to set gid: ${err}`);   } }  This function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_seteuid_id","title":"process.seteuid(id)","description":"The process.seteuid() method sets the effective user identity of the process. (See seteuid(2).) The id can be passed as either a numeric ID or a username string. If a username is specified, the method blocks while resolving the associated numeric ID. if (process.geteuid && process.seteuid) {   console.log(`Current uid: ${process.geteuid()}`);   try {     process.seteuid(501);     console.log(`New uid: ${process.geteuid()}`);   } catch (err) {     console.log(`Failed to set uid: ${err}`);   } }  This function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_setgid_id","title":"process.setgid(id)","description":"The process.setgid() method sets the group identity of the process. (See setgid(2).) The id can be passed as either a numeric ID or a group name string. If a group name is specified, this method blocks while resolving the associated numeric ID. if (process.getgid && process.setgid) {   console.log(`Current gid: ${process.getgid()}`);   try {     process.setgid(501);     console.log(`New gid: ${process.getgid()}`);   } catch (err) {     console.log(`Failed to set gid: ${err}`);   } }  This function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_setgroups_groups","title":"process.setgroups(groups)","description":"The process.setgroups() method sets the supplementary group IDs for the Node.js process. This is a privileged operation that requires the Node.js process to have root or the CAP_SETGID capability. The groups array can contain numeric group IDs, group names or both. This function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_setuid_id","title":"process.setuid(id)","description":"The process.setuid(id) method sets the user identity of the process. (See setuid(2).) The id can be passed as either a numeric ID or a username string. If a username is specified, the method blocks while resolving the associated numeric ID. if (process.getuid && process.setuid) {   console.log(`Current uid: ${process.getuid()}`);   try {     process.setuid(501);     console.log(`New uid: ${process.getuid()}`);   } catch (err) {     console.log(`Failed to set uid: ${err}`);   } }  This function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_setuncaughtexceptioncapturecallback_fn","title":"process.setUncaughtExceptionCaptureCallback(fn)","description":"The process.setUncaughtExceptionCaptureCallback() function sets a function that will be invoked when an uncaught exception occurs, which will receive the exception value itself as its first argument. If such a function is set, the &#39;uncaughtException&#39; event will not be emitted. If --abort-on-uncaught-exception was passed from the command line or set through v8.setFlagsFromString(), the process will not abort. To unset the capture function, process.setUncaughtExceptionCaptureCallback(null) may be used. Calling this method with a non-null argument while another capture function is set will throw an error. Using this function is mutually exclusive with using the deprecated domain built-in module."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_umask_mask","title":"process.umask([mask])","description":"The process.umask() method sets or returns the Node.js process&#39;s file mode creation mask. Child processes inherit the mask from the parent process. Invoked without an argument, the current mask is returned, otherwise the umask is set to the argument value and the previous mask is returned. const newmask = 0o022; const oldmask = process.umask(newmask); console.log(   `Changed umask from ${oldmask.toString(8)} to ${newmask.toString(8)}` );  This feature is not available in Worker threads."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_uptime","title":"process.uptime()","description":"The process.uptime() method returns the number of seconds the current Node.js process has been running. The return value includes fractions of a second. Use Math.floor() to get whole seconds."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_process_events","title":"Process Events","description":"The process object is an instance of EventEmitter."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_exit_codes","title":"Exit Codes","description":"Node.js will normally exit with a 0 status code when no more async operations are pending. The following status codes are used in other cases:  1 Uncaught Fatal Exception - There was an uncaught exception, and it was not handled by a domain or an &#39;uncaughtException&#39; event handler. 2 - Unused (reserved by Bash for builtin misuse) 3 Internal JavaScript Parse Error - The JavaScript source code internal in Node.js&#39;s bootstrapping process caused a parse error. This is extremely rare, and generally can only happen during development of Node.js itself. 4 Internal JavaScript Evaluation Failure - The JavaScript source code internal in Node.js&#39;s bootstrapping process failed to return a function value when evaluated. This is extremely rare, and generally can only happen during development of Node.js itself. 5 Fatal Error - There was a fatal unrecoverable error in V8. Typically a message will be printed to stderr with the prefix FATAL ERROR. 6 Non-function Internal Exception Handler - There was an uncaught exception, but the internal fatal exception handler function was somehow set to a non-function, and could not be called. 7 Internal Exception Handler Run-Time Failure - There was an uncaught exception, and the internal fatal exception handler function itself threw an error while attempting to handle it. This can happen, for example, if an &#39;uncaughtException&#39; or domain.on(&#39;error&#39;) handler throws an error. 8 - Unused. In previous versions of Node.js, exit code 8 sometimes indicated an uncaught exception. 9 - Invalid Argument - Either an unknown option was specified, or an option requiring a value was provided without a value. 10 Internal JavaScript Run-Time Failure - The JavaScript source code internal in Node.js&#39;s bootstrapping process threw an error when the bootstrapping function was called. This is extremely rare, and generally can only happen during development of Node.js itself. 12 Invalid Debug Argument - The --inspect and\/or --inspect-brk options were set, but the port number chosen was invalid or unavailable. >128 Signal Exits - If Node.js receives a fatal signal such as SIGKILL or SIGHUP, then its exit code will be 128 plus the value of the signal code. This is a standard POSIX practice, since exit codes are defined to be 7-bit integers, and signal exits set the high-order bit, and then contain the value of the signal code. For example, signal SIGABRT has value 6, so the expected exit code will be 128 + 6, or 134."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_require","title":"require()","description":"This variable may appear to be global but is not. See require()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all___dirname","title":"\\_\\_dirname","description":"This variable may appear to be global but is not. See __dirname."},{"url":"http:\/\/nodejs.org\/api\/all.html#all___filename","title":"\\_\\_filename","description":"This variable may appear to be global but is not. See __filename."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_exports","title":"exports","description":"This variable may appear to be global but is not. See exports."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_module","title":"module","description":"This variable may appear to be global but is not. See module."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_internationalization_support","title":"Internationalization Support","description":"Node.js has many features that make it easier to write internationalized programs. Some of them are:  Locale-sensitive or Unicode-aware functions in the ECMAScript Language Specification: String.prototype.normalize() String.prototype.toLowerCase() String.prototype.toUpperCase()   All functionality described in the ECMAScript Internationalization API Specification (aka ECMA-402): Intl object Locale-sensitive methods like String.prototype.localeCompare() and Date.prototype.toLocaleString()   The WHATWG URL parser&#39;s internationalized domain names (IDNs) support require(&#39;buffer&#39;).transcode() More accurate REPL line editing require(&#39;util&#39;).TextDecoder RegExp Unicode Property Escapes  Node.js (and its underlying V8 engine) uses ICU to implement these features in native C\/C++ code. However, some of them require a very large ICU data file in order to support all locales of the world. Because it is expected that most Node.js users will make use of only a small portion of ICU functionality, only a subset of the full ICU data set is provided by Node.js by default. Several options are provided for customizing and expanding the ICU data set either when building or running Node.js."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_options_for_building_node_js","title":"Options for building Node.js","description":"To control how ICU is used in Node.js, four configure options are available during compilation. Additional details on how to compile Node.js are documented in BUILDING.md.  --with-intl=none\/--without-intl --with-intl=system-icu --with-intl=small-icu (default) --with-intl=full-icu  An overview of available Node.js and JavaScript features for each configure option:     none system-icu small-icu full-icu     String.prototype.normalize() none (function is no-op) full full full   String.prototype.to*Case() full full full full   Intl none (object does not exist) partial\/full (depends on OS) partial (English-only) full   String.prototype.localeCompare() partial (not locale-aware) full full full   String.prototype.toLocale*Case() partial (not locale-aware) full full full   Number.prototype.toLocaleString() partial (not locale-aware) partial\/full (depends on OS) partial (English-only) full   Date.prototype.toLocale*String() partial (not locale-aware) partial\/full (depends on OS) partial (English-only) full   WHATWG URL Parser partial (no IDN support) full full full   require(&#39;buffer&#39;).transcode() none (function does not exist) full full full   REPL partial (inaccurate line editing) full full full   require(&#39;util&#39;).TextDecoder partial (basic encodings support) partial\/full (depends on OS) partial (Unicode-only) full   RegExp Unicode Property Escapes none (invalid RegExp error) full full full    The \"(not locale-aware)\" designation denotes that the function carries out its operation just like the non-Locale version of the function, if one exists. For example, under none mode, Date.prototype.toLocaleString()&#39;s operation is identical to that of Date.prototype.toString()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_disable_all_internationalization_features_none","title":"Disable all internationalization features (`none`)","description":"If this option is chosen, most internationalization features mentioned above will be unavailable in the resulting node binary."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_build_with_a_pre_installed_icu_system_icu","title":"Build with a pre-installed ICU (`system-icu`)","description":"Node.js can link against an ICU build already installed on the system. In fact, most Linux distributions already come with ICU installed, and this option would make it possible to reuse the same set of data used by other components in the OS. Functionalities that only require the ICU library itself, such as String.prototype.normalize() and the WHATWG URL parser, are fully supported under system-icu. Features that require ICU locale data in addition, such as Intl.DateTimeFormat may be fully or partially supported, depending on the completeness of the ICU data installed on the system."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_embed_a_limited_set_of_icu_data_small_icu","title":"Embed a limited set of ICU data (`small-icu`)","description":"This option makes the resulting binary link against the ICU library statically, and includes a subset of ICU data (typically only the English locale) within the node executable. Functionalities that only require the ICU library itself, such as String.prototype.normalize() and the WHATWG URL parser, are fully supported under small-icu. Features that require ICU locale data in addition, such as Intl.DateTimeFormat, generally only work with the English locale: const january = new Date(9e8); const english = new Intl.DateTimeFormat(&#39;en&#39;, { month: &#39;long&#39; }); const spanish = new Intl.DateTimeFormat(&#39;es&#39;, { month: &#39;long&#39; });  console.log(english.format(january)); \/\/ Prints \"January\" console.log(spanish.format(january)); \/\/ Prints \"M01\" on small-icu \/\/ Should print \"enero\"  This mode provides a good balance between features and binary size, and it is the default behavior if no --with-intl flag is passed. The official binaries are also built in this mode."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_providing_icu_data_at_runtime","title":"Providing ICU data at runtime","description":"If the small-icu option is used, one can still provide additional locale data at runtime so that the JS methods would work for all ICU locales. Assuming the data file is stored at \/some\/directory, it can be made available to ICU through either:  The NODE_ICU_DATA environment variable: env NODE_ICU_DATA=\/some\/directory node   The --icu-data-dir CLI parameter: node --icu-data-dir=\/some\/directory    (If both are specified, the --icu-data-dir CLI parameter takes precedence.) ICU is able to automatically find and load a variety of data formats, but the data must be appropriate for the ICU version, and the file correctly named. The most common name for the data file is icudt5X[bl].dat, where 5X denotes the intended ICU version, and b or l indicates the system&#39;s endianness. Check \"ICU Data\" article in the ICU User Guide for other supported formats and more details on ICU data in general. The full-icu npm module can greatly simplify ICU data installation by detecting the ICU version of the running node executable and downloading the appropriate data file. After installing the module through npm i full-icu, the data file will be available at .\/node_modules\/full-icu. This path can be then passed either to NODE_ICU_DATA or --icu-data-dir as shown above to enable full Intl support."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_embed_the_entire_icu_full_icu","title":"Embed the entire ICU (`full-icu`)","description":"This option makes the resulting binary link against ICU statically and include a full set of ICU data. A binary created this way has no further external dependencies and supports all locales, but might be rather large. See BUILDING.md on how to compile a binary using this mode."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_detecting_internationalization_support","title":"Detecting internationalization support","description":"To verify that ICU is enabled at all (system-icu, small-icu, or full-icu), simply checking the existence of Intl should suffice: const hasICU = typeof Intl === &#39;object&#39;;  Alternatively, checking for process.versions.icu, a property defined only when ICU is enabled, works too: const hasICU = typeof process.versions.icu === &#39;string&#39;;  To check for support for a non-English locale (i.e. full-icu or system-icu), Intl.DateTimeFormat can be a good distinguishing factor: const hasFullICU = (() => {   try {     const january = new Date(9e8);     const spanish = new Intl.DateTimeFormat(&#39;es&#39;, { month: &#39;long&#39; });     return spanish.format(january) === &#39;enero&#39;;   } catch (err) {     return false;   } })();  For more verbose tests for Intl support, the following resources may be found to be helpful:  btest402: Generally used to check whether Node.js with Intl support is built correctly. Test262: ECMAScript&#39;s official conformance test suite includes a section dedicated to ECMA-402."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert","title":"Assert","description":"The assert module provides a simple set of assertion tests that can be used to test invariants. A strict and a legacy mode exist, while it is recommended to only use strict mode. For more information about the used equality comparisons see MDN&#39;s guide on equality comparisons and sameness."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_value_message","title":"assert(value[, message])","description":"An alias of assert.ok()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_deepequal_actual_expected_message","title":"assert.deepEqual(actual, expected[, message])","description":"Strict mode An alias of assert.deepStrictEqual(). Legacy mode  Stability: 0 - Deprecated: Use assert.deepStrictEqual() instead.  Tests for deep equality between the actual and expected parameters. Primitive values are compared with the Abstract Equality Comparison ( == ). Only enumerable \"own\" properties are considered. The assert.deepEqual() implementation does not test the [[Prototype]] of objects or enumerable own Symbol properties. For such checks, consider using assert.deepStrictEqual() instead. assert.deepEqual() can have potentially surprising results. The following example does not throw an AssertionError because the properties on the RegExp object are not enumerable: \/\/ WARNING: This does not throw an AssertionError! assert.deepEqual(\/a\/gi, new Date());  An exception is made for Map and Set. Maps and Sets have their contained items compared too, as expected. \"Deep\" equality means that the enumerable \"own\" properties of child objects are evaluated also: const assert = require(&#39;assert&#39;);  const obj1 = {   a: {     b: 1   } }; const obj2 = {   a: {     b: 2   } }; const obj3 = {   a: {     b: 1   } }; const obj4 = Object.create(obj1);  assert.deepEqual(obj1, obj1); \/\/ OK  \/\/ Values of b are different: assert.deepEqual(obj1, obj2); \/\/ AssertionError: { a: { b: 1 } } deepEqual { a: { b: 2 } }  assert.deepEqual(obj1, obj3); \/\/ OK  \/\/ Prototypes are ignored: assert.deepEqual(obj1, obj4); \/\/ AssertionError: { a: { b: 1 } } deepEqual {}  If the values are not equal, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_deepstrictequal_actual_expected_message","title":"assert.deepStrictEqual(actual, expected[, message])","description":"Tests for deep equality between the actual and expected parameters. \"Deep\" equality means that the enumerable \"own\" properties of child objects are recursively evaluated also by the following rules."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_comparison_details","title":"Comparison details","description":"Primitive values are compared using the SameValue Comparison, used by Object.is(). Type tags of objects should be the same. [[Prototype]] of objects are compared using the Strict Equality Comparison. Only enumerable \"own\" properties are considered. Error names and messages are always compared, even if these are not enumerable properties. Enumerable own Symbol properties are compared as well. Object wrappers are compared both as objects and unwrapped values. Object properties are compared unordered. Map keys and Set items are compared unordered. Recursion stops when both sides differ or both sides encounter a circular reference. WeakMap and WeakSet comparison does not rely on their values. See below for further details.  const assert = require(&#39;assert&#39;).strict;  \/\/ This fails because 1 !== &#39;1&#39;. assert.deepStrictEqual({ a: 1 }, { a: &#39;1&#39; }); \/\/ AssertionError: Input A expected to strictly deep-equal input B: \/\/ + expected - actual \/\/   { \/\/ -   a: 1 \/\/ +   a: &#39;1&#39; \/\/   }  \/\/ The following objects don&#39;t have own properties const date = new Date(); const object = {}; const fakeDate = {}; Object.setPrototypeOf(fakeDate, Date.prototype);  \/\/ Different [[Prototype]]: assert.deepStrictEqual(object, fakeDate); \/\/ AssertionError: Input A expected to strictly deep-equal input B: \/\/ + expected - actual \/\/ - {} \/\/ + Date {}  \/\/ Different type tags: assert.deepStrictEqual(date, fakeDate); \/\/ AssertionError: Input A expected to strictly deep-equal input B: \/\/ + expected - actual \/\/ - 2018-04-26T00:49:08.604Z \/\/ + Date {}  assert.deepStrictEqual(NaN, NaN); \/\/ OK, because of the SameValue comparison  \/\/ Different unwrapped numbers: assert.deepStrictEqual(new Number(1), new Number(2)); \/\/ AssertionError: Input A expected to strictly deep-equal input B: \/\/ + expected - actual \/\/ - [Number: 1] \/\/ + [Number: 2]  assert.deepStrictEqual(new String(&#39;foo&#39;), Object(&#39;foo&#39;)); \/\/ OK because the object and the string are identical when unwrapped.  assert.deepStrictEqual(-0, -0); \/\/ OK  \/\/ Different zeros using the SameValue Comparison: assert.deepStrictEqual(0, -0); \/\/ AssertionError: Input A expected to strictly deep-equal input B: \/\/ + expected - actual \/\/ - 0 \/\/ + -0  const symbol1 = Symbol(); const symbol2 = Symbol(); assert.deepStrictEqual({ [symbol1]: 1 }, { [symbol1]: 1 }); \/\/ OK, because it is the same symbol on both objects. assert.deepStrictEqual({ [symbol1]: 1 }, { [symbol2]: 1 }); \/\/ AssertionError [ERR_ASSERTION]: Input objects not identical: \/\/ { \/\/   [Symbol()]: 1 \/\/ }  const weakMap1 = new WeakMap(); const weakMap2 = new WeakMap([[{}, {}]]); const weakMap3 = new WeakMap(); weakMap3.unequal = true;  assert.deepStrictEqual(weakMap1, weakMap2); \/\/ OK, because it is impossible to compare the entries  \/\/ Fails because weakMap3 has a property that weakMap1 does not contain: assert.deepStrictEqual(weakMap1, weakMap3); \/\/ AssertionError: Input A expected to strictly deep-equal input B: \/\/ + expected - actual \/\/   WeakMap { \/\/ -   [items unknown] \/\/ +   [items unknown], \/\/ +   unequal: true \/\/   }  If the values are not equal, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_doesnotreject_block_error_message","title":"assert.doesNotReject(block[, error][, message])","description":"Awaits the block promise or, if block is a function, immediately calls the function and awaits the returned promise to complete. It will then check that the promise is not rejected. If block is a function and it throws an error synchronously, assert.doesNotReject() will return a rejected Promise with that error. If the function does not return a promise, assert.doesNotReject() will return a rejected Promise with an ERR_INVALID_RETURN_VALUE error. In both cases the error handler is skipped. Please note: Using assert.doesNotReject() is actually not useful because there is little benefit by catching a rejection and then rejecting it again. Instead, consider adding a comment next to the specific code path that should not reject and keep error messages as expressive as possible. If specified, error can be a Class, RegExp or a validation function. See assert.throws() for more details. Besides the async nature to await the completion behaves identically to assert.doesNotThrow(). (async () => {   await assert.doesNotReject(     async () => {       throw new TypeError(&#39;Wrong value&#39;);     },     SyntaxError   ); })();  assert.doesNotReject(Promise.reject(new TypeError(&#39;Wrong value&#39;)))   .then(() => {     \/\/ ...   });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_doesnotthrow_block_error_message","title":"assert.doesNotThrow(block[, error][, message])","description":"Asserts that the function block does not throw an error. Please note: Using assert.doesNotThrow() is actually not useful because there is no benefit by catching an error and then rethrowing it. Instead, consider adding a comment next to the specific code path that should not throw and keep error messages as expressive as possible. When assert.doesNotThrow() is called, it will immediately call the block function. If an error is thrown and it is the same type as that specified by the error parameter, then an AssertionError is thrown. If the error is of a different type, or if the error parameter is undefined, the error is propagated back to the caller. If specified, error can be a Class, RegExp or a validation function. See assert.throws() for more details. The following, for instance, will throw the TypeError because there is no matching error type in the assertion:  assert.doesNotThrow(   () => {     throw new TypeError(&#39;Wrong value&#39;);   },   SyntaxError );  However, the following will result in an AssertionError with the message &#39;Got unwanted exception...&#39;:  assert.doesNotThrow(   () => {     throw new TypeError(&#39;Wrong value&#39;);   },   TypeError );  If an AssertionError is thrown and a value is provided for the message parameter, the value of message will be appended to the AssertionError message:  assert.doesNotThrow(   () => {     throw new TypeError(&#39;Wrong value&#39;);   },   \/Wrong value\/,   &#39;Whoops&#39; ); \/\/ Throws: AssertionError: Got unwanted exception: Whoops"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_equal_actual_expected_message","title":"assert.equal(actual, expected[, message])","description":"Strict mode An alias of assert.strictEqual(). Legacy mode  Stability: 0 - Deprecated: Use assert.strictEqual() instead.  Tests shallow, coercive equality between the actual and expected parameters using the Abstract Equality Comparison ( == ). const assert = require(&#39;assert&#39;);  assert.equal(1, 1); \/\/ OK, 1 == 1 assert.equal(1, &#39;1&#39;); \/\/ OK, 1 == &#39;1&#39;  assert.equal(1, 2); \/\/ AssertionError: 1 == 2 assert.equal({ a: { b: 1 } }, { a: { b: 1 } }); \/\/ AssertionError: { a: { b: 1 } } == { a: { b: 1 } }  If the values are not equal, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_fail_message","title":"assert.fail([message])","description":"Throws an AssertionError with the provided error message or a default error message. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError. const assert = require(&#39;assert&#39;).strict;  assert.fail(); \/\/ AssertionError [ERR_ASSERTION]: Failed  assert.fail(&#39;boom&#39;); \/\/ AssertionError [ERR_ASSERTION]: boom  assert.fail(new TypeError(&#39;need array&#39;)); \/\/ TypeError: need array  Using assert.fail() with more than two arguments is possible but deprecated. See below for further details."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_fail_actual_expected_message_operator_stackstartfunction","title":"assert.fail(actual, expected[, message[, operator[, stackStartFunction]]])","description":"Stability: 0 - Deprecated: Use assert.fail([message]) or other assert functions instead. If message is falsy, the error message is set as the values of actual and expected separated by the provided operator. If just the two actual and expected arguments are provided, operator will default to &#39;!=&#39;. If message is provided as third argument it will be used as the error message and the other arguments will be stored as properties on the thrown object. If stackStartFunction is provided, all stack frames above that function will be removed from stacktrace (see Error.captureStackTrace). If no arguments are given, the default message Failed will be used. const assert = require(&#39;assert&#39;).strict;  assert.fail(&#39;a&#39;, &#39;b&#39;); \/\/ AssertionError [ERR_ASSERTION]: &#39;a&#39; != &#39;b&#39;  assert.fail(1, 2, undefined, &#39;>&#39;); \/\/ AssertionError [ERR_ASSERTION]: 1 > 2  assert.fail(1, 2, &#39;fail&#39;); \/\/ AssertionError [ERR_ASSERTION]: fail  assert.fail(1, 2, &#39;whoops&#39;, &#39;>&#39;); \/\/ AssertionError [ERR_ASSERTION]: whoops  assert.fail(1, 2, new TypeError(&#39;need array&#39;)); \/\/ TypeError: need array  In the last three cases actual, expected, and operator have no influence on the error message. Example use of stackStartFunction for truncating the exception&#39;s stacktrace: function suppressFrame() {   assert.fail(&#39;a&#39;, &#39;b&#39;, undefined, &#39;!==&#39;, suppressFrame); } suppressFrame(); \/\/ AssertionError [ERR_ASSERTION]: &#39;a&#39; !== &#39;b&#39; \/\/     at repl:1:1 \/\/     at ContextifyScript.Script.runInThisContext (vm.js:44:33) \/\/     ..."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_iferror_value","title":"assert.ifError(value)","description":"Throws value if value is not undefined or null. This is useful when testing the error argument in callbacks. The stack trace contains all frames from the error passed to ifError() including the potential new frames for ifError() itself. See below for an example. const assert = require(&#39;assert&#39;).strict;  assert.ifError(null); \/\/ OK assert.ifError(0); \/\/ AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 0 assert.ifError(&#39;error&#39;); \/\/ AssertionError [ERR_ASSERTION]: ifError got unwanted exception: &#39;error&#39; assert.ifError(new Error()); \/\/ AssertionError [ERR_ASSERTION]: ifError got unwanted exception: Error  \/\/ Create some random error frames. let err; (function errorFrame() {   err = new Error(&#39;test error&#39;); })();  (function ifErrorFrame() {   assert.ifError(err); })(); \/\/ AssertionError [ERR_ASSERTION]: ifError got unwanted exception: test error \/\/     at ifErrorFrame \/\/     at errorFrame"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_notdeepequal_actual_expected_message","title":"assert.notDeepEqual(actual, expected[, message])","description":"Strict mode An alias of assert.notDeepStrictEqual(). Legacy mode  Stability: 0 - Deprecated: Use assert.notDeepStrictEqual() instead.  Tests for any deep inequality. Opposite of assert.deepEqual(). const assert = require(&#39;assert&#39;);  const obj1 = {   a: {     b: 1   } }; const obj2 = {   a: {     b: 2   } }; const obj3 = {   a: {     b: 1   } }; const obj4 = Object.create(obj1);  assert.notDeepEqual(obj1, obj1); \/\/ AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }  assert.notDeepEqual(obj1, obj2); \/\/ OK  assert.notDeepEqual(obj1, obj3); \/\/ AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }  assert.notDeepEqual(obj1, obj4); \/\/ OK  If the values are deeply equal, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_notdeepstrictequal_actual_expected_message","title":"assert.notDeepStrictEqual(actual, expected[, message])","description":"Tests for deep strict inequality. Opposite of assert.deepStrictEqual(). const assert = require(&#39;assert&#39;).strict;  assert.notDeepStrictEqual({ a: 1 }, { a: &#39;1&#39; }); \/\/ OK  If the values are deeply and strictly equal, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_notequal_actual_expected_message","title":"assert.notEqual(actual, expected[, message])","description":"Strict mode An alias of assert.notStrictEqual(). Legacy mode  Stability: 0 - Deprecated: Use assert.notStrictEqual() instead.  Tests shallow, coercive inequality with the Abstract Equality Comparison ( != ). const assert = require(&#39;assert&#39;);  assert.notEqual(1, 2); \/\/ OK  assert.notEqual(1, 1); \/\/ AssertionError: 1 != 1  assert.notEqual(1, &#39;1&#39;); \/\/ AssertionError: 1 != &#39;1&#39;  If the values are equal, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_notstrictequal_actual_expected_message","title":"assert.notStrictEqual(actual, expected[, message])","description":"Tests strict inequality between the actual and expected parameters as determined by the SameValue Comparison. const assert = require(&#39;assert&#39;).strict;  assert.notStrictEqual(1, 2); \/\/ OK  assert.notStrictEqual(1, 1); \/\/ AssertionError [ERR_ASSERTION]: Identical input passed to notStrictEqual: 1  assert.notStrictEqual(1, &#39;1&#39;); \/\/ OK  If the values are strictly equal, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_ok_value_message","title":"assert.ok(value[, message])","description":"Tests if value is truthy. It is equivalent to assert.equal(!!value, true, message). If value is not truthy, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError. If no arguments are passed in at all message will be set to the string: &#39;No value argument passed to `assert.ok()`&#39;. Be aware that in the repl the error message will be different to the one thrown in a file! See below for further details. const assert = require(&#39;assert&#39;).strict;  assert.ok(true); \/\/ OK assert.ok(1); \/\/ OK  assert.ok(); \/\/ AssertionError: No value argument passed to `assert.ok()`  assert.ok(false, &#39;it\\&#39;s false&#39;); \/\/ AssertionError: it&#39;s false  \/\/ In the repl: assert.ok(typeof 123 === &#39;string&#39;); \/\/ AssertionError: false == true  \/\/ In a file (e.g. test.js): assert.ok(typeof 123 === &#39;string&#39;); \/\/ AssertionError: The expression evaluated to a falsy value: \/\/ \/\/   assert.ok(typeof 123 === &#39;string&#39;)  assert.ok(false); \/\/ AssertionError: The expression evaluated to a falsy value: \/\/ \/\/   assert.ok(false)  assert.ok(0); \/\/ AssertionError: The expression evaluated to a falsy value: \/\/ \/\/   assert.ok(0)  \/\/ Using `assert()` works the same: assert(0); \/\/ AssertionError: The expression evaluated to a falsy value: \/\/ \/\/   assert(0)"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_rejects_block_error_message","title":"assert.rejects(block[, error][, message])","description":"Awaits the block promise or, if block is a function, immediately calls the function and awaits the returned promise to complete. It will then check that the promise is rejected. If block is a function and it throws an error synchronously, assert.rejects() will return a rejected Promise with that error. If the function does not return a promise, assert.rejects() will return a rejected Promise with an ERR_INVALID_RETURN_VALUE error. In both cases the error handler is skipped. Besides the async nature to await the completion behaves identically to assert.throws(). If specified, error can be a Class, RegExp, a validation function, an object where each property will be tested for, or an instance of error where each property will be tested for including the non-enumerable message and name properties. If specified, message will be the message provided by the AssertionError if the block fails to reject. (async () => {   await assert.rejects(     async () => {       throw new TypeError(&#39;Wrong value&#39;);     },     {       name: &#39;TypeError&#39;,       message: &#39;Wrong value&#39;     }   ); })();  assert.rejects(   Promise.reject(new Error(&#39;Wrong value&#39;)),   Error ).then(() => {   \/\/ ... });  Note that error cannot be a string. If a string is provided as the second argument, then error is assumed to be omitted and the string will be used for message instead. This can lead to easy-to-miss mistakes. Please read the example in assert.throws() carefully if using a string as the second argument gets considered."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_strictequal_actual_expected_message","title":"assert.strictEqual(actual, expected[, message])","description":"Tests strict equality between the actual and expected parameters as determined by the SameValue Comparison. const assert = require(&#39;assert&#39;).strict;  assert.strictEqual(1, 2); \/\/ AssertionError [ERR_ASSERTION]: Input A expected to strictly equal input B: \/\/ + expected - actual \/\/ - 1 \/\/ + 2  assert.strictEqual(1, 1); \/\/ OK  assert.strictEqual(1, &#39;1&#39;); \/\/ AssertionError [ERR_ASSERTION]: Input A expected to strictly equal input B: \/\/ + expected - actual \/\/ - 1 \/\/ + &#39;1&#39;  If the values are not strictly equal, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assert_throws_block_error_message","title":"assert.throws(block[, error][, message])","description":"Expects the function block to throw an error. If specified, error can be a Class, RegExp, a validation function, a validation object where each property will be tested for strict deep equality, or an instance of error where each property will be tested for strict deep equality including the non-enumerable message and name properties. When using an object, it is also possible to use a regular expression, when validating against a string property. See below for examples. If specified, message will be the message provided by the AssertionError if the block fails to throw. Custom validation object\/error instance: const err = new TypeError(&#39;Wrong value&#39;); err.code = 404; err.foo = &#39;bar&#39;; err.info = {   nested: true,   baz: &#39;text&#39; }; err.reg = \/abc\/i;  assert.throws(   () => {     throw err;   },   {     name: &#39;TypeError&#39;,     message: &#39;Wrong value&#39;,     info: {       nested: true,       baz: &#39;text&#39;     }     \/\/ Note that only properties on the validation object will be tested for.     \/\/ Using nested objects requires all properties to be present. Otherwise     \/\/ the validation is going to fail.   } );  \/\/ Using regular expressions to validate error properties: assert.throws(   () => {     throw err;   },   {     \/\/ The `name` and `message` properties are strings and using regular     \/\/ expressions on those will match against the string. If they fail, an     \/\/ error is thrown.     name: \/^TypeError$\/,     message: \/Wrong\/,     foo: &#39;bar&#39;,     info: {       nested: true,       \/\/ It is not possible to use regular expressions for nested properties!       baz: &#39;text&#39;     },     \/\/ The `reg` property contains a regular expression and only if the     \/\/ validation object contains an identical regular expression, it is going     \/\/ to pass.     reg: \/abc\/i   } );  \/\/ Fails due to the different `message` and `name` properties: assert.throws(   () => {     const otherErr = new Error(&#39;Not found&#39;);     otherErr.code = 404;     throw otherErr;   },   err \/\/ This tests for `message`, `name` and `code`. );  Validate instanceof using constructor: assert.throws(   () => {     throw new Error(&#39;Wrong value&#39;);   },   Error );  Validate error message using RegExp: Using a regular expression runs .toString on the error object, and will therefore also include the error name. assert.throws(   () => {     throw new Error(&#39;Wrong value&#39;);   },   \/^Error: Wrong value$\/ );  Custom error validation: assert.throws(   () => {     throw new Error(&#39;Wrong value&#39;);   },   function(err) {     if ((err instanceof Error) && \/value\/.test(err)) {       return true;     }   },   &#39;unexpected error&#39; );  Note that error cannot be a string. If a string is provided as the second argument, then error is assumed to be omitted and the string will be used for message instead. This can lead to easy-to-miss mistakes. Using the same message as the thrown error message is going to result in an ERR_AMBIGUOUS_ARGUMENT error. Please read the example below carefully if using a string as the second argument gets considered:  function throwingFirst() {   throw new Error(&#39;First&#39;); } function throwingSecond() {   throw new Error(&#39;Second&#39;); } function notThrowing() {}  \/\/ The second argument is a string and the input function threw an Error. \/\/ The first case will not throw as it does not match for the error message \/\/ thrown by the input function! assert.throws(throwingFirst, &#39;Second&#39;); \/\/ In the next example the message has no benefit over the message from the \/\/ error and since it is not clear if the user intended to actually match \/\/ against the error message, Node.js thrown an `ERR_AMBIGUOUS_ARGUMENT` error. assert.throws(throwingSecond, &#39;Second&#39;); \/\/ Throws an error: \/\/ TypeError [ERR_AMBIGUOUS_ARGUMENT]  \/\/ The string is only used (as message) in case the function does not throw: assert.throws(notThrowing, &#39;Second&#39;); \/\/ AssertionError [ERR_ASSERTION]: Missing expected exception: Second  \/\/ If it was intended to match for the error message do this instead: assert.throws(throwingSecond, \/Second$\/); \/\/ Does not throw because the error messages match. assert.throws(throwingFirst, \/Second$\/); \/\/ Throws an error: \/\/ Error: First \/\/     at throwingFirst (repl:2:9)  Due to the confusing notation, it is recommended not to use a string as the second argument. This might lead to difficult-to-spot errors."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_strict_mode","title":"Strict mode","description":"When using the strict mode, any assert function will use the equality used in the strict function mode. So assert.deepEqual() will, for example, work the same as assert.deepStrictEqual(). On top of that, error messages which involve objects produce an error diff instead of displaying both objects. That is not the case for the legacy mode. It can be accessed using: const assert = require(&#39;assert&#39;).strict;  Example error diff: const assert = require(&#39;assert&#39;).strict;  assert.deepEqual([[[1, 2, 3]], 4, 5], [[[1, 2, &#39;3&#39;]], 4, 5]); \/\/ AssertionError: Input A expected to strictly deep-equal input B: \/\/ + expected - actual ... Lines skipped \/\/ \/\/   [ \/\/     [ \/\/ ... \/\/       2, \/\/ -     3 \/\/ +     &#39;3&#39; \/\/     ], \/\/ ... \/\/     5 \/\/   ]  To deactivate the colors, use the NODE_DISABLE_COLORS environment variable. Please note that this will also deactivate the colors in the REPL."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_legacy_mode","title":"Legacy mode","description":"When accessing assert directly instead of using the strict property, the Abstract Equality Comparison will be used for any function without \"strict\" in its name, such as assert.deepEqual(). It can be accessed using: const assert = require(&#39;assert&#39;);  It is recommended to use the strict mode instead as the Abstract Equality Comparison can often have surprising results. This is especially true for assert.deepEqual(), where the comparison rules are lax: \/\/ WARNING: This does not throw an AssertionError! assert.deepEqual(\/a\/gi, new Date());"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_async_hooks","title":"Async Hooks","description":"The async_hooks module provides an API to register callbacks tracking the lifetime of asynchronous resources created inside a Node.js application. It can be accessed using: const async_hooks = require(&#39;async_hooks&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_terminology","title":"Terminology","description":"An asynchronous resource represents an object with an associated callback. This callback may be called multiple times, for example, the &#39;connection&#39; event in net.createServer(), or just a single time like in fs.open(). A resource can also be closed before the callback is called. AsyncHook does not explicitly distinguish between these different cases but will represent them as the abstract concept that is a resource. If Workers are used, each thread has an independent async_hooks interface, and each thread will use a new set of async IDs."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_public_api","title":"Public API","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_overview","title":"Overview","description":"Following is a simple overview of the public API. const async_hooks = require(&#39;async_hooks&#39;);  \/\/ Return the ID of the current execution context. const eid = async_hooks.executionAsyncId();  \/\/ Return the ID of the handle responsible for triggering the callback of the \/\/ current execution scope to call. const tid = async_hooks.triggerAsyncId();  \/\/ Create a new AsyncHook instance. All of these callbacks are optional. const asyncHook =     async_hooks.createHook({ init, before, after, destroy, promiseResolve });  \/\/ Allow callbacks of this AsyncHook instance to call. This is not an implicit \/\/ action after running the constructor, and must be explicitly run to begin \/\/ executing callbacks. asyncHook.enable();  \/\/ Disable listening for new asynchronous events. asyncHook.disable();  \/\/ \/\/ The following are the callbacks that can be passed to createHook(). \/\/  \/\/ init is called during object construction. The resource may not have \/\/ completed construction when this callback runs, therefore all fields of the \/\/ resource referenced by \"asyncId\" may not have been populated. function init(asyncId, type, triggerAsyncId, resource) { }  \/\/ before is called just before the resource&#39;s callback is called. It can be \/\/ called 0-N times for handles (e.g. TCPWrap), and will be called exactly 1 \/\/ time for requests (e.g. FSReqWrap). function before(asyncId) { }  \/\/ after is called just after the resource&#39;s callback has finished. function after(asyncId) { }  \/\/ destroy is called when an AsyncWrap instance is destroyed. function destroy(asyncId) { }  \/\/ promiseResolve is called only for promise resources, when the \/\/ `resolve` function passed to the `Promise` constructor is invoked \/\/ (either directly or through other means of resolving a promise). function promiseResolve(asyncId) { }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_async_hooks_createhook_callbacks","title":"async_hooks.createHook(callbacks)","description":"Registers functions to be called for different lifetime events of each async operation. The callbacks init()\/before()\/after()\/destroy() are called for the respective asynchronous event during a resource&#39;s lifetime. All callbacks are optional. For example, if only resource cleanup needs to be tracked, then only the destroy callback needs to be passed. The specifics of all functions that can be passed to callbacks is in the Hook Callbacks section. const async_hooks = require(&#39;async_hooks&#39;);  const asyncHook = async_hooks.createHook({   init(asyncId, type, triggerAsyncId, resource) { },   destroy(asyncId) { } });  Note that the callbacks will be inherited via the prototype chain: class MyAsyncCallbacks {   init(asyncId, type, triggerAsyncId, resource) { }   destroy(asyncId) {} }  class MyAddedCallbacks extends MyAsyncCallbacks {   before(asyncId) { }   after(asyncId) { } }  const asyncHook = async_hooks.createHook(new MyAddedCallbacks());"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_error_handling","title":"Error Handling","description":"If any AsyncHook callbacks throw, the application will print the stack trace and exit. The exit path does follow that of an uncaught exception, but all &#39;uncaughtException&#39; listeners are removed, thus forcing the process to exit. The &#39;exit&#39; callbacks will still be called unless the application is run with --abort-on-uncaught-exception, in which case a stack trace will be printed and the application exits, leaving a core file. The reason for this error handling behavior is that these callbacks are running at potentially volatile points in an object&#39;s lifetime, for example during class construction and destruction. Because of this, it is deemed necessary to bring down the process quickly in order to prevent an unintentional abort in the future. This is subject to change in the future if a comprehensive analysis is performed to ensure an exception can follow the normal control flow without unintentional side effects."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_printing_in_asynchooks_callbacks","title":"Printing in AsyncHooks callbacks","description":"Because printing to the console is an asynchronous operation, console.log() will cause the AsyncHooks callbacks to be called. Using console.log() or similar asynchronous operations inside an AsyncHooks callback function will thus cause an infinite recursion. An easy solution to this when debugging is to use a synchronous logging operation such as fs.writeSync(1, msg). This will print to stdout because 1 is the file descriptor for stdout and will not invoke AsyncHooks recursively because it is synchronous. const fs = require(&#39;fs&#39;); const util = require(&#39;util&#39;);  function debug(...args) {   \/\/ use a function like this one when debugging inside an AsyncHooks callback   fs.writeSync(1, `${util.format(...args)}\\n`); }  If an asynchronous operation is needed for logging, it is possible to keep track of what caused the asynchronous operation using the information provided by AsyncHooks itself. The logging should then be skipped when it was the logging itself that caused AsyncHooks callback to call. By doing this the otherwise infinite recursion is broken."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_asynchook_enable","title":"asyncHook.enable()","description":"Enable the callbacks for a given AsyncHook instance. If no callbacks are provided enabling is a noop. The AsyncHook instance is disabled by default. If the AsyncHook instance should be enabled immediately after creation, the following pattern can be used. const async_hooks = require(&#39;async_hooks&#39;);  const hook = async_hooks.createHook(callbacks).enable();"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_asynchook_disable","title":"asyncHook.disable()","description":"Disable the callbacks for a given AsyncHook instance from the global pool of AsyncHook callbacks to be executed. Once a hook has been disabled it will not be called again until enabled. For API consistency disable() also returns the AsyncHook instance."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_async_hooks_executionasyncid","title":"async_hooks.executionAsyncId()","description":"const async_hooks = require(&#39;async_hooks&#39;);  console.log(async_hooks.executionAsyncId());  \/\/ 1 - bootstrap fs.open(path, &#39;r&#39;, (err, fd) => {   console.log(async_hooks.executionAsyncId());  \/\/ 6 - open() });  The ID returned from executionAsyncId() is related to execution timing, not causality (which is covered by triggerAsyncId()): const server = net.createServer(function onConnection(conn) {   \/\/ Returns the ID of the server, not of the new connection, because the   \/\/ onConnection callback runs in the execution scope of the server&#39;s   \/\/ MakeCallback().   async_hooks.executionAsyncId();  }).listen(port, function onListening() {   \/\/ Returns the ID of a TickObject (i.e. process.nextTick()) because all   \/\/ callbacks passed to .listen() are wrapped in a nextTick().   async_hooks.executionAsyncId(); });  Note that promise contexts may not get precise executionAsyncIds by default. See the section on promise execution tracking."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_async_hooks_triggerasyncid","title":"async_hooks.triggerAsyncId()","description":"const server = net.createServer((conn) => {   \/\/ The resource that caused (or triggered) this callback to be called   \/\/ was that of the new connection. Thus the return value of triggerAsyncId()   \/\/ is the asyncId of \"conn\".   async_hooks.triggerAsyncId();  }).listen(port, () => {   \/\/ Even though all callbacks passed to .listen() are wrapped in a nextTick()   \/\/ the callback itself exists because the call to the server&#39;s .listen()   \/\/ was made. So the return value would be the ID of the server.   async_hooks.triggerAsyncId(); });  Note that promise contexts may not get valid triggerAsyncIds by default. See the section on promise execution tracking."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_hook_callbacks","title":"Hook Callbacks","description":"Key events in the lifetime of asynchronous events have been categorized into four areas: instantiation, before\/after the callback is called, and when the instance is destroyed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_init_asyncid_type_triggerasyncid_resource","title":"init(asyncId, type, triggerAsyncId, resource)","description":"Called when a class is constructed that has the possibility to emit an asynchronous event. This does not mean the instance must call before\/after before destroy is called, only that the possibility exists. This behavior can be observed by doing something like opening a resource then closing it before the resource can be used. The following snippet demonstrates this. require(&#39;net&#39;).createServer().listen(function() { this.close(); }); \/\/ OR clearTimeout(setTimeout(() => {}, 10));  Every new resource is assigned an ID that is unique within the scope of the current Node.js instance."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_type","title":"`type`","description":"The type is a string identifying the type of resource that caused init to be called. Generally, it will correspond to the name of the resource&#39;s constructor. FSEVENTWRAP, FSREQWRAP, GETADDRINFOREQWRAP, GETNAMEINFOREQWRAP, HTTPPARSER, JSSTREAM, PIPECONNECTWRAP, PIPEWRAP, PROCESSWRAP, QUERYWRAP, SHUTDOWNWRAP, SIGNALWRAP, STATWATCHER, TCPCONNECTWRAP, TCPSERVER, TCPWRAP, TIMERWRAP, TTYWRAP, UDPSENDWRAP, UDPWRAP, WRITEWRAP, ZLIB, SSLCONNECTION, PBKDF2REQUEST, RANDOMBYTESREQUEST, TLSWRAP, Timeout, Immediate, TickObject  There is also the PROMISE resource type, which is used to track Promise instances and asynchronous work scheduled by them. Users are able to define their own type when using the public embedder API. It is possible to have type name collisions. Embedders are encouraged to use unique prefixes, such as the npm package name, to prevent collisions when listening to the hooks."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_triggerasyncid","title":"`triggerAsyncId`","description":"triggerAsyncId is the asyncId of the resource that caused (or \"triggered\") the new resource to initialize and that caused init to call. This is different from async_hooks.executionAsyncId() that only shows when a resource was created, while triggerAsyncId shows why a resource was created. The following is a simple demonstration of triggerAsyncId: async_hooks.createHook({   init(asyncId, type, triggerAsyncId) {     const eid = async_hooks.executionAsyncId();     fs.writeSync(       1, `${type}(${asyncId}): trigger: ${triggerAsyncId} execution: ${eid}\\n`);   } }).enable();  require(&#39;net&#39;).createServer((conn) => {}).listen(8080);  Output when hitting the server with nc localhost 8080: TCPSERVERWRAP(2): trigger: 1 execution: 1 TCPWRAP(4): trigger: 2 execution: 0  The TCPSERVERWRAP is the server which receives the connections. The TCPWRAP is the new connection from the client. When a new connection is made, the TCPWrap instance is immediately constructed. This happens outside of any JavaScript stack. (An executionAsyncId() of 0 means that it is being executed from C++ with no JavaScript stack above it.) With only that information, it would be impossible to link resources together in terms of what caused them to be created, so triggerAsyncId is given the task of propagating what resource is responsible for the new resource&#39;s existence."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_resource","title":"`resource`","description":"resource is an object that represents the actual async resource that has been initialized. This can contain useful information that can vary based on the value of type. For instance, for the GETADDRINFOREQWRAP resource type, resource provides the hostname used when looking up the IP address for the hostname in net.Server.listen(). The API for accessing this information is currently not considered public, but using the Embedder API, users can provide and document their own resource objects. For example, such a resource object could contain the SQL query being executed. In the case of Promises, the resource object will have promise property that refers to the Promise that is being initialized, and an isChainedPromise property, set to true if the promise has a parent promise, and false otherwise. For example, in the case of b = a.then(handler), a is considered a parent Promise of b. Here, b is considered a chained promise. In some cases the resource object is reused for performance reasons, it is thus not safe to use it as a key in a WeakMap or add properties to it."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_asynchronous_context_example","title":"Asynchronous context example","description":"The following is an example with additional information about the calls to init between the before and after calls, specifically what the callback to listen() will look like. The output formatting is slightly more elaborate to make calling context easier to see. let indent = 0; async_hooks.createHook({   init(asyncId, type, triggerAsyncId) {     const eid = async_hooks.executionAsyncId();     const indentStr = &#39; &#39;.repeat(indent);     fs.writeSync(       1,       `${indentStr}${type}(${asyncId}):` +       ` trigger: ${triggerAsyncId} execution: ${eid}\\n`);   },   before(asyncId) {     const indentStr = &#39; &#39;.repeat(indent);     fs.writeSync(1, `${indentStr}before:  ${asyncId}\\n`);     indent += 2;   },   after(asyncId) {     indent -= 2;     const indentStr = &#39; &#39;.repeat(indent);     fs.writeSync(1, `${indentStr}after:   ${asyncId}\\n`);   },   destroy(asyncId) {     const indentStr = &#39; &#39;.repeat(indent);     fs.writeSync(1, `${indentStr}destroy: ${asyncId}\\n`);   }, }).enable();  require(&#39;net&#39;).createServer(() => {}).listen(8080, () => {   \/\/ Let&#39;s wait 10ms before logging the server started.   setTimeout(() => {     console.log(&#39;>>>&#39;, async_hooks.executionAsyncId());   }, 10); });  Output from only starting the server: TCPSERVERWRAP(2): trigger: 1 execution: 1 TickObject(3): trigger: 2 execution: 1 before:  3   Timeout(4): trigger: 3 execution: 3   TIMERWRAP(5): trigger: 3 execution: 3 after:   3 destroy: 3 before:  5   before:  4     TTYWRAP(6): trigger: 4 execution: 4     SIGNALWRAP(7): trigger: 4 execution: 4     TTYWRAP(8): trigger: 4 execution: 4 >>> 4     TickObject(9): trigger: 4 execution: 4   after:   4 after:   5 before:  9 after:   9 destroy: 4 destroy: 9 destroy: 5  As illustrated in the example, executionAsyncId() and execution each specify the value of the current execution context; which is delineated by calls to before and after. Only using execution to graph resource allocation results in the following: TTYWRAP(6) -> Timeout(4) -> TIMERWRAP(5) -> TickObject(3) -> root(1)  The TCPSERVERWRAP is not part of this graph, even though it was the reason for console.log() being called. This is because binding to a port without a hostname is a synchronous operation, but to maintain a completely asynchronous API the user&#39;s callback is placed in a process.nextTick(). The graph only shows when a resource was created, not why, so to track the why use triggerAsyncId."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_before_asyncid","title":"before(asyncId)","description":"When an asynchronous operation is initiated (such as a TCP server receiving a new connection) or completes (such as writing data to disk) a callback is called to notify the user. The before callback is called just before said callback is executed. asyncId is the unique identifier assigned to the resource about to execute the callback. The before callback will be called 0 to N times. The before callback will typically be called 0 times if the asynchronous operation was cancelled or, for example, if no connections are received by a TCP server. Persistent asynchronous resources like a TCP server will typically call the before callback multiple times, while other operations like fs.open() will call it only once."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_after_asyncid","title":"after(asyncId)","description":"Called immediately after the callback specified in before is completed. If an uncaught exception occurs during execution of the callback, then after will run after the &#39;uncaughtException&#39; event is emitted or a domain&#39;s handler runs."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_destroy_asyncid","title":"destroy(asyncId)","description":"Called after the resource corresponding to asyncId is destroyed. It is also called asynchronously from the embedder API emitDestroy(). Some resources depend on garbage collection for cleanup, so if a reference is made to the resource object passed to init it is possible that destroy will never be called, causing a memory leak in the application. If the resource does not depend on garbage collection, then this will not be an issue."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_promiseresolve_asyncid","title":"promiseResolve(asyncId)","description":"Called when the resolve function passed to the Promise constructor is invoked (either directly or through other means of resolving a promise). Note that resolve() does not do any observable synchronous work. The Promise is not necessarily fulfilled or rejected at this point if the Promise was resolved by assuming the state of another Promise. new Promise((resolve) => resolve(true)).then((a) => {});  calls the following callbacks: init for PROMISE with id 5, trigger id: 1   promise resolve 5      # corresponds to resolve(true) init for PROMISE with id 6, trigger id: 5  # the Promise returned by then()   before 6               # the then() callback is entered   promise resolve 6      # the then() callback resolves the promise by returning   after 6"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_promise_execution_tracking","title":"Promise execution tracking","description":"By default, promise executions are not assigned asyncIds due to the relatively expensive nature of the promise introspection API provided by V8. This means that programs using promises or async\/await will not get correct execution and trigger ids for promise callback contexts by default. Here&#39;s an example: const ah = require(&#39;async_hooks&#39;); Promise.resolve(1729).then(() => {   console.log(`eid ${ah.executionAsyncId()} tid ${ah.triggerAsyncId()}`); }); \/\/ produces: \/\/ eid 1 tid 0  Observe that the then() callback claims to have executed in the context of the outer scope even though there was an asynchronous hop involved. Also note that the triggerAsyncId value is 0, which means that we are missing context about the resource that caused (triggered) the then() callback to be executed. Installing async hooks via async_hooks.createHook enables promise execution tracking. Example: const ah = require(&#39;async_hooks&#39;); ah.createHook({ init() {} }).enable(); \/\/ forces PromiseHooks to be enabled. Promise.resolve(1729).then(() => {   console.log(`eid ${ah.executionAsyncId()} tid ${ah.triggerAsyncId()}`); }); \/\/ produces: \/\/ eid 7 tid 6  In this example, adding any actual hook function enabled the tracking of promises. There are two promises in the example above; the promise created by Promise.resolve() and the promise returned by the call to then(). In the example above, the first promise got the asyncId 6 and the latter got asyncId 7. During the execution of the then() callback, we are executing in the context of promise with asyncId 7. This promise was triggered by async resource 6. Another subtlety with promises is that before and after callbacks are run only on chained promises. That means promises not created by then()\/catch() will not have the before and after callbacks fired on them. For more details see the details of the V8 PromiseHooks API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_javascript_embedder_api","title":"JavaScript Embedder API","description":"Library developers that handle their own asynchronous resources performing tasks like I\/O, connection pooling, or managing callback queues may use the AsyncWrap JavaScript API so that all the appropriate callbacks are called."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_buffer","title":"Buffer","description":"Prior to the introduction of TypedArray, the JavaScript language had no mechanism for reading or manipulating streams of binary data. The Buffer class was introduced as part of the Node.js API to enable interaction with octet streams in TCP streams, file system operations, and other contexts. With TypedArray now available, the Buffer class implements the Uint8Array API in a manner that is more optimized and suitable for Node.js. Instances of the Buffer class are similar to arrays of integers but correspond to fixed-sized, raw memory allocations outside the V8 heap. The size of the Buffer is established when it is created and cannot be changed. The Buffer class is within the global scope, making it unlikely that one would need to ever use require(&#39;buffer&#39;).Buffer. \/\/ Creates a zero-filled Buffer of length 10. const buf1 = Buffer.alloc(10);  \/\/ Creates a Buffer of length 10, filled with 0x1. const buf2 = Buffer.alloc(10, 1);  \/\/ Creates an uninitialized buffer of length 10. \/\/ This is faster than calling Buffer.alloc() but the returned \/\/ Buffer instance might contain old data that needs to be \/\/ overwritten using either fill() or write(). const buf3 = Buffer.allocUnsafe(10);  \/\/ Creates a Buffer containing [0x1, 0x2, 0x3]. const buf4 = Buffer.from([1, 2, 3]);  \/\/ Creates a Buffer containing UTF-8 bytes [0x74, 0xc3, 0xa9, 0x73, 0x74]. const buf5 = Buffer.from(&#39;t\u00e9st&#39;);  \/\/ Creates a Buffer containing Latin-1 bytes [0x74, 0xe9, 0x73, 0x74]. const buf6 = Buffer.from(&#39;t\u00e9st&#39;, &#39;latin1&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_buffer_transcode_source_fromenc_toenc","title":"buffer.transcode(source, fromEnc, toEnc)","description":"Re-encodes the given Buffer or Uint8Array instance from one character encoding to another. Returns a new Buffer instance. Throws if the fromEnc or toEnc specify invalid character encodings or if conversion from fromEnc to toEnc is not permitted. The transcoding process will use substitution characters if a given byte sequence cannot be adequately represented in the target encoding. For instance: const buffer = require(&#39;buffer&#39;);  const newBuf = buffer.transcode(Buffer.from(&#39;\u20ac&#39;), &#39;utf8&#39;, &#39;ascii&#39;); console.log(newBuf.toString(&#39;ascii&#39;)); \/\/ Prints: &#39;?&#39;  Because the Euro (\u20ac) sign is not representable in US-ASCII, it is replaced with ? in the transcoded Buffer. Note that this is a property on the buffer module returned by require(&#39;buffer&#39;), not on the Buffer global or a Buffer instance."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_buffer_from_buffer_alloc_and_buffer_allocunsafe","title":"`Buffer.from()`, `Buffer.alloc()`, and `Buffer.allocUnsafe()`","description":"In versions of Node.js prior to 6.0.0, Buffer instances were created using the Buffer constructor function, which allocates the returned Buffer differently based on what arguments are provided:  Passing a number as the first argument to Buffer() (e.g. new Buffer(10)) allocates a new Buffer object of the specified size. Prior to Node.js 8.0.0, the memory allocated for such Buffer instances is not initialized and can contain sensitive data. Such Buffer instances must be subsequently initialized by using either buf.fill(0) or by writing to the entire Buffer. While this behavior is intentional to improve performance, development experience has demonstrated that a more explicit distinction is required between creating a fast-but-uninitialized Buffer versus creating a slower-but-safer Buffer. Starting in Node.js 8.0.0, Buffer(num) and new Buffer(num) will return a Buffer with initialized memory. Passing a string, array, or Buffer as the first argument copies the passed object&#39;s data into the Buffer. Passing an ArrayBuffer or a SharedArrayBuffer returns a Buffer that shares allocated memory with the given array buffer.  Because the behavior of new Buffer() is different depending on the type of the first argument, security and reliability issues can be inadvertently introduced into applications when argument validation or Buffer initialization is not performed. To make the creation of Buffer instances more reliable and less error-prone, the various forms of the new Buffer() constructor have been deprecated and replaced by separate Buffer.from(), Buffer.alloc(), and Buffer.allocUnsafe() methods. Developers should migrate all existing uses of the new Buffer() constructors to one of these new APIs.  Buffer.from(array) returns a new Buffer that contains a copy of the provided octets. Buffer.from(arrayBuffer[, byteOffset[, length]]) returns a new Buffer that shares the same allocated memory as the given ArrayBuffer. Buffer.from(buffer) returns a new Buffer that contains a copy of the contents of the given Buffer. Buffer.from(string[, encoding]) returns a new Buffer that contains a copy of the provided string. Buffer.alloc(size[, fill[, encoding]]) returns a new initialized Buffer of the specified size. This method is slower than Buffer.allocUnsafe(size) but guarantees that newly created Buffer instances never contain old data that is potentially sensitive. Buffer.allocUnsafe(size) and Buffer.allocUnsafeSlow(size) each return a new uninitialized Buffer of the specified size. Because the Buffer is uninitialized, the allocated segment of memory might contain old data that is potentially sensitive.  Buffer instances returned by Buffer.allocUnsafe() may be allocated off a shared internal memory pool if size is less than or equal to half Buffer.poolSize. Instances returned by Buffer.allocUnsafeSlow() never use the shared internal memory pool."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_the_zero_fill_buffers_command_line_option","title":"The `--zero-fill-buffers` command line option","description":"Node.js can be started using the --zero-fill-buffers command line option to cause all newly allocated Buffer instances to be zero-filled upon creation by default, including buffers returned by new Buffer(size), Buffer.allocUnsafe(), Buffer.allocUnsafeSlow(), and new SlowBuffer(size). Use of this flag can have a significant negative impact on performance. Use of the --zero-fill-buffers option is recommended only when necessary to enforce that newly allocated Buffer instances cannot contain old data that is potentially sensitive. $ node --zero-fill-buffers > Buffer.allocUnsafe(5); <Buffer 00 00 00 00 00>"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_what_makes_buffer_allocunsafe_and_buffer_allocunsafeslow_unsafe","title":"What makes `Buffer.allocUnsafe()` and `Buffer.allocUnsafeSlow()` \"unsafe\"?","description":"When calling Buffer.allocUnsafe() and Buffer.allocUnsafeSlow(), the segment of allocated memory is uninitialized (it is not zeroed-out). While this design makes the allocation of memory quite fast, the allocated segment of memory might contain old data that is potentially sensitive. Using a Buffer created by Buffer.allocUnsafe() without completely overwriting the memory can allow this old data to be leaked when the Buffer memory is read. While there are clear performance advantages to using Buffer.allocUnsafe(), extra care must be taken in order to avoid introducing security vulnerabilities into an application."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_buffers_and_character_encodings","title":"Buffers and Character Encodings","description":"When string data is stored in or extracted out of a Buffer instance, a character encoding may be specified. const buf = Buffer.from(&#39;hello world&#39;, &#39;ascii&#39;);  console.log(buf.toString(&#39;hex&#39;)); \/\/ Prints: 68656c6c6f20776f726c64 console.log(buf.toString(&#39;base64&#39;)); \/\/ Prints: aGVsbG8gd29ybGQ=  console.log(Buffer.from(&#39;fhqwhgads&#39;, &#39;ascii&#39;)); \/\/ Prints: <Buffer 66 68 71 77 68 67 61 64 73> console.log(Buffer.from(&#39;fhqwhgads&#39;, &#39;utf16le&#39;)); \/\/ Prints: <Buffer 66 00 68 00 71 00 77 00 68 00 67 00 61 00 64 00 73 00>  The character encodings currently supported by Node.js include:  &#39;ascii&#39; - For 7-bit ASCII data only. This encoding is fast and will strip the high bit if set.  &#39;utf8&#39; - Multibyte encoded Unicode characters. Many web pages and other document formats use UTF-8.  &#39;utf16le&#39; - 2 or 4 bytes, little-endian encoded Unicode characters. Surrogate pairs (U+10000 to U+10FFFF) are supported.  &#39;ucs2&#39; - Alias of &#39;utf16le&#39;.  &#39;base64&#39; - Base64 encoding. When creating a Buffer from a string, this encoding will also correctly accept \"URL and Filename Safe Alphabet\" as specified in RFC4648, Section 5.  &#39;latin1&#39; - A way of encoding the Buffer into a one-byte encoded string (as defined by the IANA in RFC1345, page 63, to be the Latin-1 supplement block and C0\/C1 control codes).  &#39;binary&#39; - Alias for &#39;latin1&#39;.  &#39;hex&#39; - Encode each byte as two hexadecimal characters.   Modern Web browsers follow the WHATWG Encoding Standard which aliases both &#39;latin1&#39; and &#39;ISO-8859-1&#39; to &#39;win-1252&#39;. This means that while doing something like http.get(), if the returned charset is one of those listed in the WHATWG specification it is possible that the server actually returned &#39;win-1252&#39;-encoded data, and using &#39;latin1&#39; encoding may incorrectly decode the characters."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_buffers_and_typedarray","title":"Buffers and TypedArray","description":"Buffer instances are also Uint8Array instances. However, there are subtle incompatibilities with TypedArray. For example, while ArrayBuffer#slice() creates a copy of the slice, the implementation of Buffer#slice() creates a view over the existing Buffer without copying, making Buffer#slice() far more efficient. It is also possible to create new TypedArray instances from a Buffer with the following caveats:  The Buffer object&#39;s memory is copied to the TypedArray, not shared.  The Buffer object&#39;s memory is interpreted as an array of distinct elements, and not as a byte array of the target type. That is, new Uint32Array(Buffer.from([1, 2, 3, 4])) creates a 4-element Uint32Array with elements [1, 2, 3, 4], not a Uint32Array with a single element [0x1020304] or [0x4030201].   It is possible to create a new Buffer that shares the same allocated memory as a TypedArray instance by using the TypeArray object&#39;s .buffer property. const arr = new Uint16Array(2);  arr[0] = 5000; arr[1] = 4000;  \/\/ Copies the contents of `arr` const buf1 = Buffer.from(arr); \/\/ Shares memory with `arr` const buf2 = Buffer.from(arr.buffer);  console.log(buf1); \/\/ Prints: <Buffer 88 a0> console.log(buf2); \/\/ Prints: <Buffer 88 13 a0 0f>  arr[1] = 6000;  console.log(buf1); \/\/ Prints: <Buffer 88 a0> console.log(buf2); \/\/ Prints: <Buffer 88 13 70 17>  Note that when creating a Buffer using a TypedArray&#39;s .buffer, it is possible to use only a portion of the underlying ArrayBuffer by passing in byteOffset and length parameters. const arr = new Uint16Array(20); const buf = Buffer.from(arr.buffer, 0, 16);  console.log(buf.length); \/\/ Prints: 16  The Buffer.from() and TypedArray.from() have different signatures and implementations. Specifically, the TypedArray variants accept a second argument that is a mapping function that is invoked on every element of the typed array:  TypedArray.from(source[, mapFn[, thisArg]])  The Buffer.from() method, however, does not support the use of a mapping function:  Buffer.from(array) Buffer.from(buffer) Buffer.from(arrayBuffer[, byteOffset[, length]]) Buffer.from(string[, encoding])"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_buffers_and_iteration","title":"Buffers and iteration","description":"Buffer instances can be iterated over using for..of syntax: const buf = Buffer.from([1, 2, 3]);  \/\/ Prints: \/\/   1 \/\/   2 \/\/   3 for (const b of buf) {   console.log(b); }  Additionally, the buf.values(), buf.keys(), and buf.entries() methods can be used to create iterators."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_buffer_constants","title":"Buffer Constants","description":"Note that buffer.constants is a property on the buffer module returned by require(&#39;buffer&#39;), not on the Buffer global or a Buffer instance."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_child_process","title":"Child Process","description":"Stability: 2 - Stable  The child_process module provides the ability to spawn child processes in a manner that is similar, but not identical, to popen(3). This capability is primarily provided by the child_process.spawn() function: const { spawn } = require(&#39;child_process&#39;); const ls = spawn(&#39;ls&#39;, [&#39;-lh&#39;, &#39;\/usr&#39;]);  ls.stdout.on(&#39;data&#39;, (data) => {   console.log(`stdout: ${data}`); });  ls.stderr.on(&#39;data&#39;, (data) => {   console.log(`stderr: ${data}`); });  ls.on(&#39;close&#39;, (code) => {   console.log(`child process exited with code ${code}`); });  By default, pipes for stdin, stdout, and stderr are established between the parent Node.js process and the spawned child. These pipes have limited (and platform-specific) capacity. If the child process writes to stdout in excess of that limit without the output being captured, the child process will block waiting for the pipe buffer to accept more data. This is identical to the behavior of pipes in the shell. Use the { stdio: &#39;ignore&#39; } option if the output will not be consumed. The child_process.spawn() method spawns the child process asynchronously, without blocking the Node.js event loop. The child_process.spawnSync() function provides equivalent functionality in a synchronous manner that blocks the event loop until the spawned process either exits or is terminated. For convenience, the child_process module provides a handful of synchronous and asynchronous alternatives to child_process.spawn() and child_process.spawnSync(). Note that each of these alternatives are implemented on top of child_process.spawn() or child_process.spawnSync().  child_process.exec(): spawns a shell and runs a command within that shell, passing the stdout and stderr to a callback function when complete. child_process.execFile(): similar to child_process.exec() except that it spawns the command directly without first spawning a shell by default. child_process.fork(): spawns a new Node.js process and invokes a specified module with an IPC communication channel established that allows sending messages between parent and child. child_process.execSync(): a synchronous version of child_process.exec() that will block the Node.js event loop. child_process.execFileSync(): a synchronous version of child_process.execFile() that will block the Node.js event loop.  For certain use cases, such as automating shell scripts, the synchronous counterparts may be more convenient. In many cases, however, the synchronous methods can have significant impact on performance due to stalling the event loop while spawned processes complete."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_asynchronous_process_creation","title":"Asynchronous Process Creation","description":"The child_process.spawn(), child_process.fork(), child_process.exec(), and child_process.execFile() methods all follow the idiomatic asynchronous programming pattern typical of other Node.js APIs. Each of the methods returns a ChildProcess instance. These objects implement the Node.js EventEmitter API, allowing the parent process to register listener functions that are called when certain events occur during the life cycle of the child process. The child_process.exec() and child_process.execFile() methods additionally allow for an optional callback function to be specified that is invoked when the child process terminates."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_child_process_exec_command_options_callback","title":"child_process.exec(command[, options][, callback])","description":"Spawns a shell then executes the command within that shell, buffering any generated output. The command string passed to the exec function is processed directly by the shell and special characters (vary based on shell) need to be dealt with accordingly: exec(&#39;\"\/path\/to\/test file\/test.sh\" arg1 arg2&#39;); \/\/ Double quotes are used so that the space in the path is not interpreted as \/\/ multiple arguments  exec(&#39;echo \"The \\\\$HOME variable is $HOME\"&#39;); \/\/ The $HOME variable is escaped in the first instance, but not in the second  Never pass unsanitized user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution. If a callback function is provided, it is called with the arguments (error, stdout, stderr). On success, error will be null. On error, error will be an instance of Error. The error.code property will be the exit code of the child process while error.signal will be set to the signal that terminated the process. Any exit code other than 0 is considered to be an error. The stdout and stderr arguments passed to the callback will contain the stdout and stderr output of the child process. By default, Node.js will decode the output as UTF-8 and pass strings to the callback. The encoding option can be used to specify the character encoding used to decode the stdout and stderr output. If encoding is &#39;buffer&#39;, or an unrecognized character encoding, Buffer objects will be passed to the callback instead. const { exec } = require(&#39;child_process&#39;); exec(&#39;cat *.js missing_file | wc -l&#39;, (error, stdout, stderr) => {   if (error) {     console.error(`exec error: ${error}`);     return;   }   console.log(`stdout: ${stdout}`);   console.log(`stderr: ${stderr}`); });  If timeout is greater than 0, the parent will send the signal identified by the killSignal property (the default is &#39;SIGTERM&#39;) if the child runs longer than timeout milliseconds. Unlike the exec(3) POSIX system call, child_process.exec() does not replace the existing process and uses a shell to execute the command. If this method is invoked as its util.promisify()ed version, it returns a Promise for an Object with stdout and stderr properties. In case of an error (including any error resulting in an exit code other than 0), a rejected promise is returned, with the same error object given in the callback, but with an additional two properties stdout and stderr. const util = require(&#39;util&#39;); const exec = util.promisify(require(&#39;child_process&#39;).exec);  async function lsExample() {   const { stdout, stderr } = await exec(&#39;ls&#39;);   console.log(&#39;stdout:&#39;, stdout);   console.log(&#39;stderr:&#39;, stderr); } lsExample();"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_child_process_execfile_file_args_options_callback","title":"child_process.execFile(file[, args][, options][, callback])","description":"The child_process.execFile() function is similar to child_process.exec() except that it does not spawn a shell by default. Rather, the specified executable file is spawned directly as a new process making it slightly more efficient than child_process.exec(). The same options as child_process.exec() are supported. Since a shell is not spawned, behaviors such as I\/O redirection and file globbing are not supported. const { execFile } = require(&#39;child_process&#39;); const child = execFile(&#39;node&#39;, [&#39;--version&#39;], (error, stdout, stderr) => {   if (error) {     throw error;   }   console.log(stdout); });  The stdout and stderr arguments passed to the callback will contain the stdout and stderr output of the child process. By default, Node.js will decode the output as UTF-8 and pass strings to the callback. The encoding option can be used to specify the character encoding used to decode the stdout and stderr output. If encoding is &#39;buffer&#39;, or an unrecognized character encoding, Buffer objects will be passed to the callback instead. If this method is invoked as its util.promisify()ed version, it returns a Promise for an Object with stdout and stderr properties. In case of an error (including any error resulting in an exit code other than 0), a rejected promise is returned, with the same error object given in the callback, but with an additional two properties stdout and stderr. const util = require(&#39;util&#39;); const execFile = util.promisify(require(&#39;child_process&#39;).execFile); async function getVersion() {   const { stdout } = await execFile(&#39;node&#39;, [&#39;--version&#39;]);   console.log(stdout); } getVersion();  If the shell option is enabled, do not pass unsanitized user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_child_process_fork_modulepath_args_options","title":"child_process.fork(modulePath[, args][, options])","description":"The child_process.fork() method is a special case of child_process.spawn() used specifically to spawn new Node.js processes. Like child_process.spawn(), a ChildProcess object is returned. The returned ChildProcess will have an additional communication channel built-in that allows messages to be passed back and forth between the parent and child. See subprocess.send() for details. It is important to keep in mind that spawned Node.js child processes are independent of the parent with exception of the IPC communication channel that is established between the two. Each process has its own memory, with their own V8 instances. Because of the additional resource allocations required, spawning a large number of child Node.js processes is not recommended. By default, child_process.fork() will spawn new Node.js instances using the process.execPath of the parent process. The execPath property in the options object allows for an alternative execution path to be used. Node.js processes launched with a custom execPath will communicate with the parent process using the file descriptor (fd) identified using the environment variable NODE_CHANNEL_FD on the child process. Unlike the fork(2) POSIX system call, child_process.fork() does not clone the current process. The shell option available in child_process.spawn() is not supported by child_process.fork() and will be ignored if set."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_child_process_spawn_command_args_options","title":"child_process.spawn(command[, args][, options])","description":"The child_process.spawn() method spawns a new process using the given command, with command line arguments in args. If omitted, args defaults to an empty array. If the shell option is enabled, do not pass unsanitized user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution. A third argument may be used to specify additional options, with these defaults: const defaults = {   cwd: undefined,   env: process.env };  Use cwd to specify the working directory from which the process is spawned. If not given, the default is to inherit the current working directory. Use env to specify environment variables that will be visible to the new process, the default is process.env. undefined values in env will be ignored. Example of running ls -lh \/usr, capturing stdout, stderr, and the exit code: const { spawn } = require(&#39;child_process&#39;); const ls = spawn(&#39;ls&#39;, [&#39;-lh&#39;, &#39;\/usr&#39;]);  ls.stdout.on(&#39;data&#39;, (data) => {   console.log(`stdout: ${data}`); });  ls.stderr.on(&#39;data&#39;, (data) => {   console.log(`stderr: ${data}`); });  ls.on(&#39;close&#39;, (code) => {   console.log(`child process exited with code ${code}`); });  Example: A very elaborate way to run ps ax | grep ssh const { spawn } = require(&#39;child_process&#39;); const ps = spawn(&#39;ps&#39;, [&#39;ax&#39;]); const grep = spawn(&#39;grep&#39;, [&#39;ssh&#39;]);  ps.stdout.on(&#39;data&#39;, (data) => {   grep.stdin.write(data); });  ps.stderr.on(&#39;data&#39;, (data) => {   console.log(`ps stderr: ${data}`); });  ps.on(&#39;close&#39;, (code) => {   if (code !== 0) {     console.log(`ps process exited with code ${code}`);   }   grep.stdin.end(); });  grep.stdout.on(&#39;data&#39;, (data) => {   console.log(data.toString()); });  grep.stderr.on(&#39;data&#39;, (data) => {   console.log(`grep stderr: ${data}`); });  grep.on(&#39;close&#39;, (code) => {   if (code !== 0) {     console.log(`grep process exited with code ${code}`);   } });  Example of checking for failed spawn: const { spawn } = require(&#39;child_process&#39;); const subprocess = spawn(&#39;bad_command&#39;);  subprocess.on(&#39;error&#39;, (err) => {   console.log(&#39;Failed to start subprocess.&#39;); });  Certain platforms (macOS, Linux) will use the value of argv[0] for the process title while others (Windows, SunOS) will use command. Node.js currently overwrites argv[0] with process.execPath on startup, so process.argv[0] in a Node.js child process will not match the argv0 parameter passed to spawn from the parent, retrieve it with the process.argv0 property instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_spawning_bat_and_cmd_files_on_windows","title":"Spawning `.bat` and `.cmd` files on Windows","description":"The importance of the distinction between child_process.exec() and child_process.execFile() can vary based on platform. On Unix-type operating systems (Unix, Linux, macOS) child_process.execFile() can be more efficient because it does not spawn a shell by default. On Windows, however, .bat and .cmd files are not executable on their own without a terminal, and therefore cannot be launched using child_process.execFile(). When running on Windows, .bat and .cmd files can be invoked using child_process.spawn() with the shell option set, with child_process.exec(), or by spawning cmd.exe and passing the .bat or .cmd file as an argument (which is what the shell option and child_process.exec() do). In any case, if the script filename contains spaces it needs to be quoted. \/\/ On Windows Only ... const { spawn } = require(&#39;child_process&#39;); const bat = spawn(&#39;cmd.exe&#39;, [&#39;\/c&#39;, &#39;my.bat&#39;]);  bat.stdout.on(&#39;data&#39;, (data) => {   console.log(data.toString()); });  bat.stderr.on(&#39;data&#39;, (data) => {   console.log(data.toString()); });  bat.on(&#39;exit&#39;, (code) => {   console.log(`Child exited with code ${code}`); });  \/\/ OR... const { exec } = require(&#39;child_process&#39;); exec(&#39;my.bat&#39;, (err, stdout, stderr) => {   if (err) {     console.error(err);     return;   }   console.log(stdout); });  \/\/ Script with spaces in the filename: const bat = spawn(&#39;\"my script.cmd\"&#39;, [&#39;a&#39;, &#39;b&#39;], { shell: true }); \/\/ or: exec(&#39;\"my script.cmd\" a b&#39;, (err, stdout, stderr) => {   \/\/ ... });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_synchronous_process_creation","title":"Synchronous Process Creation","description":"The child_process.spawnSync(), child_process.execSync(), and child_process.execFileSync() methods are synchronous and WILL block the Node.js event loop, pausing execution of any additional code until the spawned process exits. Blocking calls like these are mostly useful for simplifying general-purpose scripting tasks and for simplifying the loading\/processing of application configuration at startup."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_child_process_execfilesync_file_args_options","title":"child_process.execFileSync(file[, args][, options])","description":"The child_process.execFileSync() method is generally identical to child_process.execFile() with the exception that the method will not return until the child process has fully closed. When a timeout has been encountered and killSignal is sent, the method won&#39;t return until the process has completely exited. If the child process intercepts and handles the SIGTERM signal and does not exit, the parent process will still wait until the child process has exited. If the process times out or has a non-zero exit code, this method will throw an Error that will include the full result of the underlying child_process.spawnSync(). If the shell option is enabled, do not pass unsanitized user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_child_process_execsync_command_options","title":"child_process.execSync(command[, options])","description":"The child_process.execSync() method is generally identical to child_process.exec() with the exception that the method will not return until the child process has fully closed. When a timeout has been encountered and killSignal is sent, the method won&#39;t return until the process has completely exited. Note that if the child process intercepts and handles the SIGTERM signal and doesn&#39;t exit, the parent process will wait until the child process has exited. If the process times out or has a non-zero exit code, this method will throw. The Error object will contain the entire result from child_process.spawnSync(). Never pass unsanitized user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_child_process_spawnsync_command_args_options","title":"child_process.spawnSync(command[, args][, options])","description":"The child_process.spawnSync() method is generally identical to child_process.spawn() with the exception that the function will not return until the child process has fully closed. When a timeout has been encountered and killSignal is sent, the method won&#39;t return until the process has completely exited. Note that if the process intercepts and handles the SIGTERM signal and doesn&#39;t exit, the parent process will wait until the child process has exited. If the shell option is enabled, do not pass unsanitized user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_maxbuffer_and_unicode","title":"`maxBuffer` and Unicode","description":"The maxBuffer option specifies the largest number of bytes allowed on stdout or stderr. If this value is exceeded, then the child process is terminated. This impacts output that includes multibyte character encodings such as UTF-8 or UTF-16. For instance, console.log(&#39;\u4e2d\u6587\u6d4b\u8bd5&#39;) will send 13 UTF-8 encoded bytes to stdout although there are only 4 characters."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_shell_requirements","title":"Shell Requirements","description":"The shell should understand the -c switch on UNIX or \/d \/s \/c on Windows. On Windows, command line parsing should be compatible with &#39;cmd.exe&#39;."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_default_windows_shell","title":"Default Windows Shell","description":"Although Microsoft specifies %COMSPEC% must contain the path to &#39;cmd.exe&#39; in the root environment, child processes are not always subject to the same requirement. Thus, in child_process functions where a shell can be spawned, &#39;cmd.exe&#39; is used as a fallback if process.env.ComSpec is unavailable."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_cluster","title":"Cluster","description":"A single instance of Node.js runs in a single thread. To take advantage of multi-core systems, the user will sometimes want to launch a cluster of Node.js processes to handle the load. The cluster module allows easy creation of child processes that all share server ports. const cluster = require(&#39;cluster&#39;); const http = require(&#39;http&#39;); const numCPUs = require(&#39;os&#39;).cpus().length;  if (cluster.isMaster) {   console.log(`Master ${process.pid} is running`);    \/\/ Fork workers.   for (let i = 0; i < numCPUs; i++) {     cluster.fork();   }    cluster.on(&#39;exit&#39;, (worker, code, signal) => {     console.log(`worker ${worker.process.pid} died`);   }); } else {   \/\/ Workers can share any TCP connection   \/\/ In this case it is an HTTP server   http.createServer((req, res) => {     res.writeHead(200);     res.end(&#39;hello world\\n&#39;);   }).listen(8000);    console.log(`Worker ${process.pid} started`); }  Running Node.js will now share port 8000 between the workers: $ node server.js Master 3596 is running Worker 4324 started Worker 4520 started Worker 6056 started Worker 5644 started  Please note that on Windows, it is not yet possible to set up a named pipe server in a worker."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_cluster_disconnect_callback","title":"cluster.disconnect([callback])","description":"Calls .disconnect() on each worker in cluster.workers. When they are disconnected all internal handles will be closed, allowing the master process to die gracefully if no other event is waiting. The method takes an optional callback argument which will be called when finished. This can only be called from the master process."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_cluster_fork_env","title":"cluster.fork([env])","description":"Spawn a new worker process. This can only be called from the master process."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_cluster_setupmaster_settings","title":"cluster.setupMaster([settings])","description":"setupMaster is used to change the default &#39;fork&#39; behavior. Once called, the settings will be present in cluster.settings. Note that:  Any settings changes only affect future calls to .fork() and have no effect on workers that are already running. The only attribute of a worker that cannot be set via .setupMaster() is the env passed to .fork(). The defaults above apply to the first call only, the defaults for later calls is the current value at the time of cluster.setupMaster() is called.  Example: const cluster = require(&#39;cluster&#39;); cluster.setupMaster({   exec: &#39;worker.js&#39;,   args: [&#39;--use&#39;, &#39;https&#39;],   silent: true }); cluster.fork(); \/\/ https worker cluster.setupMaster({   exec: &#39;worker.js&#39;,   args: [&#39;--use&#39;, &#39;http&#39;] }); cluster.fork(); \/\/ http worker  This can only be called from the master process."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_how_it_works","title":"How It Works","description":"The worker processes are spawned using the child_process.fork() method, so that they can communicate with the parent via IPC and pass server handles back and forth. The cluster module supports two methods of distributing incoming connections. The first one (and the default one on all platforms except Windows), is the round-robin approach, where the master process listens on a port, accepts new connections and distributes them across the workers in a round-robin fashion, with some built-in smarts to avoid overloading a worker process. The second approach is where the master process creates the listen socket and sends it to interested workers. The workers then accept incoming connections directly. The second approach should, in theory, give the best performance. In practice however, distribution tends to be very unbalanced due to operating system scheduler vagaries. Loads have been observed where over 70% of all connections ended up in just two processes, out of a total of eight. Because server.listen() hands off most of the work to the master process, there are three cases where the behavior between a normal Node.js process and a cluster worker differs:  server.listen({fd: 7}) Because the message is passed to the master, file descriptor 7 in the parent will be listened on, and the handle passed to the worker, rather than listening to the worker&#39;s idea of what the number 7 file descriptor references. server.listen(handle) Listening on handles explicitly will cause the worker to use the supplied handle, rather than talk to the master process. server.listen(0) Normally, this will cause servers to listen on a random port.  However, in a cluster, each worker will receive the same \"random\" port each time they do listen(0). In essence, the port is random the first time, but predictable thereafter. To listen on a unique port, generate a port number based on the cluster worker ID.  Node.js does not provide routing logic. It is, therefore important to design an application such that it does not rely too heavily on in-memory data objects for things like sessions and login. Because workers are all separate processes, they can be killed or re-spawned depending on a program&#39;s needs, without affecting other workers. As long as there are some workers still alive, the server will continue to accept connections. If no workers are alive, existing connections will be dropped and new connections will be refused. Node.js does not automatically manage the number of workers, however. It is the application&#39;s responsibility to manage the worker pool based on its own needs. Although a primary use case for the cluster module is networking, it can also be used for other use cases requiring worker processes."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console","title":"Console","description":"The console module provides a simple debugging console that is similar to the JavaScript console mechanism provided by web browsers. The module exports two specific components:  A Console class with methods such as console.log(), console.error() and console.warn() that can be used to write to any Node.js stream. A global console instance configured to write to process.stdout and process.stderr. The global console can be used without calling require(&#39;console&#39;).  Warning: The global console object&#39;s methods are neither consistently synchronous like the browser APIs they resemble, nor are they consistently asynchronous like all other Node.js streams. See the note on process I\/O for more information. Example using the global console: console.log(&#39;hello world&#39;); \/\/ Prints: hello world, to stdout console.log(&#39;hello %s&#39;, &#39;world&#39;); \/\/ Prints: hello world, to stdout console.error(new Error(&#39;Whoops, something bad happened&#39;)); \/\/ Prints: [Error: Whoops, something bad happened], to stderr  const name = &#39;Will Robinson&#39;; console.warn(`Danger ${name}! Danger!`); \/\/ Prints: Danger Will Robinson! Danger!, to stderr  Example using the Console class: const out = getStreamSomehow(); const err = getStreamSomehow(); const myConsole = new console.Console(out, err);  myConsole.log(&#39;hello world&#39;); \/\/ Prints: hello world, to out myConsole.log(&#39;hello %s&#39;, &#39;world&#39;); \/\/ Prints: hello world, to out myConsole.error(new Error(&#39;Whoops, something bad happened&#39;)); \/\/ Prints: [Error: Whoops, something bad happened], to err  const name = &#39;Will Robinson&#39;; myConsole.warn(`Danger ${name}! Danger!`); \/\/ Prints: Danger Will Robinson! Danger!, to err"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_inspector_only_methods","title":"Inspector only methods","description":"The following methods are exposed by the V8 engine in the general API but do not display anything unless used in conjunction with the inspector (--inspect flag)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_marktimeline_label","title":"console.markTimeline([label])","description":"This method does not display anything unless used in the inspector. The console.markTimeline() method is the deprecated form of console.timeStamp()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_profile_label","title":"console.profile([label])","description":"This method does not display anything unless used in the inspector. The console.profile() method starts a JavaScript CPU profile with an optional label until console.profileEnd() is called. The profile is then added to the Profile panel of the inspector. console.profile(&#39;MyLabel&#39;); \/\/ Some code console.profileEnd(&#39;MyLabel&#39;); \/\/ Adds the profile &#39;MyLabel&#39; to the Profiles panel of the inspector."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_profileend_label","title":"console.profileEnd([label])","description":"This method does not display anything unless used in the inspector. Stops the current JavaScript CPU profiling session if one has been started and prints the report to the Profiles panel of the inspector. See console.profile() for an example. If this method is called without a label, the most recently started profile is stopped."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_timestamp_label","title":"console.timeStamp([label])","description":"This method does not display anything unless used in the inspector. The console.timeStamp() method adds an event with the label &#39;label&#39; to the Timeline panel of the inspector."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_timeline_label","title":"console.timeline([label])","description":"This method does not display anything unless used in the inspector. The console.timeline() method is the deprecated form of console.time()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_console_timelineend_label","title":"console.timelineEnd([label])","description":"This method does not display anything unless used in the inspector. The console.timelineEnd() method is the deprecated form of console.timeEnd()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto","title":"Crypto","description":"The crypto module provides cryptographic functionality that includes a set of wrappers for OpenSSL&#39;s hash, HMAC, cipher, decipher, sign, and verify functions. Use require(&#39;crypto&#39;) to access this module. const crypto = require(&#39;crypto&#39;);  const secret = &#39;abcdefg&#39;; const hash = crypto.createHmac(&#39;sha256&#39;, secret)                    .update(&#39;I love cupcakes&#39;)                    .digest(&#39;hex&#39;); console.log(hash); \/\/ Prints: \/\/   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_determining_if_crypto_support_is_unavailable","title":"Determining if crypto support is unavailable","description":"It is possible for Node.js to be built without including support for the crypto module. In such cases, calling require(&#39;crypto&#39;) will result in an error being thrown. let crypto; try {   crypto = require(&#39;crypto&#39;); } catch (err) {   console.log(&#39;crypto support is disabled!&#39;); }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_module_methods_and_properties","title":"`crypto` module methods and properties","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createcipher_algorithm_password_options","title":"crypto.createCipher(algorithm, password[, options])","description":"Creates and returns a Cipher object that uses the given algorithm and password. The options argument controls stream behavior and is optional except when a cipher in CCM mode is used (e.g. &#39;aes-128-ccm&#39;). In that case, the authTagLength option is required and specifies the length of the authentication tag in bytes, see CCM mode. In GCM mode, the authTagLength option is not required but can be used to set the length of the authentication tag that will be returned by getAuthTag() and defaults to 16 bytes. The algorithm is dependent on OpenSSL, examples are &#39;aes192&#39;, etc. On recent OpenSSL releases, openssl list -cipher-algorithms (openssl list-cipher-algorithms for older versions of OpenSSL) will display the available cipher algorithms. The password is used to derive the cipher key and initialization vector (IV). The value must be either a &#39;latin1&#39; encoded string, a Buffer, a TypedArray, or a DataView. The implementation of crypto.createCipher() derives keys using the OpenSSL function EVP_BytesToKey with the digest algorithm set to MD5, one iteration, and no salt. The lack of salt allows dictionary attacks as the same password always creates the same key. The low iteration count and non-cryptographically secure hash algorithm allow passwords to be tested very rapidly. In line with OpenSSL&#39;s recommendation to use a more modern algorithm instead of EVP_BytesToKey it is recommended that developers derive a key and IV on their own using crypto.scrypt() and to use crypto.createCipheriv() to create the Cipher object. Users should not use ciphers with counter mode (e.g. CTR, GCM, or CCM) in crypto.createCipher(). A warning is emitted when they are used in order to avoid the risk of IV reuse that causes vulnerabilities. For the case when IV is reused in GCM, see Nonce-Disrespecting Adversaries for details."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createcipheriv_algorithm_key_iv_options","title":"crypto.createCipheriv(algorithm, key, iv[, options])","description":"Creates and returns a Cipher object, with the given algorithm, key and initialization vector (iv). The options argument controls stream behavior and is optional except when a cipher in CCM mode is used (e.g. &#39;aes-128-ccm&#39;). In that case, the authTagLength option is required and specifies the length of the authentication tag in bytes, see CCM mode. In GCM mode, the authTagLength option is not required but can be used to set the length of the authentication tag that will be returned by getAuthTag() and defaults to 16 bytes. The algorithm is dependent on OpenSSL, examples are &#39;aes192&#39;, etc. On recent OpenSSL releases, openssl list -cipher-algorithms (openssl list-cipher-algorithms for older versions of OpenSSL) will display the available cipher algorithms. The key is the raw key used by the algorithm and iv is an initialization vector. Both arguments must be &#39;utf8&#39; encoded strings, Buffers, TypedArray, or DataViews. If the cipher does not need an initialization vector, iv may be null. Initialization vectors should be unpredictable and unique; ideally, they will be cryptographically random. They do not have to be secret: IVs are typically just added to ciphertext messages unencrypted. It may sound contradictory that something has to be unpredictable and unique, but does not have to be secret; it is important to remember that an attacker must not be able to predict ahead of time what a given IV will be."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createcredentials_details","title":"crypto.createCredentials(details)","description":"The crypto.createCredentials() method is a deprecated function for creating and returning a tls.SecureContext. It should not be used. Replace it with tls.createSecureContext() which has the exact same arguments and return value. Returns a tls.SecureContext, as-if tls.createSecureContext() had been called."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createdecipher_algorithm_password_options","title":"crypto.createDecipher(algorithm, password[, options])","description":"Creates and returns a Decipher object that uses the given algorithm and password (key). The options argument controls stream behavior and is optional except when a cipher in CCM mode is used (e.g. &#39;aes-128-ccm&#39;). In that case, the authTagLength option is required and specifies the length of the authentication tag in bytes, see CCM mode. The implementation of crypto.createDecipher() derives keys using the OpenSSL function EVP_BytesToKey with the digest algorithm set to MD5, one iteration, and no salt. The lack of salt allows dictionary attacks as the same password always creates the same key. The low iteration count and non-cryptographically secure hash algorithm allow passwords to be tested very rapidly. In line with OpenSSL&#39;s recommendation to use a more modern algorithm instead of EVP_BytesToKey it is recommended that developers derive a key and IV on their own using crypto.scrypt() and to use crypto.createDecipheriv() to create the Decipher object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createdecipheriv_algorithm_key_iv_options","title":"crypto.createDecipheriv(algorithm, key, iv[, options])","description":"Creates and returns a Decipher object that uses the given algorithm, key and initialization vector (iv). The options argument controls stream behavior and is optional except when a cipher in CCM mode is used (e.g. &#39;aes-128-ccm&#39;). In that case, the authTagLength option is required and specifies the length of the authentication tag in bytes, see CCM mode. In GCM mode, the authTagLength option is not required but can be used to restrict accepted authentication tags to those with the specified length. The algorithm is dependent on OpenSSL, examples are &#39;aes192&#39;, etc. On recent OpenSSL releases, openssl list -cipher-algorithms (openssl list-cipher-algorithms for older versions of OpenSSL) will display the available cipher algorithms. The key is the raw key used by the algorithm and iv is an initialization vector. Both arguments must be &#39;utf8&#39; encoded strings, Buffers, TypedArray, or DataViews. If the cipher does not need an initialization vector, iv may be null. Initialization vectors should be unpredictable and unique; ideally, they will be cryptographically random. They do not have to be secret: IVs are typically just added to ciphertext messages unencrypted. It may sound contradictory that something has to be unpredictable and unique, but does not have to be secret; it is important to remember that an attacker must not be able to predict ahead of time what a given IV will be."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_creatediffiehellman_prime_primeencoding_generator_generatorencoding","title":"crypto.createDiffieHellman(prime[, primeEncoding][, generator][, generatorEncoding])","description":"Creates a DiffieHellman key exchange object using the supplied prime and an optional specific generator. The generator argument can be a number, string, or Buffer. If generator is not specified, the value 2 is used. The primeEncoding and generatorEncoding arguments can be &#39;latin1&#39;, &#39;hex&#39;, or &#39;base64&#39;. If primeEncoding is specified, prime is expected to be a string; otherwise a Buffer, TypedArray, or DataView is expected. If generatorEncoding is specified, generator is expected to be a string; otherwise a number, Buffer, TypedArray, or DataView is expected."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_creatediffiehellman_primelength_generator","title":"crypto.createDiffieHellman(primeLength[, generator])","description":"Creates a DiffieHellman key exchange object and generates a prime of primeLength bits using an optional specific numeric generator. If generator is not specified, the value 2 is used."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createecdh_curvename","title":"crypto.createECDH(curveName)","description":"Creates an Elliptic Curve Diffie-Hellman (ECDH) key exchange object using a predefined curve specified by the curveName string. Use crypto.getCurves() to obtain a list of available curve names. On recent OpenSSL releases, openssl ecparam -list_curves will also display the name and description of each available elliptic curve."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createhash_algorithm_options","title":"crypto.createHash(algorithm[, options])","description":"Creates and returns a Hash object that can be used to generate hash digests using the given algorithm. Optional options argument controls stream behavior. The algorithm is dependent on the available algorithms supported by the version of OpenSSL on the platform. Examples are &#39;sha256&#39;, &#39;sha512&#39;, etc. On recent releases of OpenSSL, openssl list -digest-algorithms (openssl list-message-digest-algorithms for older versions of OpenSSL) will display the available digest algorithms. Example: generating the sha256 sum of a file const filename = process.argv[2]; const crypto = require(&#39;crypto&#39;); const fs = require(&#39;fs&#39;);  const hash = crypto.createHash(&#39;sha256&#39;);  const input = fs.createReadStream(filename); input.on(&#39;readable&#39;, () => {   const data = input.read();   if (data)     hash.update(data);   else {     console.log(`${hash.digest(&#39;hex&#39;)} ${filename}`);   } });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createhmac_algorithm_key_options","title":"crypto.createHmac(algorithm, key[, options])","description":"Creates and returns an Hmac object that uses the given algorithm and key. Optional options argument controls stream behavior. The algorithm is dependent on the available algorithms supported by the version of OpenSSL on the platform. Examples are &#39;sha256&#39;, &#39;sha512&#39;, etc. On recent releases of OpenSSL, openssl list -digest-algorithms (openssl list-message-digest-algorithms for older versions of OpenSSL) will display the available digest algorithms. The key is the HMAC key used to generate the cryptographic HMAC hash. Example: generating the sha256 HMAC of a file const filename = process.argv[2]; const crypto = require(&#39;crypto&#39;); const fs = require(&#39;fs&#39;);  const hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);  const input = fs.createReadStream(filename); input.on(&#39;readable&#39;, () => {   const data = input.read();   if (data)     hmac.update(data);   else {     console.log(`${hmac.digest(&#39;hex&#39;)} ${filename}`);   } });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createsign_algorithm_options","title":"crypto.createSign(algorithm[, options])","description":"Creates and returns a Sign object that uses the given algorithm. Use crypto.getHashes() to obtain an array of names of the available signing algorithms. Optional options argument controls the stream.Writable behavior."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_createverify_algorithm_options","title":"crypto.createVerify(algorithm[, options])","description":"Creates and returns a Verify object that uses the given algorithm. Use crypto.getHashes() to obtain an array of names of the available signing algorithms. Optional options argument controls the stream.Writable behavior."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_getciphers","title":"crypto.getCiphers()","description":"Example: const ciphers = crypto.getCiphers(); console.log(ciphers); \/\/ [&#39;aes-128-cbc&#39;, &#39;aes-128-ccm&#39;, ...]"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_getcurves","title":"crypto.getCurves()","description":"Example: const curves = crypto.getCurves(); console.log(curves); \/\/ [&#39;Oakley-EC2N-3&#39;, &#39;Oakley-EC2N-4&#39;, ...]"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_getdiffiehellman_groupname","title":"crypto.getDiffieHellman(groupName)","description":"Creates a predefined DiffieHellman key exchange object. The supported groups are: &#39;modp1&#39;, &#39;modp2&#39;, &#39;modp5&#39; (defined in RFC 2412, but see Caveats) and &#39;modp14&#39;, &#39;modp15&#39;, &#39;modp16&#39;, &#39;modp17&#39;, &#39;modp18&#39; (defined in RFC 3526). The returned object mimics the interface of objects created by crypto.createDiffieHellman(), but will not allow changing the keys (with diffieHellman.setPublicKey() for example). The advantage of using this method is that the parties do not have to generate nor exchange a group modulus beforehand, saving both processor and communication time. Example (obtaining a shared secret): const crypto = require(&#39;crypto&#39;); const alice = crypto.getDiffieHellman(&#39;modp14&#39;); const bob = crypto.getDiffieHellman(&#39;modp14&#39;);  alice.generateKeys(); bob.generateKeys();  const aliceSecret = alice.computeSecret(bob.getPublicKey(), null, &#39;hex&#39;); const bobSecret = bob.computeSecret(alice.getPublicKey(), null, &#39;hex&#39;);  \/* aliceSecret and bobSecret should be the same *\/ console.log(aliceSecret === bobSecret);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_getfips","title":"crypto.getFips()","description":"Example: const hashes = crypto.getHashes(); console.log(hashes); \/\/ [&#39;DSA&#39;, &#39;DSA-SHA&#39;, &#39;DSA-SHA1&#39;, ...]"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_gethashes","title":"crypto.getHashes()","description":"Example: const hashes = crypto.getHashes(); console.log(hashes); \/\/ [&#39;DSA&#39;, &#39;DSA-SHA&#39;, &#39;DSA-SHA1&#39;, ...]"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback","title":"crypto.pbkdf2(password, salt, iterations, keylen, digest, callback)","description":"Provides an asynchronous Password-Based Key Derivation Function 2 (PBKDF2) implementation. A selected HMAC digest algorithm specified by digest is applied to derive a key of the requested byte length (keylen) from the password, salt and iterations. The supplied callback function is called with two arguments: err and derivedKey. If an error occurs while deriving the key, err will be set; otherwise err will be null. By default, the successfully generated derivedKey will be passed to the callback as a Buffer. An error will be thrown if any of the input arguments specify invalid values or types. The iterations argument must be a number set as high as possible. The higher the number of iterations, the more secure the derived key will be, but will take a longer amount of time to complete. The salt should be as unique as possible. It is recommended that a salt is random and at least 16 bytes long. See NIST SP 800-132 for details. Example: const crypto = require(&#39;crypto&#39;); crypto.pbkdf2(&#39;secret&#39;, &#39;salt&#39;, 100000, 64, &#39;sha512&#39;, (err, derivedKey) => {   if (err) throw err;   console.log(derivedKey.toString(&#39;hex&#39;));  \/\/ &#39;3745e48...08d59ae&#39; });  The crypto.DEFAULT_ENCODING property can be used to change the way the derivedKey is passed to the callback. This property, however, has been deprecated and use should be avoided. const crypto = require(&#39;crypto&#39;); crypto.DEFAULT_ENCODING = &#39;hex&#39;; crypto.pbkdf2(&#39;secret&#39;, &#39;salt&#39;, 100000, 512, &#39;sha512&#39;, (err, derivedKey) => {   if (err) throw err;   console.log(derivedKey);  \/\/ &#39;3745e48...aa39b34&#39; });  An array of supported digest functions can be retrieved using crypto.getHashes(). Note that this API uses libuv&#39;s threadpool, which can have surprising and negative performance implications for some applications, see the UV_THREADPOOL_SIZE documentation for more information."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_pbkdf2sync_password_salt_iterations_keylen_digest","title":"crypto.pbkdf2Sync(password, salt, iterations, keylen, digest)","description":"Provides a synchronous Password-Based Key Derivation Function 2 (PBKDF2) implementation. A selected HMAC digest algorithm specified by digest is applied to derive a key of the requested byte length (keylen) from the password, salt and iterations. If an error occurs an Error will be thrown, otherwise the derived key will be returned as a Buffer. The iterations argument must be a number set as high as possible. The higher the number of iterations, the more secure the derived key will be, but will take a longer amount of time to complete. The salt should be as unique as possible. It is recommended that a salt is random and at least 16 bytes long. See NIST SP 800-132 for details. Example: const crypto = require(&#39;crypto&#39;); const key = crypto.pbkdf2Sync(&#39;secret&#39;, &#39;salt&#39;, 100000, 64, &#39;sha512&#39;); console.log(key.toString(&#39;hex&#39;));  \/\/ &#39;3745e48...08d59ae&#39;  The crypto.DEFAULT_ENCODING property may be used to change the way the derivedKey is returned. This property, however, is deprecated and use should be avoided. const crypto = require(&#39;crypto&#39;); crypto.DEFAULT_ENCODING = &#39;hex&#39;; const key = crypto.pbkdf2Sync(&#39;secret&#39;, &#39;salt&#39;, 100000, 512, &#39;sha512&#39;); console.log(key);  \/\/ &#39;3745e48...aa39b34&#39;  An array of supported digest functions can be retrieved using crypto.getHashes()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_privatedecrypt_privatekey_buffer","title":"crypto.privateDecrypt(privateKey, buffer)","description":"Decrypts buffer with privateKey. privateKey can be an object or a string. If privateKey is a string, it is treated as the key with no passphrase and will use RSA_PKCS1_OAEP_PADDING."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_privateencrypt_privatekey_buffer","title":"crypto.privateEncrypt(privateKey, buffer)","description":"Encrypts buffer with privateKey. privateKey can be an object or a string. If privateKey is a string, it is treated as the key with no passphrase and will use RSA_PKCS1_PADDING."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_publicdecrypt_key_buffer","title":"crypto.publicDecrypt(key, buffer)","description":"Decrypts buffer with key. key can be an object or a string. If key is a string, it is treated as the key with no passphrase and will use RSA_PKCS1_PADDING. Because RSA public keys can be derived from private keys, a private key may be passed instead of a public key."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_publicencrypt_key_buffer","title":"crypto.publicEncrypt(key, buffer)","description":"Encrypts the content of buffer with key and returns a new Buffer with encrypted content. key can be an object or a string. If key is a string, it is treated as the key with no passphrase and will use RSA_PKCS1_OAEP_PADDING. Because RSA public keys can be derived from private keys, a private key may be passed instead of a public key."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_randombytes_size_callback","title":"crypto.randomBytes(size[, callback])","description":"Generates cryptographically strong pseudo-random data. The size argument is a number indicating the number of bytes to generate. If a callback function is provided, the bytes are generated asynchronously and the callback function is invoked with two arguments: err and buf. If an error occurs, err will be an Error object; otherwise it is null. The buf argument is a Buffer containing the generated bytes. \/\/ Asynchronous const crypto = require(&#39;crypto&#39;); crypto.randomBytes(256, (err, buf) => {   if (err) throw err;   console.log(`${buf.length} bytes of random data: ${buf.toString(&#39;hex&#39;)}`); });  If the callback function is not provided, the random bytes are generated synchronously and returned as a Buffer. An error will be thrown if there is a problem generating the bytes. \/\/ Synchronous const buf = crypto.randomBytes(256); console.log(   `${buf.length} bytes of random data: ${buf.toString(&#39;hex&#39;)}`);  The crypto.randomBytes() method will not complete until there is sufficient entropy available. This should normally never take longer than a few milliseconds. The only time when generating the random bytes may conceivably block for a longer period of time is right after boot, when the whole system is still low on entropy. Note that this API uses libuv&#39;s threadpool, which can have surprising and negative performance implications for some applications, see the UV_THREADPOOL_SIZE documentation for more information. The asynchronous version of crypto.randomBytes() is carried out in a single threadpool request. To minimize threadpool task length variation, partition large randomBytes requests when doing so as part of fulfilling a client request."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_randomfillsync_buffer_offset_size","title":"crypto.randomFillSync(buffer[, offset][, size])","description":"Synchronous version of crypto.randomFill(). const buf = Buffer.alloc(10); console.log(crypto.randomFillSync(buf).toString(&#39;hex&#39;));  crypto.randomFillSync(buf, 5); console.log(buf.toString(&#39;hex&#39;));  \/\/ The above is equivalent to the following: crypto.randomFillSync(buf, 5, 5); console.log(buf.toString(&#39;hex&#39;));  Any TypedArray or DataView instance may be passed as buffer. const a = new Uint32Array(10); console.log(crypto.randomFillSync(a).toString(&#39;hex&#39;));  const b = new Float64Array(10); console.log(crypto.randomFillSync(b).toString(&#39;hex&#39;));  const c = new DataView(new ArrayBuffer(10)); console.log(crypto.randomFillSync(c).toString(&#39;hex&#39;));"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_randomfill_buffer_offset_size_callback","title":"crypto.randomFill(buffer[, offset][, size], callback)","description":"This function is similar to crypto.randomBytes() but requires the first argument to be a Buffer that will be filled. It also requires that a callback is passed in. If the callback function is not provided, an error will be thrown. const buf = Buffer.alloc(10); crypto.randomFill(buf, (err, buf) => {   if (err) throw err;   console.log(buf.toString(&#39;hex&#39;)); });  crypto.randomFill(buf, 5, (err, buf) => {   if (err) throw err;   console.log(buf.toString(&#39;hex&#39;)); });  \/\/ The above is equivalent to the following: crypto.randomFill(buf, 5, 5, (err, buf) => {   if (err) throw err;   console.log(buf.toString(&#39;hex&#39;)); });  Any TypedArray or DataView instance may be passed as buffer. const a = new Uint32Array(10); crypto.randomFill(a, (err, buf) => {   if (err) throw err;   console.log(buf.toString(&#39;hex&#39;)); });  const b = new Float64Array(10); crypto.randomFill(b, (err, buf) => {   if (err) throw err;   console.log(buf.toString(&#39;hex&#39;)); });  const c = new DataView(new ArrayBuffer(10)); crypto.randomFill(c, (err, buf) => {   if (err) throw err;   console.log(buf.toString(&#39;hex&#39;)); });  Note that this API uses libuv&#39;s threadpool, which can have surprising and negative performance implications for some applications, see the UV_THREADPOOL_SIZE documentation for more information. The asynchronous version of crypto.randomFill() is carried out in a single threadpool request. To minimize threadpool task length variation, partition large randomFill requests when doing so as part of fulfilling a client request."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_scrypt_password_salt_keylen_options_callback","title":"crypto.scrypt(password, salt, keylen[, options], callback)","description":"Provides an asynchronous scrypt implementation. Scrypt is a password-based key derivation function that is designed to be expensive computationally and memory-wise in order to make brute-force attacks unrewarding. The salt should be as unique as possible. It is recommended that a salt is random and at least 16 bytes long. See NIST SP 800-132 for details. The callback function is called with two arguments: err and derivedKey. err is an exception object when key derivation fails, otherwise err is null. derivedKey is passed to the callback as a Buffer. An exception is thrown when any of the input arguments specify invalid values or types. const crypto = require(&#39;crypto&#39;); \/\/ Using the factory defaults. crypto.scrypt(&#39;secret&#39;, &#39;salt&#39;, 64, (err, derivedKey) => {   if (err) throw err;   console.log(derivedKey.toString(&#39;hex&#39;));  \/\/ &#39;3745e48...08d59ae&#39; }); \/\/ Using a custom N parameter. Must be a power of two. crypto.scrypt(&#39;secret&#39;, &#39;salt&#39;, 64, { N: 1024 }, (err, derivedKey) => {   if (err) throw err;   console.log(derivedKey.toString(&#39;hex&#39;));  \/\/ &#39;3745e48...aa39b34&#39; });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_scryptsync_password_salt_keylen_options","title":"crypto.scryptSync(password, salt, keylen[, options])","description":"Provides a synchronous scrypt implementation. Scrypt is a password-based key derivation function that is designed to be expensive computationally and memory-wise in order to make brute-force attacks unrewarding. The salt should be as unique as possible. It is recommended that a salt is random and at least 16 bytes long. See NIST SP 800-132 for details. An exception is thrown when key derivation fails, otherwise the derived key is returned as a Buffer. An exception is thrown when any of the input arguments specify invalid values or types. const crypto = require(&#39;crypto&#39;); \/\/ Using the factory defaults. const key1 = crypto.scryptSync(&#39;secret&#39;, &#39;salt&#39;, 64); console.log(key1.toString(&#39;hex&#39;));  \/\/ &#39;3745e48...08d59ae&#39; \/\/ Using a custom N parameter. Must be a power of two. const key2 = crypto.scryptSync(&#39;secret&#39;, &#39;salt&#39;, 64, { N: 1024 }); console.log(key2.toString(&#39;hex&#39;));  \/\/ &#39;3745e48...aa39b34&#39;"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_setengine_engine_flags","title":"crypto.setEngine(engine[, flags])","description":"Load and set the engine for some or all OpenSSL functions (selected by flags). engine could be either an id or a path to the engine&#39;s shared library. The optional flags argument uses ENGINE_METHOD_ALL by default. The flags is a bit field taking one of or a mix of the following flags (defined in crypto.constants):  crypto.constants.ENGINE_METHOD_RSA crypto.constants.ENGINE_METHOD_DSA crypto.constants.ENGINE_METHOD_DH crypto.constants.ENGINE_METHOD_RAND crypto.constants.ENGINE_METHOD_EC crypto.constants.ENGINE_METHOD_CIPHERS crypto.constants.ENGINE_METHOD_DIGESTS crypto.constants.ENGINE_METHOD_PKEY_METHS crypto.constants.ENGINE_METHOD_PKEY_ASN1_METHS crypto.constants.ENGINE_METHOD_ALL crypto.constants.ENGINE_METHOD_NONE  The flags below are deprecated in OpenSSL-1.1.0.  crypto.constants.ENGINE_METHOD_ECDH crypto.constants.ENGINE_METHOD_ECDSA crypto.constants.ENGINE_METHOD_STORE"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_setfips_bool","title":"crypto.setFips(bool)","description":"Enables the FIPS compliant crypto provider in a FIPS-enabled Node.js build. Throws an error if FIPS mode is not available."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_timingsafeequal_a_b","title":"crypto.timingSafeEqual(a, b)","description":"This function is based on a constant-time algorithm. Returns true if a is equal to b, without leaking timing information that would allow an attacker to guess one of the values. This is suitable for comparing HMAC digests or secret values like authentication cookies or capability urls. a and b must both be Buffers, TypedArrays, or DataViews, and they must have the same length. Use of crypto.timingSafeEqual does not guarantee that the surrounding code is timing-safe. Care should be taken to ensure that the surrounding code does not introduce timing vulnerabilities."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_notes","title":"Notes","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_legacy_streams_api_pre_node_js_v0_10","title":"Legacy Streams API (pre Node.js v0.10)","description":"The Crypto module was added to Node.js before there was the concept of a unified Stream API, and before there were Buffer objects for handling binary data. As such, the many of the crypto defined classes have methods not typically found on other Node.js classes that implement the streams API (e.g. update(), final(), or digest()). Also, many methods accepted and returned &#39;latin1&#39; encoded strings by default rather than Buffers. This default was changed after Node.js v0.8 to use Buffer objects by default instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_recent_ecdh_changes","title":"Recent ECDH Changes","description":"Usage of ECDH with non-dynamically generated key pairs has been simplified. Now, ecdh.setPrivateKey() can be called with a preselected private key and the associated public point (key) will be computed and stored in the object. This allows code to only store and provide the private part of the EC key pair. ecdh.setPrivateKey() now also validates that the private key is valid for the selected curve. The ecdh.setPublicKey() method is now deprecated as its inclusion in the API is not useful. Either a previously stored private key should be set, which automatically generates the associated public key, or ecdh.generateKeys() should be called. The main drawback of using ecdh.setPublicKey() is that it can be used to put the ECDH key pair into an inconsistent state."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_support_for_weak_or_compromised_algorithms","title":"Support for weak or compromised algorithms","description":"The crypto module still supports some algorithms which are already compromised and are not currently recommended for use. The API also allows the use of ciphers and hashes with a small key size that are considered to be too weak for safe use. Users should take full responsibility for selecting the crypto algorithm and key size according to their security requirements. Based on the recommendations of NIST SP 800-131A:  MD5 and SHA-1 are no longer acceptable where collision resistance is required such as digital signatures. The key used with RSA, DSA, and DH algorithms is recommended to have at least 2048 bits and that of the curve of ECDSA and ECDH at least 224 bits, to be safe to use for several years. The DH groups of modp1, modp2 and modp5 have a key size smaller than 2048 bits and are not recommended.  See the reference for other recommendations and details."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_ccm_mode","title":"CCM mode","description":"CCM is one of the two supported AEAD algorithms. Applications which use this mode must adhere to certain restrictions when using the cipher API:  The authentication tag length must be specified during cipher creation by setting the authTagLength option and must be one of 4, 6, 8, 10, 12, 14 or 16 bytes. The length of the initialization vector (nonce) N must be between 7 and 13 bytes (7 \u2264 N \u2264 13). The length of the plaintext is limited to 2 ** (8 * (15 - N)) bytes. When decrypting, the authentication tag must be set via setAuthTag() before specifying additional authenticated data or calling update(). Otherwise, decryption will fail and final() will throw an error in compliance with section 2.6 of RFC 3610. Using stream methods such as write(data), end(data) or pipe() in CCM mode might fail as CCM cannot handle more than one chunk of data per instance. When passing additional authenticated data (AAD), the length of the actual message in bytes must be passed to setAAD() via the plaintextLength option. This is not necessary if no AAD is used. As CCM processes the whole message at once, update() can only be called once. Even though calling update() is sufficient to encrypt\/decrypt the message, applications must call final() to compute or verify the authentication tag.  const crypto = require(&#39;crypto&#39;);  const key = &#39;keykeykeykeykeykeykeykey&#39;; const nonce = crypto.randomBytes(12);  const aad = Buffer.from(&#39;0123456789&#39;, &#39;hex&#39;);  const cipher = crypto.createCipheriv(&#39;aes-192-ccm&#39;, key, nonce, {   authTagLength: 16 }); const plaintext = &#39;Hello world&#39;; cipher.setAAD(aad, {   plaintextLength: Buffer.byteLength(plaintext) }); const ciphertext = cipher.update(plaintext, &#39;utf8&#39;); cipher.final(); const tag = cipher.getAuthTag();  \/\/ Now transmit { ciphertext, nonce, tag }.  const decipher = crypto.createDecipheriv(&#39;aes-192-ccm&#39;, key, nonce, {   authTagLength: 16 }); decipher.setAuthTag(tag); decipher.setAAD(aad, {   plaintextLength: ciphertext.length }); const receivedPlaintext = decipher.update(ciphertext, null, &#39;utf8&#39;);  try {   decipher.final(); } catch (err) {   console.error(&#39;Authentication failed!&#39;); }  console.log(receivedPlaintext);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_crypto_constants","title":"Crypto Constants","description":"The following constants exported by crypto.constants apply to various uses of the crypto, tls, and https modules and are generally specific to OpenSSL."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_openssl_options","title":"OpenSSL Options","description":"Constant     Description           SSL_OP_ALL     Applies multiple bug workarounds within OpenSSL. See     https:\/\/www.openssl.org\/docs\/man1.0.2\/ssl\/SSL_CTX_set_options.html for     detail.           SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION     Allows legacy insecure renegotiation between OpenSSL and unpatched     clients or servers. See     https:\/\/www.openssl.org\/docs\/man1.0.2\/ssl\/SSL_CTX_set_options.html.           SSL_OP_CIPHER_SERVER_PREFERENCE     Attempts to use the server&#39;s preferences instead of the client&#39;s when     selecting a cipher. Behavior depends on protocol version. See     https:\/\/www.openssl.org\/docs\/man1.0.2\/ssl\/SSL_CTX_set_options.html.           SSL_OP_CISCO_ANYCONNECT     Instructs OpenSSL to use Cisco&#39;s \"speshul\" version of DTLS_BAD_VER.           SSL_OP_COOKIE_EXCHANGE     Instructs OpenSSL to turn on cookie exchange.           SSL_OP_CRYPTOPRO_TLSEXT_BUG     Instructs OpenSSL to add server-hello extension from an early version     of the cryptopro draft.           SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS     Instructs OpenSSL to disable a SSL 3.0\/TLS 1.0 vulnerability     workaround added in OpenSSL 0.9.6d.           SSL_OP_EPHEMERAL_RSA     Instructs OpenSSL to always use the tmp_rsa key when performing RSA     operations.           SSL_OP_LEGACY_SERVER_CONNECT     Allows initial connection to servers that do not support RI.           SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER                SSL_OP_MICROSOFT_SESS_ID_BUG                SSL_OP_MSIE_SSLV2_RSA_PADDING     Instructs OpenSSL to disable the workaround for a man-in-the-middle     protocol-version vulnerability in the SSL 2.0 server implementation.           SSL_OP_NETSCAPE_CA_DN_BUG                SSL_OP_NETSCAPE_CHALLENGE_BUG                SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG                SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG                SSL_OP_NO_COMPRESSION     Instructs OpenSSL to disable support for SSL\/TLS compression.           SSL_OP_NO_QUERY_MTU                SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION     Instructs OpenSSL to always start a new session when performing     renegotiation.           SSL_OP_NO_SSLv2     Instructs OpenSSL to turn off SSL v2           SSL_OP_NO_SSLv3     Instructs OpenSSL to turn off SSL v3           SSL_OP_NO_TICKET     Instructs OpenSSL to disable use of RFC4507bis tickets.           SSL_OP_NO_TLSv1     Instructs OpenSSL to turn off TLS v1           SSL_OP_NO_TLSv1_1     Instructs OpenSSL to turn off TLS v1.1           SSL_OP_NO_TLSv1_2     Instructs OpenSSL to turn off TLS v1.2        SSL_OP_PKCS1_CHECK_1                SSL_OP_PKCS1_CHECK_2                SSL_OP_SINGLE_DH_USE     Instructs OpenSSL to always create a new key when using     temporary\/ephemeral DH parameters.           SSL_OP_SINGLE_ECDH_USE     Instructs OpenSSL to always create a new key when using     temporary\/ephemeral ECDH parameters.        SSL_OP_SSLEAY_080_CLIENT_DH_BUG                SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG                SSL_OP_TLS_BLOCK_PADDING_BUG                SSL_OP_TLS_D5_BUG                SSL_OP_TLS_ROLLBACK_BUG     Instructs OpenSSL to disable version rollback attack detection."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_openssl_engine_constants","title":"OpenSSL Engine Constants","description":"Constant     Description           ENGINE_METHOD_RSA     Limit engine usage to RSA           ENGINE_METHOD_DSA     Limit engine usage to DSA           ENGINE_METHOD_DH     Limit engine usage to DH           ENGINE_METHOD_RAND     Limit engine usage to RAND           ENGINE_METHOD_EC     Limit engine usage to EC           ENGINE_METHOD_CIPHERS     Limit engine usage to CIPHERS           ENGINE_METHOD_DIGESTS     Limit engine usage to DIGESTS           ENGINE_METHOD_PKEY_METHS     Limit engine usage to PKEY_METHDS           ENGINE_METHOD_PKEY_ASN1_METHS     Limit engine usage to PKEY_ASN1_METHS           ENGINE_METHOD_ALL                ENGINE_METHOD_NONE"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_other_openssl_constants","title":"Other OpenSSL Constants","description":"Constant     Description           DH_CHECK_P_NOT_SAFE_PRIME                DH_CHECK_P_NOT_PRIME                DH_UNABLE_TO_CHECK_GENERATOR                DH_NOT_SUITABLE_GENERATOR                ALPN_ENABLED                RSA_PKCS1_PADDING                RSA_SSLV23_PADDING                RSA_NO_PADDING                RSA_PKCS1_OAEP_PADDING                RSA_X931_PADDING                RSA_PKCS1_PSS_PADDING                RSA_PSS_SALTLEN_DIGEST     Sets the salt length for RSA_PKCS1_PSS_PADDING to the digest size         when signing or verifying.           RSA_PSS_SALTLEN_MAX_SIGN     Sets the salt length for RSA_PKCS1_PSS_PADDING to the maximum         permissible value when signing data.           RSA_PSS_SALTLEN_AUTO     Causes the salt length for RSA_PKCS1_PSS_PADDING to be determined         automatically when verifying a signature.           POINT_CONVERSION_COMPRESSED                POINT_CONVERSION_UNCOMPRESSED                POINT_CONVERSION_HYBRID"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_node_js_crypto_constants","title":"Node.js Crypto Constants","description":"Constant     Description           defaultCoreCipherList     Specifies the built-in default cipher list used by Node.js.           defaultCipherList     Specifies the active default cipher list used by the current Node.js     process."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns","title":"DNS","description":"The dns module contains functions belonging to two different categories: 1) Functions that use the underlying operating system facilities to perform name resolution, and that do not necessarily perform any network communication. This category contains only one function: dns.lookup(). Developers looking to perform name resolution in the same way that other applications on the same operating system behave should use dns.lookup(). For example, looking up iana.org. const dns = require(&#39;dns&#39;);  dns.lookup(&#39;iana.org&#39;, (err, address, family) => {   console.log(&#39;address: %j family: IPv%s&#39;, address, family); }); \/\/ address: \"192.0.43.8\" family: IPv4  2) Functions that connect to an actual DNS server to perform name resolution, and that always use the network to perform DNS queries. This category contains all functions in the dns module except dns.lookup(). These functions do not use the same set of configuration files used by dns.lookup() (e.g. \/etc\/hosts). These functions should be used by developers who do not want to use the underlying operating system&#39;s facilities for name resolution, and instead want to always perform DNS queries. Below is an example that resolves &#39;archive.org&#39; then reverse resolves the IP addresses that are returned. const dns = require(&#39;dns&#39;);  dns.resolve4(&#39;archive.org&#39;, (err, addresses) => {   if (err) throw err;    console.log(`addresses: ${JSON.stringify(addresses)}`);    addresses.forEach((a) => {     dns.reverse(a, (err, hostnames) => {       if (err) {         throw err;       }       console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);     });   }); });  There are subtle consequences in choosing one over the other, please consult the Implementation considerations section for more information."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_getservers","title":"dns.getServers()","description":"Returns an array of IP address strings, formatted according to rfc5952, that are currently configured for DNS resolution. A string will include a port section if a custom port is used.  [   &#39;4.4.4.4&#39;,   &#39;2001:4860:4860::8888&#39;,   &#39;4.4.4.4:1053&#39;,   &#39;[2001:4860:4860::8888]:1053&#39; ]"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_lookup_hostname_options_callback","title":"dns.lookup(hostname[, options], callback)","description":"Resolves a hostname (e.g. &#39;nodejs.org&#39;) into the first found A (IPv4) or AAAA (IPv6) record. All option properties are optional. If options is an integer, then it must be 4 or 6 \u2013 if options is not provided, then IPv4 and IPv6 addresses are both returned if found. With the all option set to true, the arguments for callback change to (err, addresses), with addresses being an array of objects with the properties address and family. On error, err is an Error object, where err.code is the error code. Keep in mind that err.code will be set to &#39;ENOENT&#39; not only when the hostname does not exist but also when the lookup fails in other ways such as no available file descriptors. dns.lookup() does not necessarily have anything to do with the DNS protocol. The implementation uses an operating system facility that can associate names with addresses, and vice versa. This implementation can have subtle but important consequences on the behavior of any Node.js program. Please take some time to consult the Implementation considerations section before using dns.lookup(). Example usage: const dns = require(&#39;dns&#39;); const options = {   family: 6,   hints: dns.ADDRCONFIG | dns.V4MAPPED, }; dns.lookup(&#39;example.com&#39;, options, (err, address, family) =>   console.log(&#39;address: %j family: IPv%s&#39;, address, family)); \/\/ address: \"2606:2800:220:1:248:1893:25c8:1946\" family: IPv6  \/\/ When options.all is true, the result will be an Array. options.all = true; dns.lookup(&#39;example.com&#39;, options, (err, addresses) =>   console.log(&#39;addresses: %j&#39;, addresses)); \/\/ addresses: [{\"address\":\"2606:2800:220:1:248:1893:25c8:1946\",\"family\":6}]  If this method is invoked as its util.promisify()ed version, and all is not set to true, it returns a Promise for an Object with address and family properties."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_supported_getaddrinfo_flags","title":"Supported getaddrinfo flags","description":"The following flags can be passed as hints to dns.lookup().  dns.ADDRCONFIG: Returned address types are determined by the types of addresses supported by the current system. For example, IPv4 addresses are only returned if the current system has at least one IPv4 address configured. Loopback addresses are not considered. dns.V4MAPPED: If the IPv6 family was specified, but no IPv6 addresses were found, then return IPv4 mapped IPv6 addresses. Note that it is not supported on some operating systems (e.g FreeBSD 10.1)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_lookupservice_address_port_callback","title":"dns.lookupService(address, port, callback)","description":"Resolves the given address and port into a hostname and service using the operating system&#39;s underlying getnameinfo implementation. If address is not a valid IP address, a TypeError will be thrown. The port will be coerced to a number. If it is not a legal port, a TypeError will be thrown. On an error, err is an Error object, where err.code is the error code. const dns = require(&#39;dns&#39;); dns.lookupService(&#39;127.0.0.1&#39;, 22, (err, hostname, service) => {   console.log(hostname, service);   \/\/ Prints: localhost ssh });  If this method is invoked as its util.promisify()ed version, it returns a Promise for an Object with hostname and service properties."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolve_hostname_rrtype_callback","title":"dns.resolve(hostname[, rrtype], callback)","description":"Uses the DNS protocol to resolve a hostname (e.g. &#39;nodejs.org&#39;) into an array of the resource records. The callback function has arguments (err, records). When successful, records will be an array of resource records. The type and structure of individual results varies based on rrtype:    rrtype records contains Result type Shorthand method     &#39;A&#39; IPv4 addresses (default) {string} dns.resolve4()   &#39;AAAA&#39; IPv6 addresses {string} dns.resolve6()   &#39;ANY&#39; any records {Object} dns.resolveAny()   &#39;CNAME&#39; canonical name records {string} dns.resolveCname()   &#39;MX&#39; mail exchange records {Object} dns.resolveMx()   &#39;NAPTR&#39; name authority pointer records {Object} dns.resolveNaptr()   &#39;NS&#39; name server records {string} dns.resolveNs()   &#39;PTR&#39; pointer records {string} dns.resolvePtr()   &#39;SOA&#39; start of authority records {Object} dns.resolveSoa()   &#39;SRV&#39; service records {Object} dns.resolveSrv()   &#39;TXT&#39; text records {string[]} dns.resolveTxt()    On error, err is an Error object, where err.code is one of the DNS error codes."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolve4_hostname_options_callback","title":"dns.resolve4(hostname[, options], callback)","description":"Uses the DNS protocol to resolve a IPv4 addresses (A records) for the hostname. The addresses argument passed to the callback function will contain an array of IPv4 addresses (e.g. [&#39;74.125.79.104&#39;, &#39;74.125.79.105&#39;, &#39;74.125.79.106&#39;])."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolve6_hostname_options_callback","title":"dns.resolve6(hostname[, options], callback)","description":"Uses the DNS protocol to resolve a IPv6 addresses (AAAA records) for the hostname. The addresses argument passed to the callback function will contain an array of IPv6 addresses."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolveany_hostname_callback","title":"dns.resolveAny(hostname, callback)","description":"Uses the DNS protocol to resolve all records (also known as ANY or * query). The ret argument passed to the callback function will be an array containing various types of records. Each object has a property type that indicates the type of the current record. And depending on the type, additional properties will be present on the object:    Type Properties     &#39;A&#39; address\/ttl   &#39;AAAA&#39; address\/ttl   &#39;CNAME&#39; value   &#39;MX&#39; Refer to dns.resolveMx()   &#39;NAPTR&#39; Refer to dns.resolveNaptr()   &#39;NS&#39; value   &#39;PTR&#39; value   &#39;SOA&#39; Refer to dns.resolveSoa()   &#39;SRV&#39; Refer to dns.resolveSrv()   &#39;TXT&#39; This type of record contains an array property called entries which refers to dns.resolveTxt(), e.g. { entries: [&#39;...&#39;], type: &#39;TXT&#39; }    Here is an example of the ret object passed to the callback:  [ { type: &#39;A&#39;, address: &#39;127.0.0.1&#39;, ttl: 299 },   { type: &#39;CNAME&#39;, value: &#39;example.com&#39; },   { type: &#39;MX&#39;, exchange: &#39;alt4.aspmx.l.example.com&#39;, priority: 50 },   { type: &#39;NS&#39;, value: &#39;ns1.example.com&#39; },   { type: &#39;TXT&#39;, entries: [ &#39;v=spf1 include:_spf.example.com ~all&#39; ] },   { type: &#39;SOA&#39;,     nsname: &#39;ns1.example.com&#39;,     hostmaster: &#39;admin.example.com&#39;,     serial: 156696742,     refresh: 900,     retry: 900,     expire: 1800,     minttl: 60 } ]"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolvecname_hostname_callback","title":"dns.resolveCname(hostname, callback)","description":"Uses the DNS protocol to resolve CNAME records for the hostname. The addresses argument passed to the callback function will contain an array of canonical name records available for the hostname (e.g. [&#39;bar.example.com&#39;])."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolvemx_hostname_callback","title":"dns.resolveMx(hostname, callback)","description":"Uses the DNS protocol to resolve mail exchange records (MX records) for the hostname. The addresses argument passed to the callback function will contain an array of objects containing both a priority and exchange property (e.g. [{priority: 10, exchange: &#39;mx.example.com&#39;}, ...])."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolvenaptr_hostname_callback","title":"dns.resolveNaptr(hostname, callback)","description":"Uses the DNS protocol to resolve regular expression based records (NAPTR records) for the hostname. The addresses argument passed to the callback function will contain an array of objects with the following properties:  flags service regexp replacement order preference   {   flags: &#39;s&#39;,   service: &#39;SIP+D2U&#39;,   regexp: &#39;&#39;,   replacement: &#39;_sip._udp.example.com&#39;,   order: 30,   preference: 100 }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolvens_hostname_callback","title":"dns.resolveNs(hostname, callback)","description":"Uses the DNS protocol to resolve name server records (NS records) for the hostname. The addresses argument passed to the callback function will contain an array of name server records available for hostname (e.g. [&#39;ns1.example.com&#39;, &#39;ns2.example.com&#39;])."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolveptr_hostname_callback","title":"dns.resolvePtr(hostname, callback)","description":"Uses the DNS protocol to resolve pointer records (PTR records) for the hostname. The addresses argument passed to the callback function will be an array of strings containing the reply records."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolvesoa_hostname_callback","title":"dns.resolveSoa(hostname, callback)","description":"Uses the DNS protocol to resolve a start of authority record (SOA record) for the hostname. The address argument passed to the callback function will be an object with the following properties:  nsname hostmaster serial refresh retry expire minttl   {   nsname: &#39;ns.example.com&#39;,   hostmaster: &#39;root.example.com&#39;,   serial: 2013101809,   refresh: 10000,   retry: 2400,   expire: 604800,   minttl: 3600 }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolvesrv_hostname_callback","title":"dns.resolveSrv(hostname, callback)","description":"Uses the DNS protocol to resolve service records (SRV records) for the hostname. The addresses argument passed to the callback function will be an array of objects with the following properties:  priority weight port name   {   priority: 10,   weight: 5,   port: 21223,   name: &#39;service.example.com&#39; }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolvetxt_hostname_callback","title":"dns.resolveTxt(hostname, callback)","description":"Uses the DNS protocol to resolve text queries (TXT records) for the hostname. The records argument passed to the callback function is a two-dimensional array of the text records available for hostname (e.g. [ [&#39;v=spf1 ip4:0.0.0.0 &#39;, &#39;~all&#39; ] ]). Each sub-array contains TXT chunks of one record. Depending on the use case, these could be either joined together or treated separately."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_reverse_ip_callback","title":"dns.reverse(ip, callback)","description":"Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an array of hostnames. On error, err is an Error object, where err.code is one of the DNS error codes."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_setservers_servers","title":"dns.setServers(servers)","description":"Sets the IP address and port of servers to be used when performing DNS resolution. The servers argument is an array of rfc5952 formatted addresses. If the port is the IANA default DNS port (53) it can be omitted. dns.setServers([   &#39;4.4.4.4&#39;,   &#39;[2001:4860:4860::8888]&#39;,   &#39;4.4.4.4:1053&#39;,   &#39;[2001:4860:4860::8888]:1053&#39; ]);  An error will be thrown if an invalid address is provided. The dns.setServers() method must not be called while a DNS query is in progress. Note that this method works much like resolve.conf. That is, if attempting to resolve with the first server provided results in a NOTFOUND error, the resolve() method will not attempt to resolve with subsequent servers provided. Fallback DNS servers will only be used if the earlier ones time out or result in some other error."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_promises_api","title":"DNS Promises API","description":"The dns.promises API provides an alternative set of asynchronous DNS methods that return Promise objects rather than using callbacks. The API is accessible via require(&#39;dns&#39;).promises."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dnspromises_getservers","title":"dnsPromises.getServers()","description":"Returns an array of IP address strings, formatted according to rfc5952, that are currently configured for DNS resolution. A string will include a port section if a custom port is used.  [   &#39;4.4.4.4&#39;,   &#39;2001:4860:4860::8888&#39;,   &#39;4.4.4.4:1053&#39;,   &#39;[2001:4860:4860::8888]:1053&#39; ]"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dnspromises_lookup_hostname_options","title":"dnsPromises.lookup(hostname[, options])","description":"Resolves a hostname (e.g. &#39;nodejs.org&#39;) into the first found A (IPv4) or AAAA (IPv6) record. All option properties are optional. If options is an integer, then it must be 4 or 6 \u2013 if options is not provided, then IPv4 and IPv6 addresses are both returned if found. With the all option set to true, the Promise is resolved with addresses being an array of objects with the properties address and family. On error, the Promise is rejected with an Error object, where err.code is the error code. Keep in mind that err.code will be set to &#39;ENOENT&#39; not only when the hostname does not exist but also when the lookup fails in other ways such as no available file descriptors. dnsPromises.lookup() does not necessarily have anything to do with the DNS protocol. The implementation uses an operating system facility that can associate names with addresses, and vice versa. This implementation can have subtle but important consequences on the behavior of any Node.js program. Please take some time to consult the Implementation considerations section before using dnsPromises.lookup(). Example usage: const dns = require(&#39;dns&#39;); const dnsPromises = dns.promises; const options = {   family: 6,   hints: dns.ADDRCONFIG | dns.V4MAPPED, };  dnsPromises.lookup(&#39;example.com&#39;, options).then((result) => {   console.log(&#39;address: %j family: IPv%s&#39;, result.address, result.family);   \/\/ address: \"2606:2800:220:1:248:1893:25c8:1946\" family: IPv6 });  \/\/ When options.all is true, the result will be an Array. options.all = true; dnsPromises.lookup(&#39;example.com&#39;, options).then((result) => {   console.log(&#39;addresses: %j&#39;, result);   \/\/ addresses: [{\"address\":\"2606:2800:220:1:248:1893:25c8:1946\",\"family\":6}] });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dnspromises_lookupservice_address_port","title":"dnsPromises.lookupService(address, port)","description":"Resolves the given address and port into a hostname and service using the operating system&#39;s underlying getnameinfo implementation. If address is not a valid IP address, a TypeError will be thrown. The port will be coerced to a number. If it is not a legal port, a TypeError will be thrown. On error, the Promise is rejected with an Error object, where err.code is the error code. const dnsPromises = require(&#39;dns&#39;).promises; dnsPromises.lookupService(&#39;127.0.0.1&#39;, 22).then((result) => {   console.log(result.hostname, result.service);   \/\/ Prints: localhost ssh });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dnspromises_resolve_hostname_rrtype","title":"dnsPromises.resolve(hostname[, rrtype])","description":"Uses the DNS protocol to resolve a hostname (e.g. &#39;nodejs.org&#39;) into an array of the resource records. When successful, the Promise is resolved with an array of resource records. The type and structure of individual results vary based on rrtype:    rrtype records contains Result type Shorthand method     &#39;A&#39; IPv4 addresses (default) {string} dnsPromises.resolve4()   &#39;AAAA&#39; IPv6 addresses {string} dnsPromises.resolve6()   &#39;ANY&#39; any records {Object} dnsPromises.resolveAny()   &#39;CNAME&#39; canonical name records {string} dnsPromises.resolveCname()   &#39;MX&#39; mail exchange records {Object} dnsPromises.resolveMx()   &#39;NAPTR&#39; name authority pointer records {Object} dnsPromises.resolveNaptr()   &#39;NS&#39; name server records {string} dnsPromises.resolveNs()   &#39;PTR&#39; pointer records {string} dnsPromises.resolvePtr()   &#39;SOA&#39; start of authority records {Object} dnsPromises.resolveSoa()   &#39;SRV&#39; service records {Object} dnsPromises.resolveSrv()   &#39;TXT&#39; text records {string[]} dnsPromises.resolveTxt()    On error, the Promise is rejected with an Error object, where err.code is one of the DNS error codes."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dnspromises_resolve4_hostname_options","title":"dnsPromises.resolve4(hostname[, options])","description":"Uses the DNS protocol to resolve IPv4 addresses (A records) for the hostname. On success, the Promise is resolved with an array of IPv4 addresses (e.g. [&#39;74.125.79.104&#39;, &#39;74.125.79.105&#39;, &#39;74.125.79.106&#39;])."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dnspromises_resolve6_hostname_options","title":"dnsPromises.resolve6(hostname[, options])","description":"Uses the DNS protocol to resolve IPv6 addresses (AAAA records) for the hostname. On success, the Promise is resolved with an array of IPv6 addresses."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dnspromises_resolveany_hostname","title":"dnsPromises.resolveAny(hostname)","description":"Uses the DNS protocol to resolve all records (also known as ANY or * query). On success, the Promise is resolved with an array containing various types of records. Each object has a property type that indicates the type of the current record. And depending on the type, additional properties will be present on the object:    Type Properties     &#39;A&#39; address\/ttl   &#39;AAAA&#39; address\/ttl   &#39;CNAME&#39; value   &#39;MX&#39; Refer to dnsPromises.resolveMx()   &#39;NAPTR&#39; Refer to dnsPromises.resolveNaptr()   &#39;NS&#39; value   &#39;PTR&#39; value   &#39;SOA&#39; Refer to dnsPromises.resolveSoa()   &#39;SRV&#39; Refer to dnsPromises.resolveSrv()   &#39;TXT&#39; This type of record contains an array property called entries which refers to dnsPromises.resolveTxt(), e.g. { entries: [&#39;...&#39;], type: &#39;TXT&#39; }    Here is an example of the result object:  [ { type: &#39;A&#39;, address: &#39;127.0.0.1&#39;, ttl: 299 },   { type: &#39;CNAME&#39;, value: &#39;example.com&#39; },   { type: &#39;MX&#39;, exchange: &#39;alt4.aspmx.l.example.com&#39;, priority: 50 },   { type: &#39;NS&#39;, value: &#39;ns1.example.com&#39; },   { type: &#39;TXT&#39;, entries: [ &#39;v=spf1 include:_spf.example.com ~all&#39; ] },   { type: &#39;SOA&#39;,     nsname: &#39;ns1.example.com&#39;,     hostmaster: &#39;admin.example.com&#39;,     serial: 156696742,     refresh: 900,     retry: 900,     expire: 1800,     minttl: 60 } ]"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dnspromises_resolvecname_hostname","title":"dnsPromises.resolveCname(hostname)","description":"Uses the DNS protocol to resolve CNAME records for the hostname. On success, the Promise is resolved with an array of canonical name records available for the hostname (e.g. [&#39;bar.example.com&#39;])."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dnspromises_resolvemx_hostname","title":"dnsPromises.resolveMx(hostname)","description":"Uses the DNS protocol to resolve mail exchange records (MX records) for the hostname. On success, the Promise is resolved with an array of objects containing both a priority and exchange property (e.g. [{priority: 10, exchange: &#39;mx.example.com&#39;}, ...])."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dnspromises_resolvenaptr_hostname","title":"dnsPromises.resolveNaptr(hostname)","description":"Uses the DNS protocol to resolve regular expression based records (NAPTR records) for the hostname. On success, the Promise is resolved with an array of objects with the following properties:  flags service regexp replacement order preference   {   flags: &#39;s&#39;,   service: &#39;SIP+D2U&#39;,   regexp: &#39;&#39;,   replacement: &#39;_sip._udp.example.com&#39;,   order: 30,   preference: 100 }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dnspromises_resolvens_hostname","title":"dnsPromises.resolveNs(hostname)","description":"Uses the DNS protocol to resolve name server records (NS records) for the hostname. On success, the Promise is resolved with an array of name server records available for hostname (e.g. [&#39;ns1.example.com&#39;, &#39;ns2.example.com&#39;])."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dnspromises_resolveptr_hostname","title":"dnsPromises.resolvePtr(hostname)","description":"Uses the DNS protocol to resolve pointer records (PTR records) for the hostname. On success, the Promise is resolved with an array of strings containing the reply records."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dnspromises_resolvesoa_hostname","title":"dnsPromises.resolveSoa(hostname)","description":"Uses the DNS protocol to resolve a start of authority record (SOA record) for the hostname. On success, the Promise is resolved with an object with the following properties:  nsname hostmaster serial refresh retry expire minttl   {   nsname: &#39;ns.example.com&#39;,   hostmaster: &#39;root.example.com&#39;,   serial: 2013101809,   refresh: 10000,   retry: 2400,   expire: 604800,   minttl: 3600 }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dnspromises_resolvesrv_hostname","title":"dnsPromises.resolveSrv(hostname)","description":"Uses the DNS protocol to resolve service records (SRV records) for the hostname. On success, the Promise is resolved with an array of objects with the following properties:  priority weight port name   {   priority: 10,   weight: 5,   port: 21223,   name: &#39;service.example.com&#39; }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dnspromises_resolvetxt_hostname","title":"dnsPromises.resolveTxt(hostname)","description":"Uses the DNS protocol to resolve text queries (TXT records) for the hostname. On success, the Promise is resolved with a two-dimensional array of the text records available for hostname (e.g. [ [&#39;v=spf1 ip4:0.0.0.0 &#39;, &#39;~all&#39; ] ]). Each sub-array contains TXT chunks of one record. Depending on the use case, these could be either joined together or treated separately."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dnspromises_reverse_ip","title":"dnsPromises.reverse(ip)","description":"Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an array of hostnames. On error, the Promise is rejected with an Error object, where err.code is one of the DNS error codes."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dnspromises_setservers_servers","title":"dnsPromises.setServers(servers)","description":"Sets the IP address and port of servers to be used when performing DNS resolution. The servers argument is an array of rfc5952 formatted addresses. If the port is the IANA default DNS port (53) it can be omitted. dnsPromises.setServers([   &#39;4.4.4.4&#39;,   &#39;[2001:4860:4860::8888]&#39;,   &#39;4.4.4.4:1053&#39;,   &#39;[2001:4860:4860::8888]:1053&#39; ]);  An error will be thrown if an invalid address is provided. The dnsPromises.setServers() method must not be called while a DNS query is in progress. Note that this method works much like resolve.conf. That is, if attempting to resolve with the first server provided results in a NOTFOUND error, the resolve() method will not attempt to resolve with subsequent servers provided. Fallback DNS servers will only be used if the earlier ones time out or result in some other error."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_error_codes","title":"Error codes","description":"Each DNS query can return one of the following error codes:  dns.NODATA: DNS server returned answer with no data. dns.FORMERR: DNS server claims query was misformatted. dns.SERVFAIL: DNS server returned general failure. dns.NOTFOUND: Domain name not found. dns.NOTIMP: DNS server does not implement requested operation. dns.REFUSED: DNS server refused query. dns.BADQUERY: Misformatted DNS query. dns.BADNAME: Misformatted hostname. dns.BADFAMILY: Unsupported address family. dns.BADRESP: Misformatted DNS reply. dns.CONNREFUSED: Could not contact DNS servers. dns.TIMEOUT: Timeout while contacting DNS servers. dns.EOF: End of file. dns.FILE: Error reading file. dns.NOMEM: Out of memory. dns.DESTRUCTION: Channel is being destroyed. dns.BADSTR: Misformatted string. dns.BADFLAGS: Illegal flags specified. dns.NONAME: Given hostname is not numeric. dns.BADHINTS: Illegal hints flags specified. dns.NOTINITIALIZED: c-ares library initialization not yet performed. dns.LOADIPHLPAPI: Error loading iphlpapi.dll. dns.ADDRGETNETWORKPARAMS: Could not find GetNetworkParams function. dns.CANCELLED: DNS query cancelled."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_implementation_considerations","title":"Implementation considerations","description":"Although dns.lookup() and the various dns.resolve*()\/dns.reverse() functions have the same goal of associating a network name with a network address (or vice versa), their behavior is quite different. These differences can have subtle but significant consequences on the behavior of Node.js programs."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_lookup","title":"`dns.lookup()`","description":"Under the hood, dns.lookup() uses the same operating system facilities as most other programs. For instance, dns.lookup() will almost always resolve a given name the same way as the ping command. On most POSIX-like operating systems, the behavior of the dns.lookup() function can be modified by changing settings in nsswitch.conf(5) and\/or resolv.conf(5), but note that changing these files will change the behavior of all other programs running on the same operating system. Though the call to dns.lookup() will be asynchronous from JavaScript&#39;s perspective, it is implemented as a synchronous call to getaddrinfo(3) that runs on libuv&#39;s threadpool. This can have surprising negative performance implications for some applications, see the UV_THREADPOOL_SIZE documentation for more information. Note that various networking APIs will call dns.lookup() internally to resolve host names. If that is an issue, consider resolving the hostname to and address using dns.resolve() and using the address instead of a host name. Also, some networking APIs (such as socket.connect() and dgram.createSocket()) allow the default resolver, dns.lookup(), to be replaced."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dns_resolve_dns_resolve_and_dns_reverse","title":"`dns.resolve()`, `dns.resolve*()` and `dns.reverse()`","description":"These functions are implemented quite differently than dns.lookup(). They do not use getaddrinfo(3) and they always perform a DNS query on the network. This network communication is always done asynchronously, and does not use libuv&#39;s threadpool. As a result, these functions cannot have the same negative impact on other processing that happens on libuv&#39;s threadpool that dns.lookup() can have. They do not use the same set of configuration files than what dns.lookup() uses. For instance, they do not use the configuration from \/etc\/hosts."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_domain","title":"Domain","description":"This module is pending deprecation. Once a replacement API has been finalized, this module will be fully deprecated. Most end users should not have cause to use this module. Users who absolutely must have the functionality that domains provide may rely on it for the time being but should expect to have to migrate to a different solution in the future. Domains provide a way to handle multiple different IO operations as a single group. If any of the event emitters or callbacks registered to a domain emit an &#39;error&#39; event, or throw an error, then the domain object will be notified, rather than losing the context of the error in the process.on(&#39;uncaughtException&#39;) handler, or causing the program to exit immediately with an error code."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_domain_create","title":"domain.create()","description":"The Domain class encapsulates the functionality of routing errors and uncaught exceptions to the active Domain object. Domain is a child class of EventEmitter. To handle the errors that it catches, listen to its &#39;error&#39; event."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_domain_add_emitter","title":"domain.add(emitter)","description":"Explicitly adds an emitter to the domain. If any event handlers called by the emitter throw an error, or if the emitter emits an &#39;error&#39; event, it will be routed to the domain&#39;s &#39;error&#39; event, just like with implicit binding. This also works with timers that are returned from setInterval() and setTimeout(). If their callback function throws, it will be caught by the domain &#39;error&#39; handler. If the Timer or EventEmitter was already bound to a domain, it is removed from that one, and bound to this one instead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_domain_bind_callback","title":"domain.bind(callback)","description":"The returned function will be a wrapper around the supplied callback function. When the returned function is called, any errors that are thrown will be routed to the domain&#39;s &#39;error&#39; event. Example const d = domain.create();  function readSomeFile(filename, cb) {   fs.readFile(filename, &#39;utf8&#39;, d.bind((er, data) => {     \/\/ if this throws, it will also be passed to the domain     return cb(er, data ? JSON.parse(data) : null);   })); }  d.on(&#39;error&#39;, (er) => {   \/\/ an error occurred somewhere.   \/\/ if we throw it now, it will crash the program   \/\/ with the normal line number and stack message. });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_domain_enter","title":"domain.enter()","description":"The enter() method is plumbing used by the run(), bind(), and intercept() methods to set the active domain. It sets domain.active and process.domain to the domain, and implicitly pushes the domain onto the domain stack managed by the domain module (see domain.exit() for details on the domain stack). The call to enter() delimits the beginning of a chain of asynchronous calls and I\/O operations bound to a domain. Calling enter() changes only the active domain, and does not alter the domain itself. enter() and exit() can be called an arbitrary number of times on a single domain."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_domain_exit","title":"domain.exit()","description":"The exit() method exits the current domain, popping it off the domain stack. Any time execution is going to switch to the context of a different chain of asynchronous calls, it&#39;s important to ensure that the current domain is exited. The call to exit() delimits either the end of or an interruption to the chain of asynchronous calls and I\/O operations bound to a domain. If there are multiple, nested domains bound to the current execution context, exit() will exit any domains nested within this domain. Calling exit() changes only the active domain, and does not alter the domain itself. enter() and exit() can be called an arbitrary number of times on a single domain."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_domain_intercept_callback","title":"domain.intercept(callback)","description":"This method is almost identical to domain.bind(callback). However, in addition to catching thrown errors, it will also intercept Error objects sent as the first argument to the function. In this way, the common if (err) return callback(err); pattern can be replaced with a single error handler in a single place. Example const d = domain.create();  function readSomeFile(filename, cb) {   fs.readFile(filename, &#39;utf8&#39;, d.intercept((data) => {     \/\/ note, the first argument is never passed to the     \/\/ callback since it is assumed to be the &#39;Error&#39; argument     \/\/ and thus intercepted by the domain.      \/\/ if this throws, it will also be passed to the domain     \/\/ so the error-handling logic can be moved to the &#39;error&#39;     \/\/ event on the domain instead of being repeated throughout     \/\/ the program.     return cb(null, JSON.parse(data));   })); }  d.on(&#39;error&#39;, (er) => {   \/\/ an error occurred somewhere.   \/\/ if we throw it now, it will crash the program   \/\/ with the normal line number and stack message. });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_domain_remove_emitter","title":"domain.remove(emitter)","description":"The opposite of domain.add(emitter). Removes domain handling from the specified emitter."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_domain_run_fn_args","title":"domain.run(fn[, ...args])","description":"Run the supplied function in the context of the domain, implicitly binding all event emitters, timers, and lowlevel requests that are created in that context. Optionally, arguments can be passed to the function. This is the most basic way to use a domain. Example: const domain = require(&#39;domain&#39;); const fs = require(&#39;fs&#39;); const d = domain.create(); d.on(&#39;error&#39;, (er) => {   console.error(&#39;Caught error!&#39;, er); }); d.run(() => {   process.nextTick(() => {     setTimeout(() => { \/\/ simulating some various async stuff       fs.open(&#39;non-existent file&#39;, &#39;r&#39;, (er, fd) => {         if (er) throw er;         \/\/ proceed...       });     }, 100);   }); });  In this example, the d.on(&#39;error&#39;) handler will be triggered, rather than crashing the program."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_warning_don_t_ignore_errors","title":"Warning: Don't Ignore Errors!","description":"Domain error handlers are not a substitute for closing down a process when an error occurs. By the very nature of how throw works in JavaScript, there is almost never any way to safely \"pick up where you left off\", without leaking references, or creating some other sort of undefined brittle state. The safest way to respond to a thrown error is to shut down the process. Of course, in a normal web server, there may be many open connections, and it is not reasonable to abruptly shut those down because an error was triggered by someone else. The better approach is to send an error response to the request that triggered the error, while letting the others finish in their normal time, and stop listening for new requests in that worker. In this way, domain usage goes hand-in-hand with the cluster module, since the master process can fork a new worker when a worker encounters an error. For Node.js programs that scale to multiple machines, the terminating proxy or service registry can take note of the failure, and react accordingly. For example, this is not a good idea: \/\/ XXX WARNING! BAD IDEA!  const d = require(&#39;domain&#39;).create(); d.on(&#39;error&#39;, (er) => {   \/\/ The error won&#39;t crash the process, but what it does is worse!   \/\/ Though we&#39;ve prevented abrupt process restarting, we are leaking   \/\/ resources like crazy if this ever happens.   \/\/ This is no better than process.on(&#39;uncaughtException&#39;)!   console.log(`error, but oh well ${er.message}`); }); d.run(() => {   require(&#39;http&#39;).createServer((req, res) => {     handleRequest(req, res);   }).listen(PORT); });  By using the context of a domain, and the resilience of separating our program into multiple worker processes, we can react more appropriately, and handle errors with much greater safety. \/\/ Much better!  const cluster = require(&#39;cluster&#39;); const PORT = +process.env.PORT || 1337;  if (cluster.isMaster) {   \/\/ A more realistic scenario would have more than 2 workers,   \/\/ and perhaps not put the master and worker in the same file.   \/\/   \/\/ It is also possible to get a bit fancier about logging, and   \/\/ implement whatever custom logic is needed to prevent DoS   \/\/ attacks and other bad behavior.   \/\/   \/\/ See the options in the cluster documentation.   \/\/   \/\/ The important thing is that the master does very little,   \/\/ increasing our resilience to unexpected errors.    cluster.fork();   cluster.fork();    cluster.on(&#39;disconnect&#39;, (worker) => {     console.error(&#39;disconnect!&#39;);     cluster.fork();   });  } else {   \/\/ the worker   \/\/   \/\/ This is where we put our bugs!    const domain = require(&#39;domain&#39;);    \/\/ See the cluster documentation for more details about using   \/\/ worker processes to serve requests. How it works, caveats, etc.    const server = require(&#39;http&#39;).createServer((req, res) => {     const d = domain.create();     d.on(&#39;error&#39;, (er) => {       console.error(`error ${er.stack}`);        \/\/ Note: We&#39;re in dangerous territory!       \/\/ By definition, something unexpected occurred,       \/\/ which we probably didn&#39;t want.       \/\/ Anything can happen now! Be very careful!        try {         \/\/ make sure we close down within 30 seconds         const killtimer = setTimeout(() => {           process.exit(1);         }, 30000);         \/\/ But don&#39;t keep the process open just for that!         killtimer.unref();          \/\/ stop taking new requests.         server.close();          \/\/ Let the master know we&#39;re dead. This will trigger a         \/\/ &#39;disconnect&#39; in the cluster master, and then it will fork         \/\/ a new worker.         cluster.worker.disconnect();          \/\/ try to send an error to the request that triggered the problem         res.statusCode = 500;         res.setHeader(&#39;content-type&#39;, &#39;text\/plain&#39;);         res.end(&#39;Oops, there was a problem!\\n&#39;);       } catch (er2) {         \/\/ oh well, not much we can do at this point.         console.error(`Error sending 500! ${er2.stack}`);       }     });      \/\/ Because req and res were created before this domain existed,     \/\/ we need to explicitly add them.     \/\/ See the explanation of implicit vs explicit binding below.     d.add(req);     d.add(res);      \/\/ Now run the handler function in the domain.     d.run(() => {       handleRequest(req, res);     });   });   server.listen(PORT); }  \/\/ This part is not important. Just an example routing thing. \/\/ Put fancy application logic here. function handleRequest(req, res) {   switch (req.url) {     case &#39;\/error&#39;:       \/\/ We do some async stuff, and then...       setTimeout(() => {         \/\/ Whoops!         flerb.bark();       }, timeout);       break;     default:       res.end(&#39;ok&#39;);   } }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_additions_to_error_objects","title":"Additions to Error objects","description":"Any time an Error object is routed through a domain, a few extra fields are added to it.  error.domain The domain that first handled the error. error.domainEmitter The event emitter that emitted an &#39;error&#39; event with the error object. error.domainBound The callback function which was bound to the domain, and passed an error as its first argument. error.domainThrown A boolean indicating whether the error was thrown, emitted, or passed to a bound callback function."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_implicit_binding","title":"Implicit Binding","description":"If domains are in use, then all new EventEmitter objects (including Stream objects, requests, responses, etc.) will be implicitly bound to the active domain at the time of their creation. Additionally, callbacks passed to lowlevel event loop requests (such as to fs.open(), or other callback-taking methods) will automatically be bound to the active domain. If they throw, then the domain will catch the error. In order to prevent excessive memory usage, Domain objects themselves are not implicitly added as children of the active domain. If they were, then it would be too easy to prevent request and response objects from being properly garbage collected. To nest Domain objects as children of a parent Domain they must be explicitly added. Implicit binding routes thrown errors and &#39;error&#39; events to the Domain&#39;s &#39;error&#39; event, but does not register the EventEmitter on the Domain. Implicit binding only takes care of thrown errors and &#39;error&#39; events."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_explicit_binding","title":"Explicit Binding","description":"Sometimes, the domain in use is not the one that ought to be used for a specific event emitter. Or, the event emitter could have been created in the context of one domain, but ought to instead be bound to some other domain. For example, there could be one domain in use for an HTTP server, but perhaps we would like to have a separate domain to use for each request. That is possible via explicit binding. \/\/ create a top-level domain for the server const domain = require(&#39;domain&#39;); const http = require(&#39;http&#39;); const serverDomain = domain.create();  serverDomain.run(() => {   \/\/ server is created in the scope of serverDomain   http.createServer((req, res) => {     \/\/ req and res are also created in the scope of serverDomain     \/\/ however, we&#39;d prefer to have a separate domain for each request.     \/\/ create it first thing, and add req and res to it.     const reqd = domain.create();     reqd.add(req);     reqd.add(res);     reqd.on(&#39;error&#39;, (er) => {       console.error(&#39;Error&#39;, er, req.url);       try {         res.writeHead(500);         res.end(&#39;Error occurred, sorry.&#39;);       } catch (er2) {         console.error(&#39;Error sending 500&#39;, er2, req.url);       }     });   }).listen(1337); });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_domains_and_promises","title":"Domains and Promises","description":"As of Node.js 8.0.0, the handlers of Promises are run inside the domain in which the call to .then() or .catch() itself was made: const d1 = domain.create(); const d2 = domain.create();  let p; d1.run(() => {   p = Promise.resolve(42); });  d2.run(() => {   p.then((v) => {     \/\/ running in d2   }); });  A callback may be bound to a specific domain using domain.bind(callback): const d1 = domain.create(); const d2 = domain.create();  let p; d1.run(() => {   p = Promise.resolve(42); });  d2.run(() => {   p.then(p.domain.bind((v) => {     \/\/ running in d1   })); });  Note that domains will not interfere with the error handling mechanisms for Promises, i.e. no &#39;error&#39; event will be emitted for unhandled Promise rejections."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_events","title":"Events","description":"Much of the Node.js core API is built around an idiomatic asynchronous event-driven architecture in which certain kinds of objects (called \"emitters\") emit named events that cause Function objects (\"listeners\") to be called. For instance: a net.Server object emits an event each time a peer connects to it; a fs.ReadStream emits an event when the file is opened; a stream emits an event whenever data is available to be read. All objects that emit events are instances of the EventEmitter class. These objects expose an eventEmitter.on() function that allows one or more functions to be attached to named events emitted by the object. Typically, event names are camel-cased strings but any valid JavaScript property key can be used. When the EventEmitter object emits an event, all of the functions attached to that specific event are called synchronously. Any values returned by the called listeners are ignored and will be discarded. The following example shows a simple EventEmitter instance with a single listener. The eventEmitter.on() method is used to register listeners, while the eventEmitter.emit() method is used to trigger the event. const EventEmitter = require(&#39;events&#39;);  class MyEmitter extends EventEmitter {}  const myEmitter = new MyEmitter(); myEmitter.on(&#39;event&#39;, () => {   console.log(&#39;an event occurred!&#39;); }); myEmitter.emit(&#39;event&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_passing_arguments_and_this_to_listeners","title":"Passing arguments and `this` to listeners","description":"The eventEmitter.emit() method allows an arbitrary set of arguments to be passed to the listener functions. It is important to keep in mind that when an ordinary listener function is called, the standard this keyword is intentionally set to reference the EventEmitter instance to which the listener is attached. const myEmitter = new MyEmitter(); myEmitter.on(&#39;event&#39;, function(a, b) {   console.log(a, b, this, this === myEmitter);   \/\/ Prints:   \/\/   a b MyEmitter {   \/\/     domain: null,   \/\/     _events: { event: [Function] },   \/\/     _eventsCount: 1,   \/\/     _maxListeners: undefined } true }); myEmitter.emit(&#39;event&#39;, &#39;a&#39;, &#39;b&#39;);  It is possible to use ES6 Arrow Functions as listeners, however, when doing so, the this keyword will no longer reference the EventEmitter instance: const myEmitter = new MyEmitter(); myEmitter.on(&#39;event&#39;, (a, b) => {   console.log(a, b, this);   \/\/ Prints: a b {} }); myEmitter.emit(&#39;event&#39;, &#39;a&#39;, &#39;b&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_asynchronous_vs_synchronous","title":"Asynchronous vs. Synchronous","description":"The EventEmitter calls all listeners synchronously in the order in which they were registered. This is important to ensure the proper sequencing of events and to avoid race conditions or logic errors. When appropriate, listener functions can switch to an asynchronous mode of operation using the setImmediate() or process.nextTick() methods: const myEmitter = new MyEmitter(); myEmitter.on(&#39;event&#39;, (a, b) => {   setImmediate(() => {     console.log(&#39;this happens asynchronously&#39;);   }); }); myEmitter.emit(&#39;event&#39;, &#39;a&#39;, &#39;b&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_handling_events_only_once","title":"Handling events only once","description":"When a listener is registered using the eventEmitter.on() method, that listener will be invoked every time the named event is emitted. const myEmitter = new MyEmitter(); let m = 0; myEmitter.on(&#39;event&#39;, () => {   console.log(++m); }); myEmitter.emit(&#39;event&#39;); \/\/ Prints: 1 myEmitter.emit(&#39;event&#39;); \/\/ Prints: 2  Using the eventEmitter.once() method, it is possible to register a listener that is called at most once for a particular event. Once the event is emitted, the listener is unregistered and then called. const myEmitter = new MyEmitter(); let m = 0; myEmitter.once(&#39;event&#39;, () => {   console.log(++m); }); myEmitter.emit(&#39;event&#39;); \/\/ Prints: 1 myEmitter.emit(&#39;event&#39;); \/\/ Ignored"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_error_events","title":"Error events","description":"When an error occurs within an EventEmitter instance, the typical action is for an &#39;error&#39; event to be emitted. These are treated as special cases within Node.js. If an EventEmitter does not have at least one listener registered for the &#39;error&#39; event, and an &#39;error&#39; event is emitted, the error is thrown, a stack trace is printed, and the Node.js process exits. const myEmitter = new MyEmitter(); myEmitter.emit(&#39;error&#39;, new Error(&#39;whoops!&#39;)); \/\/ Throws and crashes Node.js  To guard against crashing the Node.js process the domain module can be used. (Note, however, that the domain module is deprecated.) As a best practice, listeners should always be added for the &#39;error&#39; events. const myEmitter = new MyEmitter(); myEmitter.on(&#39;error&#39;, (err) => {   console.error(&#39;whoops! there was an error&#39;); }); myEmitter.emit(&#39;error&#39;, new Error(&#39;whoops!&#39;)); \/\/ Prints: whoops! there was an error"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_file_system","title":"File System","description":"The fs module provides an API for interacting with the file system in a manner closely modeled around standard POSIX functions. To use this module: const fs = require(&#39;fs&#39;);  All file system operations have synchronous and asynchronous forms. The asynchronous form always takes a completion callback as its last argument. The arguments passed to the completion callback depend on the method, but the first argument is always reserved for an exception. If the operation was completed successfully, then the first argument will be null or undefined. const fs = require(&#39;fs&#39;);  fs.unlink(&#39;\/tmp\/hello&#39;, (err) => {   if (err) throw err;   console.log(&#39;successfully deleted \/tmp\/hello&#39;); });  Exceptions that occur using synchronous operations are thrown immediately and may be handled using try\/catch, or may be allowed to bubble up. const fs = require(&#39;fs&#39;);  try {   fs.unlinkSync(&#39;\/tmp\/hello&#39;);   console.log(&#39;successfully deleted \/tmp\/hello&#39;); } catch (err) {   \/\/ handle the error }  Note that there is no guaranteed ordering when using asynchronous methods. So the following is prone to error because the fs.stat() operation may complete before the fs.rename() operation. fs.rename(&#39;\/tmp\/hello&#39;, &#39;\/tmp\/world&#39;, (err) => {   if (err) throw err;   console.log(&#39;renamed complete&#39;); }); fs.stat(&#39;\/tmp\/world&#39;, (err, stats) => {   if (err) throw err;   console.log(`stats: ${JSON.stringify(stats)}`); });  To correctly order the operations, move the fs.stat() call into the callback of the fs.rename() operation: fs.rename(&#39;\/tmp\/hello&#39;, &#39;\/tmp\/world&#39;, (err) => {   if (err) throw err;   fs.stat(&#39;\/tmp\/world&#39;, (err, stats) => {     if (err) throw err;     console.log(`stats: ${JSON.stringify(stats)}`);   }); });  In busy processes, the programmer is strongly encouraged to use the asynchronous versions of these calls. The synchronous versions will block the entire process until they complete \u2014 halting all connections. While it is not recommended, most fs functions allow the callback argument to be omitted, in which case a default callback is used that rethrows errors. To get a trace to the original call site, set the NODE_DEBUG environment variable: Omitting the callback function on asynchronous fs functions is deprecated and may result in an error being thrown in the future. $ cat script.js function bad() {   require(&#39;fs&#39;).readFile(&#39;\/&#39;); } bad();  $ env NODE_DEBUG=fs node script.js fs.js:88         throw backtrace;         ^ Error: EISDIR: illegal operation on a directory, read     <stack trace.>"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_access_path_mode_callback","title":"fs.access(path[, mode], callback)","description":"Tests a user&#39;s permissions for the file or directory specified by path. The mode argument is an optional integer that specifies the accessibility checks to be performed. Check File Access Constants for possible values of mode. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. fs.constants.W_OK | fs.constants.R_OK). The final argument, callback, is a callback function that is invoked with a possible error argument. If any of the accessibility checks fail, the error argument will be an Error object. The following examples check if package.json exists, and if it is readable or writable. const file = &#39;package.json&#39;;  \/\/ Check if the file exists in the current directory. fs.access(file, fs.constants.F_OK, (err) => {   console.log(`${file} ${err ? &#39;does not exist&#39; : &#39;exists&#39;}`); });  \/\/ Check if the file is readable. fs.access(file, fs.constants.R_OK, (err) => {   console.log(`${file} ${err ? &#39;is not readable&#39; : &#39;is readable&#39;}`); });  \/\/ Check if the file is writable. fs.access(file, fs.constants.W_OK, (err) => {   console.log(`${file} ${err ? &#39;is not writable&#39; : &#39;is writable&#39;}`); });  \/\/ Check if the file exists in the current directory, and if it is writable. fs.access(file, fs.constants.F_OK | fs.constants.W_OK, (err) => {   if (err) {     console.error(       `${file} ${err.code === &#39;ENOENT&#39; ? &#39;does not exist&#39; : &#39;is read-only&#39;}`);   } else {     console.log(`${file} exists, and it is writable`);   } });  Using fs.access() to check for the accessibility of a file before calling fs.open(), fs.readFile() or fs.writeFile() is not recommended. Doing so introduces a race condition, since other processes may change the file&#39;s state between the two calls. Instead, user code should open\/read\/write the file directly and handle the error raised if the file is not accessible. write (NOT RECOMMENDED) fs.access(&#39;myfile&#39;, (err) => {   if (!err) {     console.error(&#39;myfile already exists&#39;);     return;   }    fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) => {     if (err) throw err;     writeMyData(fd);   }); });  write (RECOMMENDED) fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) => {   if (err) {     if (err.code === &#39;EEXIST&#39;) {       console.error(&#39;myfile already exists&#39;);       return;     }      throw err;   }    writeMyData(fd); });  read (NOT RECOMMENDED) fs.access(&#39;myfile&#39;, (err) => {   if (err) {     if (err.code === &#39;ENOENT&#39;) {       console.error(&#39;myfile does not exist&#39;);       return;     }      throw err;   }    fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) => {     if (err) throw err;     readMyData(fd);   }); });  read (RECOMMENDED) fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) => {   if (err) {     if (err.code === &#39;ENOENT&#39;) {       console.error(&#39;myfile does not exist&#39;);       return;     }      throw err;   }    readMyData(fd); });  The \"not recommended\" examples above check for accessibility and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any. In general, check for the accessibility of a file only if the file will not be used directly, for example when its accessibility is a signal from another process."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_accesssync_path_mode","title":"fs.accessSync(path[, mode])","description":"Synchronously tests a user&#39;s permissions for the file or directory specified by path. The mode argument is an optional integer that specifies the accessibility checks to be performed. Check File Access Constants for possible values of mode. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. fs.constants.W_OK | fs.constants.R_OK). If any of the accessibility checks fail, an Error will be thrown. Otherwise, the method will return undefined. try {   fs.accessSync(&#39;etc\/passwd&#39;, fs.constants.R_OK | fs.constants.W_OK);   console.log(&#39;can read\/write&#39;); } catch (err) {   console.error(&#39;no access!&#39;); }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_appendfile_path_data_options_callback","title":"fs.appendFile(path, data[, options], callback)","description":"Asynchronously append data to a file, creating the file if it does not yet exist. data can be a string or a Buffer. Example: fs.appendFile(&#39;message.txt&#39;, &#39;data to append&#39;, (err) => {   if (err) throw err;   console.log(&#39;The \"data to append\" was appended to file!&#39;); });  If options is a string, then it specifies the encoding. Example: fs.appendFile(&#39;message.txt&#39;, &#39;data to append&#39;, &#39;utf8&#39;, callback);  The path may be specified as a numeric file descriptor that has been opened for appending (using fs.open() or fs.openSync()). The file descriptor will not be closed automatically. fs.open(&#39;message.txt&#39;, &#39;a&#39;, (err, fd) => {   if (err) throw err;   fs.appendFile(fd, &#39;data to append&#39;, &#39;utf8&#39;, (err) => {     fs.close(fd, (err) => {       if (err) throw err;     });     if (err) throw err;   }); });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_appendfilesync_path_data_options","title":"fs.appendFileSync(path, data[, options])","description":"Synchronously append data to a file, creating the file if it does not yet exist. data can be a string or a Buffer. Example: try {   fs.appendFileSync(&#39;message.txt&#39;, &#39;data to append&#39;);   console.log(&#39;The \"data to append\" was appended to file!&#39;); } catch (err) {   \/* Handle the error *\/ }  If options is a string, then it specifies the encoding. Example: fs.appendFileSync(&#39;message.txt&#39;, &#39;data to append&#39;, &#39;utf8&#39;);  The path may be specified as a numeric file descriptor that has been opened for appending (using fs.open() or fs.openSync()). The file descriptor will not be closed automatically. let fd;  try {   fd = fs.openSync(&#39;message.txt&#39;, &#39;a&#39;);   fs.appendFileSync(fd, &#39;data to append&#39;, &#39;utf8&#39;); } catch (err) {   \/* Handle the error *\/ } finally {   if (fd !== undefined)     fs.closeSync(fd); }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_chmod_path_mode_callback","title":"fs.chmod(path, mode, callback)","description":"Asynchronously changes the permissions of a file. No arguments other than a possible exception are given to the completion callback. See also: chmod(2)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_file_modes","title":"File modes","description":"The mode argument used in both the fs.chmod() and fs.chmodSync() methods is a numeric bitmask created using a logical OR of the following constants:    Constant Octal Description     fs.constants.S_IRUSR 0o400 read by owner   fs.constants.S_IWUSR 0o200 write by owner   fs.constants.S_IXUSR 0o100 execute\/search by owner   fs.constants.S_IRGRP 0o40 read by group   fs.constants.S_IWGRP 0o20 write by group   fs.constants.S_IXGRP 0o10 execute\/search by group   fs.constants.S_IROTH 0o4 read by others   fs.constants.S_IWOTH 0o2 write by others   fs.constants.S_IXOTH 0o1 execute\/search by others    An easier method of constructing the mode is to use a sequence of three octal digits (e.g. 765). The left-most digit (7 in the example), specifies the permissions for the file owner. The middle digit (6 in the example), specifies permissions for the group. The right-most digit (5 in the example), specifies the permissions for others.    Number Description     7 read, write, and execute   6 read and write   5 read and execute   4 read only   3 write and execute   2 write only   1 execute only   0 no permission    For example, the octal value 0o765 means:  The owner may read, write and execute the file. The group may read and write the file. Others may read and execute the file.  Note: When using raw numbers where file modes are expected, any value larger than 0o777 may result in platform-specific behaviors that are not supported to work consistently. Therefore constants like S_ISVTX, S_ISGID or S_ISUID are not exposed in fs.constants. Caveats: on Windows only the write permission can be changed, and the distinction among the permissions of group, owner or others is not implemented."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_chmodsync_path_mode","title":"fs.chmodSync(path, mode)","description":"Synchronously changes the permissions of a file. Returns undefined. This is the synchronous version of fs.chmod(). See also: chmod(2)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_chown_path_uid_gid_callback","title":"fs.chown(path, uid, gid, callback)","description":"Asynchronously changes owner and group of a file. No arguments other than a possible exception are given to the completion callback. See also: chown(2)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_chownsync_path_uid_gid","title":"fs.chownSync(path, uid, gid)","description":"Synchronously changes owner and group of a file. Returns undefined. This is the synchronous version of fs.chown(). See also: chown(2)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_close_fd_callback","title":"fs.close(fd, callback)","description":"Asynchronous close(2). No arguments other than a possible exception are given to the completion callback."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_closesync_fd","title":"fs.closeSync(fd)","description":"Synchronous close(2). Returns undefined."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_copyfile_src_dest_flags_callback","title":"fs.copyFile(src, dest[, flags], callback)","description":"Asynchronously copies src to dest. By default, dest is overwritten if it already exists. No arguments other than a possible exception are given to the callback function. Node.js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node.js will attempt to remove the destination. flags is an optional integer that specifies the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE).  fs.constants.COPYFILE_EXCL - The copy operation will fail if dest already exists. fs.constants.COPYFILE_FICLONE - The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used. fs.constants.COPYFILE_FICLONE_FORCE - The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail.  Example: const fs = require(&#39;fs&#39;);  \/\/ destination.txt will be created or overwritten by default. fs.copyFile(&#39;source.txt&#39;, &#39;destination.txt&#39;, (err) => {   if (err) throw err;   console.log(&#39;source.txt was copied to destination.txt&#39;); });  If the third argument is a number, then it specifies flags, as shown in the following example. const fs = require(&#39;fs&#39;); const { COPYFILE_EXCL } = fs.constants;  \/\/ By using COPYFILE_EXCL, the operation will fail if destination.txt exists. fs.copyFile(&#39;source.txt&#39;, &#39;destination.txt&#39;, COPYFILE_EXCL, callback);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_copyfilesync_src_dest_flags","title":"fs.copyFileSync(src, dest[, flags])","description":"Synchronously copies src to dest. By default, dest is overwritten if it already exists. Returns undefined. Node.js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node.js will attempt to remove the destination. flags is an optional integer that specifies the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE).  fs.constants.COPYFILE_EXCL - The copy operation will fail if dest already exists. fs.constants.COPYFILE_FICLONE - The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used. fs.constants.COPYFILE_FICLONE_FORCE - The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail.  Example: const fs = require(&#39;fs&#39;);  \/\/ destination.txt will be created or overwritten by default. fs.copyFileSync(&#39;source.txt&#39;, &#39;destination.txt&#39;); console.log(&#39;source.txt was copied to destination.txt&#39;);  If the third argument is a number, then it specifies flags, as shown in the following example. const fs = require(&#39;fs&#39;); const { COPYFILE_EXCL } = fs.constants;  \/\/ By using COPYFILE_EXCL, the operation will fail if destination.txt exists. fs.copyFileSync(&#39;source.txt&#39;, &#39;destination.txt&#39;, COPYFILE_EXCL);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_createreadstream_path_options","title":"fs.createReadStream(path[, options])","description":"Unlike the 16 kb default highWaterMark for a readable stream, the stream returned by this method has a default highWaterMark of 64 kb. options can include start and end values to read a range of bytes from the file instead of the entire file. Both start and end are inclusive and start counting at 0. If fd is specified and start is omitted or undefined, fs.createReadStream() reads sequentially from the current file position. The encoding can be any one of those accepted by Buffer. If fd is specified, ReadStream will ignore the path argument and will use the specified file descriptor. This means that no &#39;open&#39; event will be emitted. Note that fd should be blocking; non-blocking fds should be passed to net.Socket. If autoClose is false, then the file descriptor won&#39;t be closed, even if there&#39;s an error. It is the application&#39;s responsibility to close it and make sure there&#39;s no file descriptor leak. If autoClose is set to true (default behavior), on &#39;error&#39; or &#39;end&#39; the file descriptor will be closed automatically. mode sets the file mode (permission and sticky bits), but only if the file was created. An example to read the last 10 bytes of a file which is 100 bytes long: fs.createReadStream(&#39;sample.txt&#39;, { start: 90, end: 99 });  If options is a string, then it specifies the encoding."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_createwritestream_path_options","title":"fs.createWriteStream(path[, options])","description":"options may also include a start option to allow writing data at some position past the beginning of the file. Modifying a file rather than replacing it may require a flags mode of r+ rather than the default mode w. The encoding can be any one of those accepted by Buffer. If autoClose is set to true (default behavior) on &#39;error&#39; or &#39;finish&#39; the file descriptor will be closed automatically. If autoClose is false, then the file descriptor won&#39;t be closed, even if there&#39;s an error. It is the application&#39;s responsibility to close it and make sure there&#39;s no file descriptor leak. Like ReadStream, if fd is specified, WriteStream will ignore the path argument and will use the specified file descriptor. This means that no &#39;open&#39; event will be emitted. Note that fd should be blocking; non-blocking fds should be passed to net.Socket. If options is a string, then it specifies the encoding."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_exists_path_callback","title":"fs.exists(path, callback)","description":"Test whether or not the given path exists by checking with the file system. Then call the callback argument with either true or false. Example: fs.exists(&#39;\/etc\/passwd&#39;, (exists) => {   console.log(exists ? &#39;it\\&#39;s there&#39; : &#39;no passwd!&#39;); });  Note that the parameter to this callback is not consistent with other Node.js callbacks. Normally, the first parameter to a Node.js callback is an err parameter, optionally followed by other parameters. The fs.exists() callback has only one boolean parameter. This is one reason fs.access() is recommended instead of fs.exists(). Using fs.exists() to check for the existence of a file before calling fs.open(), fs.readFile() or fs.writeFile() is not recommended. Doing so introduces a race condition, since other processes may change the file&#39;s state between the two calls. Instead, user code should open\/read\/write the file directly and handle the error raised if the file does not exist. write (NOT RECOMMENDED) fs.exists(&#39;myfile&#39;, (exists) => {   if (exists) {     console.error(&#39;myfile already exists&#39;);   } else {     fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) => {       if (err) throw err;       writeMyData(fd);     });   } });  write (RECOMMENDED) fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) => {   if (err) {     if (err.code === &#39;EEXIST&#39;) {       console.error(&#39;myfile already exists&#39;);       return;     }      throw err;   }    writeMyData(fd); });  read (NOT RECOMMENDED) fs.exists(&#39;myfile&#39;, (exists) => {   if (exists) {     fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) => {       if (err) throw err;       readMyData(fd);     });   } else {     console.error(&#39;myfile does not exist&#39;);   } });  read (RECOMMENDED) fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) => {   if (err) {     if (err.code === &#39;ENOENT&#39;) {       console.error(&#39;myfile does not exist&#39;);       return;     }      throw err;   }    readMyData(fd); });  The \"not recommended\" examples above check for existence and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any. In general, check for the existence of a file only if the file won\u2019t be used directly, for example when its existence is a signal from another process."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_existssync_path","title":"fs.existsSync(path)","description":"Synchronous version of fs.exists(). Returns true if the path exists, false otherwise. Note that fs.exists() is deprecated, but fs.existsSync() is not. (The callback parameter to fs.exists() accepts parameters that are inconsistent with other Node.js callbacks. fs.existsSync() does not use a callback.)"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_fchmod_fd_mode_callback","title":"fs.fchmod(fd, mode, callback)","description":"Asynchronous fchmod(2). No arguments other than a possible exception are given to the completion callback."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_fchmodsync_fd_mode","title":"fs.fchmodSync(fd, mode)","description":"Synchronous fchmod(2). Returns undefined."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_fchown_fd_uid_gid_callback","title":"fs.fchown(fd, uid, gid, callback)","description":"Asynchronous fchown(2). No arguments other than a possible exception are given to the completion callback."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_fchownsync_fd_uid_gid","title":"fs.fchownSync(fd, uid, gid)","description":"Synchronous fchown(2). Returns undefined."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_fdatasync_fd_callback","title":"fs.fdatasync(fd, callback)","description":"Asynchronous fdatasync(2). No arguments other than a possible exception are given to the completion callback."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_fdatasyncsync_fd","title":"fs.fdatasyncSync(fd)","description":"Synchronous fdatasync(2). Returns undefined."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_fstat_fd_options_callback","title":"fs.fstat(fd[, options], callback)","description":"Asynchronous fstat(2). The callback gets two arguments (err, stats) where stats is an fs.Stats object. fstat() is identical to stat(), except that the file to be stat-ed is specified by the file descriptor fd."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_fstatsync_fd_options","title":"fs.fstatSync(fd[, options])","description":"Synchronous fstat(2)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_fsync_fd_callback","title":"fs.fsync(fd, callback)","description":"Asynchronous fsync(2). No arguments other than a possible exception are given to the completion callback."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_fsyncsync_fd","title":"fs.fsyncSync(fd)","description":"Synchronous fsync(2). Returns undefined."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_ftruncate_fd_len_callback","title":"fs.ftruncate(fd[, len], callback)","description":"Asynchronous ftruncate(2). No arguments other than a possible exception are given to the completion callback. If the file referred to by the file descriptor was larger than len bytes, only the first len bytes will be retained in the file. For example, the following program retains only the first four bytes of the file: console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;)); \/\/ Prints: Node.js  \/\/ get the file descriptor of the file to be truncated const fd = fs.openSync(&#39;temp.txt&#39;, &#39;r+&#39;);  \/\/ truncate the file to first four bytes fs.ftruncate(fd, 4, (err) => {   assert.ifError(err);   console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;)); }); \/\/ Prints: Node  If the file previously was shorter than len bytes, it is extended, and the extended part is filled with null bytes (&#39;\\0&#39;). For example, console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;)); \/\/ Prints: Node.js  \/\/ get the file descriptor of the file to be truncated const fd = fs.openSync(&#39;temp.txt&#39;, &#39;r+&#39;);  \/\/ truncate the file to 10 bytes, whereas the actual size is 7 bytes fs.ftruncate(fd, 10, (err) => {   assert.ifError(err);   console.log(fs.readFileSync(&#39;temp.txt&#39;)); }); \/\/ Prints: <Buffer 4e 6f 64 65 2e 6a 73 00 00 00> \/\/ (&#39;Node.js\\0\\0\\0&#39; in UTF8)  The last three bytes are null bytes (&#39;\\0&#39;), to compensate the over-truncation."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_ftruncatesync_fd_len","title":"fs.ftruncateSync(fd[, len])","description":"Synchronous ftruncate(2). Returns undefined."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_futimes_fd_atime_mtime_callback","title":"fs.futimes(fd, atime, mtime, callback)","description":"Change the file system timestamps of the object referenced by the supplied file descriptor. See fs.utimes(). This function does not work on AIX versions before 7.1, it will return the error UV_ENOSYS."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_futimessync_fd_atime_mtime","title":"fs.futimesSync(fd, atime, mtime)","description":"Synchronous version of fs.futimes(). Returns undefined."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_lchmod_path_mode_callback","title":"fs.lchmod(path, mode, callback)","description":"Asynchronous lchmod(2). No arguments other than a possible exception are given to the completion callback. Only available on macOS."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_lchmodsync_path_mode","title":"fs.lchmodSync(path, mode)","description":"Synchronous lchmod(2). Returns undefined."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_lchown_path_uid_gid_callback","title":"fs.lchown(path, uid, gid, callback)","description":"Asynchronous lchown(2). No arguments other than a possible exception are given to the completion callback."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_lchownsync_path_uid_gid","title":"fs.lchownSync(path, uid, gid)","description":"Synchronous lchown(2). Returns undefined."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_link_existingpath_newpath_callback","title":"fs.link(existingPath, newPath, callback)","description":"Asynchronous link(2). No arguments other than a possible exception are given to the completion callback."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_linksync_existingpath_newpath","title":"fs.linkSync(existingPath, newPath)","description":"Synchronous link(2). Returns undefined."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_lstat_path_options_callback","title":"fs.lstat(path[, options], callback)","description":"Asynchronous lstat(2). The callback gets two arguments (err, stats) where stats is a fs.Stats object. lstat() is identical to stat(), except that if path is a symbolic link, then the link itself is stat-ed, not the file that it refers to."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_lstatsync_path_options","title":"fs.lstatSync(path[, options])","description":"Synchronous lstat(2)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_mkdir_path_mode_callback","title":"fs.mkdir(path[, mode], callback)","description":"Asynchronously creates a directory. No arguments other than a possible exception are given to the completion callback. See also: mkdir(2)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_mkdirsync_path_mode","title":"fs.mkdirSync(path[, mode])","description":"Synchronously creates a directory. Returns undefined. This is the synchronous version of fs.mkdir(). See also: mkdir(2)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_mkdtemp_prefix_options_callback","title":"fs.mkdtemp(prefix[, options], callback)","description":"Creates a unique temporary directory. Generates six random characters to be appended behind a required prefix to create a unique temporary directory. The created folder path is passed as a string to the callback&#39;s second parameter. The optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use. fs.mkdtemp(path.join(os.tmpdir(), &#39;foo-&#39;), (err, folder) => {   if (err) throw err;   console.log(folder);   \/\/ Prints: \/tmp\/foo-itXde2 or C:\\Users\\...\\AppData\\Local\\Temp\\foo-itXde2 });  The fs.mkdtemp() method will append the six randomly selected characters directly to the prefix string. For instance, given a directory \/tmp, if the intention is to create a temporary directory within \/tmp, the prefix must end with a trailing platform-specific path separator (require(&#39;path&#39;).sep). \/\/ The parent directory for the new temporary directory const tmpDir = os.tmpdir();  \/\/ This method is *INCORRECT*: fs.mkdtemp(tmpDir, (err, folder) => {   if (err) throw err;   console.log(folder);   \/\/ Will print something similar to `\/tmpabc123`.   \/\/ Note that a new temporary directory is created   \/\/ at the file system root rather than *within*   \/\/ the \/tmp directory. });  \/\/ This method is *CORRECT*: const { sep } = require(&#39;path&#39;); fs.mkdtemp(`${tmpDir}${sep}`, (err, folder) => {   if (err) throw err;   console.log(folder);   \/\/ Will print something similar to `\/tmp\/abc123`.   \/\/ A new temporary directory is created within   \/\/ the \/tmp directory. });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_mkdtempsync_prefix_options","title":"fs.mkdtempSync(prefix[, options])","description":"The synchronous version of fs.mkdtemp(). Returns the created folder path. The optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_open_path_flags_mode_callback","title":"fs.open(path, flags[, mode], callback)","description":"Asynchronous file open. See open(2). mode sets the file mode (permission and sticky bits), but only if the file was created. Note that on Windows only the write permission can be manipulated, see fs.chmod(). The callback gets two arguments (err, fd). Some characters (< > : \" \/ \\ | ? *) are reserved under Windows as documented by Naming Files, Paths, and Namespaces. Under NTFS, if the filename contains a colon, Node.js will open a file system stream, as described by this MSDN page. Functions based on fs.open() exhibit this behavior as well: fs.writeFile(), fs.readFile(), etc."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_opensync_path_flags_mode","title":"fs.openSync(path, flags[, mode])","description":"Synchronous version of fs.open(). Returns an integer representing the file descriptor."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_read_fd_buffer_offset_length_position_callback","title":"fs.read(fd, buffer, offset, length, position, callback)","description":"Read data from the file specified by fd. buffer is the buffer that the data will be written to. offset is the offset in the buffer to start writing at. length is an integer specifying the number of bytes to read. position is an argument specifying where to begin reading from in the file. If position is null, data will be read from the current file position, and the file position will be updated. If position is an integer, the file position will remain unchanged. The callback is given the three arguments, (err, bytesRead, buffer). If this method is invoked as its util.promisify()ed version, it returns a Promise for an Object with bytesRead and buffer properties."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_readdir_path_options_callback","title":"fs.readdir(path[, options], callback)","description":"Asynchronous readdir(3). Reads the contents of a directory. The callback gets two arguments (err, files) where files is an array of the names of the files in the directory excluding &#39;.&#39; and &#39;..&#39;. The optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the filenames passed to the callback. If the encoding is set to &#39;buffer&#39;, the filenames returned will be passed as Buffer objects."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_readdirsync_path_options","title":"fs.readdirSync(path[, options])","description":"Synchronous readdir(3). The optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the filenames passed to the callback. If the encoding is set to &#39;buffer&#39;, the filenames returned will be passed as Buffer objects."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_readfile_path_options_callback","title":"fs.readFile(path[, options], callback)","description":"Asynchronously reads the entire contents of a file. Example: fs.readFile(&#39;\/etc\/passwd&#39;, (err, data) => {   if (err) throw err;   console.log(data); });  The callback is passed two arguments (err, data), where data is the contents of the file. If no encoding is specified, then the raw buffer is returned. If options is a string, then it specifies the encoding. Example: fs.readFile(&#39;\/etc\/passwd&#39;, &#39;utf8&#39;, callback);  When the path is a directory, the behavior of fs.readFile() and fs.readFileSync() is platform-specific. On macOS, Linux, and Windows, an error will be returned. On FreeBSD, a representation of the directory&#39;s contents will be returned. \/\/ macOS, Linux, and Windows fs.readFile(&#39;<directory>&#39;, (err, data) => {   \/\/ => [Error: EISDIR: illegal operation on a directory, read <directory>] });  \/\/  FreeBSD fs.readFile(&#39;<directory>&#39;, (err, data) => {   \/\/ => null, <data> });  Any specified file descriptor has to support reading. If a file descriptor is specified as the path, it will not be closed automatically. The fs.readFile() function buffers the entire file. To minimize memory costs, when possible prefer streaming via fs.createReadStream()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_readfilesync_path_options","title":"fs.readFileSync(path[, options])","description":"Synchronous version of fs.readFile(). Returns the contents of the path. If the encoding option is specified then this function returns a string. Otherwise it returns a buffer. Similar to fs.readFile(), when the path is a directory, the behavior of fs.readFileSync() is platform-specific. \/\/ macOS, Linux, and Windows fs.readFileSync(&#39;<directory>&#39;); \/\/ => [Error: EISDIR: illegal operation on a directory, read <directory>]  \/\/  FreeBSD fs.readFileSync(&#39;<directory>&#39;); \/\/ => <data>"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_readlink_path_options_callback","title":"fs.readlink(path[, options], callback)","description":"Asynchronous readlink(2). The callback gets two arguments (err, linkString). The optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the link path passed to the callback. If the encoding is set to &#39;buffer&#39;, the link path returned will be passed as a Buffer object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_readlinksync_path_options","title":"fs.readlinkSync(path[, options])","description":"Synchronous readlink(2). Returns the symbolic link&#39;s string value. The optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the link path passed to the callback. If the encoding is set to &#39;buffer&#39;, the link path returned will be passed as a Buffer object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_readsync_fd_buffer_offset_length_position","title":"fs.readSync(fd, buffer, offset, length, position)","description":"Synchronous version of fs.read(). Returns the number of bytesRead."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_realpath_path_options_callback","title":"fs.realpath(path[, options], callback)","description":"Asynchronously computes the canonical pathname by resolving ., .. and symbolic links. A canonical pathname is not necessarily unique. Hard links and bind mounts can expose a file system entity through many pathnames. This function behaves like realpath(3), with some exceptions:  No case conversion is performed on case-insensitive file systems.  The maximum number of symbolic links is platform-independent and generally (much) higher than what the native realpath(3) implementation supports.   The callback gets two arguments (err, resolvedPath). May use process.cwd to resolve relative paths. Only paths that can be converted to UTF8 strings are supported. The optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the path passed to the callback. If the encoding is set to &#39;buffer&#39;, the path returned will be passed as a Buffer object. If path resolves to a socket or a pipe, the function will return a system dependent name for that object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_realpath_native_path_options_callback","title":"fs.realpath.native(path[, options], callback)","description":"Asynchronous realpath(3). The callback gets two arguments (err, resolvedPath). Only paths that can be converted to UTF8 strings are supported. The optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the path passed to the callback. If the encoding is set to &#39;buffer&#39;, the path returned will be passed as a Buffer object. On Linux, when Node.js is linked against musl libc, the procfs file system must be mounted on \/proc in order for this function to work. Glibc does not have this restriction."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_realpathsync_path_options","title":"fs.realpathSync(path[, options])","description":"Synchronous version of fs.realpath(). Returns the resolved pathname."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_realpathsync_native_path_options","title":"fs.realpathSync.native(path[, options])","description":"Synchronous realpath(3). Only paths that can be converted to UTF8 strings are supported. The optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the path passed to the callback. If the encoding is set to &#39;buffer&#39;, the path returned will be passed as a Buffer object. On Linux, when Node.js is linked against musl libc, the procfs file system must be mounted on \/proc in order for this function to work. Glibc does not have this restriction."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_rename_oldpath_newpath_callback","title":"fs.rename(oldPath, newPath, callback)","description":"Asynchronously rename file at oldPath to the pathname provided as newPath. In the case that newPath already exists, it will be overwritten. No arguments other than a possible exception are given to the completion callback. See also: rename(2). fs.rename(&#39;oldFile.txt&#39;, &#39;newFile.txt&#39;, (err) => {   if (err) throw err;   console.log(&#39;Rename complete!&#39;); });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_renamesync_oldpath_newpath","title":"fs.renameSync(oldPath, newPath)","description":"Synchronous rename(2). Returns undefined."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_rmdir_path_callback","title":"fs.rmdir(path, callback)","description":"Asynchronous rmdir(2). No arguments other than a possible exception are given to the completion callback. Using fs.rmdir() on a file (not a directory) results in an ENOENT error on Windows and an ENOTDIR error on POSIX."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_rmdirsync_path","title":"fs.rmdirSync(path)","description":"Synchronous rmdir(2). Returns undefined. Using fs.rmdirSync() on a file (not a directory) results in an ENOENT error on Windows and an ENOTDIR error on POSIX."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_stat_path_options_callback","title":"fs.stat(path[, options], callback)","description":"Asynchronous stat(2). The callback gets two arguments (err, stats) where stats is an fs.Stats object. In case of an error, the err.code will be one of Common System Errors. Using fs.stat() to check for the existence of a file before calling fs.open(), fs.readFile() or fs.writeFile() is not recommended. Instead, user code should open\/read\/write the file directly and handle the error raised if the file is not available. To check if a file exists without manipulating it afterwards, fs.access() is recommended."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_statsync_path_options","title":"fs.statSync(path[, options])","description":"Synchronous stat(2)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_symlink_target_path_type_callback","title":"fs.symlink(target, path[, type], callback)","description":"Asynchronous symlink(2). No arguments other than a possible exception are given to the completion callback. The type argument can be set to &#39;dir&#39;, &#39;file&#39;, or &#39;junction&#39; and is only available on Windows (ignored on other platforms). Note that Windows junction points require the destination path to be absolute. When using &#39;junction&#39;, the target argument will automatically be normalized to absolute path. Here is an example below: fs.symlink(&#39;.\/foo&#39;, &#39;.\/new-port&#39;, callback);  It creates a symbolic link named \"new-port\" that points to \"foo\"."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_symlinksync_target_path_type","title":"fs.symlinkSync(target, path[, type])","description":"Synchronous symlink(2). Returns undefined."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_truncate_path_len_callback","title":"fs.truncate(path[, len], callback)","description":"Asynchronous truncate(2). No arguments other than a possible exception are given to the completion callback. A file descriptor can also be passed as the first argument. In this case, fs.ftruncate() is called. Passing a file descriptor is deprecated and may result in an error being thrown in the future."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_truncatesync_path_len","title":"fs.truncateSync(path[, len])","description":"Synchronous truncate(2). Returns undefined. A file descriptor can also be passed as the first argument. In this case, fs.ftruncateSync() is called. Passing a file descriptor is deprecated and may result in an error being thrown in the future."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_unlink_path_callback","title":"fs.unlink(path, callback)","description":"Asynchronously removes a file or symbolic link. No arguments other than a possible exception are given to the completion callback. \/\/ Assuming that &#39;path\/file.txt&#39; is a regular file. fs.unlink(&#39;path\/file.txt&#39;, (err) => {   if (err) throw err;   console.log(&#39;path\/file.txt was deleted&#39;); });  fs.unlink() will not work on a directory, empty or otherwise. To remove a directory, use fs.rmdir(). See also: unlink(2)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_unlinksync_path","title":"fs.unlinkSync(path)","description":"Synchronous unlink(2). Returns undefined."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_unwatchfile_filename_listener","title":"fs.unwatchFile(filename[, listener])","description":"Stop watching for changes on filename. If listener is specified, only that particular listener is removed. Otherwise, all listeners are removed, effectively stopping watching of filename. Calling fs.unwatchFile() with a filename that is not being watched is a no-op, not an error. Using fs.watch() is more efficient than fs.watchFile() and fs.unwatchFile(). fs.watch() should be used instead of fs.watchFile() and fs.unwatchFile() when possible."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_utimes_path_atime_mtime_callback","title":"fs.utimes(path, atime, mtime, callback)","description":"Change the file system timestamps of the object referenced by path. The atime and mtime arguments follow these rules:  Values can be either numbers representing Unix epoch time, Dates, or a numeric string like &#39;123456789.0&#39;. If the value can not be converted to a number, or is NaN, Infinity or -Infinity, an Error will be thrown."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_utimessync_path_atime_mtime","title":"fs.utimesSync(path, atime, mtime)","description":"Synchronous version of fs.utimes(). Returns undefined."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_watch_filename_options_listener","title":"fs.watch(filename[, options][, listener])","description":"Watch for changes on filename, where filename is either a file or a directory. The second argument is optional. If options is provided as a string, it specifies the encoding. Otherwise options should be passed as an object. The listener callback gets two arguments (eventType, filename). eventType is either &#39;rename&#39; or &#39;change&#39;, and filename is the name of the file which triggered the event. Note that on most platforms, &#39;rename&#39; is emitted whenever a filename appears or disappears in the directory. Also note the listener callback is attached to the &#39;change&#39; event fired by fs.FSWatcher, but it is not the same thing as the &#39;change&#39; value of eventType."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_caveats","title":"Caveats","description":"The fs.watch API is not 100% consistent across platforms, and is unavailable in some situations. The recursive option is only supported on macOS and Windows."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_availability","title":"Availability","description":"This feature depends on the underlying operating system providing a way to be notified of filesystem changes.  On Linux systems, this uses inotify(7). On BSD systems, this uses kqueue(2). On macOS, this uses kqueue(2) for files and FSEvents for directories. On SunOS systems (including Solaris and SmartOS), this uses event ports. On Windows systems, this feature depends on ReadDirectoryChangesW. On Aix systems, this feature depends on AHAFS, which must be enabled.  If the underlying functionality is not available for some reason, then fs.watch will not be able to function. For example, watching files or directories can be unreliable, and in some cases impossible, on network file systems (NFS, SMB, etc), or host file systems when using virtualization software such as Vagrant, Docker, etc. It is still possible to use fs.watchFile(), which uses stat polling, but this method is slower and less reliable."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_inodes","title":"Inodes","description":"On Linux and macOS systems, fs.watch() resolves the path to an inode and watches the inode. If the watched path is deleted and recreated, it is assigned a new inode. The watch will emit an event for the delete but will continue watching the original inode. Events for the new inode will not be emitted. This is expected behavior. AIX files retain the same inode for the lifetime of a file. Saving and closing a watched file on AIX will result in two notifications (one for adding new content, and one for truncation)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_filename_argument","title":"Filename Argument","description":"Providing filename argument in the callback is only supported on Linux, macOS, Windows, and AIX. Even on supported platforms, filename is not always guaranteed to be provided. Therefore, don&#39;t assume that filename argument is always provided in the callback, and have some fallback logic if it is null. fs.watch(&#39;somedir&#39;, (eventType, filename) => {   console.log(`event type is: ${eventType}`);   if (filename) {     console.log(`filename provided: ${filename}`);   } else {     console.log(&#39;filename not provided&#39;);   } });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_watchfile_filename_options_listener","title":"fs.watchFile(filename[, options], listener)","description":"Watch for changes on filename. The callback listener will be called each time the file is accessed. The options argument may be omitted. If provided, it should be an object. The options object may contain a boolean named persistent that indicates whether the process should continue to run as long as files are being watched. The options object may specify an interval property indicating how often the target should be polled in milliseconds. The listener gets two arguments the current stat object and the previous stat object: fs.watchFile(&#39;message.text&#39;, (curr, prev) => {   console.log(`the current mtime is: ${curr.mtime}`);   console.log(`the previous mtime was: ${prev.mtime}`); });  These stat objects are instances of fs.Stat. To be notified when the file was modified, not just accessed, it is necessary to compare curr.mtime and prev.mtime. When an fs.watchFile operation results in an ENOENT error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch). In Windows, blksize and blocks fields will be undefined, instead of zero. If the file is created later on, the listener will be called again, with the latest stat objects. This is a change in functionality since v0.10. Using fs.watch() is more efficient than fs.watchFile and fs.unwatchFile. fs.watch should be used instead of fs.watchFile and fs.unwatchFile when possible. When a file being watched by fs.watchFile() disappears and reappears, then the previousStat reported in the second callback event (the file&#39;s reappearance) will be the same as the previousStat of the first callback event (its disappearance). This happens when:  the file is deleted, followed by a restore the file is renamed twice - the second time back to its original name"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_write_fd_buffer_offset_length_position_callback","title":"fs.write(fd, buffer[, offset[, length[, position]]], callback)","description":"Write buffer to the file specified by fd. offset determines the part of the buffer to be written, and length is an integer specifying the number of bytes to write. position refers to the offset from the beginning of the file where this data should be written. If typeof position !== &#39;number&#39;, the data will be written at the current position. See pwrite(2). The callback will be given three arguments (err, bytesWritten, buffer) where bytesWritten specifies how many bytes were written from buffer. If this method is invoked as its util.promisify()ed version, it returns a Promise for an Object with bytesWritten and buffer properties. Note that it is unsafe to use fs.write multiple times on the same file without waiting for the callback. For this scenario, fs.createWriteStream is strongly recommended. On Linux, positional writes don&#39;t work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_write_fd_string_position_encoding_callback","title":"fs.write(fd, string[, position[, encoding]], callback)","description":"Write string to the file specified by fd. If string is not a string, then the value will be coerced to one. position refers to the offset from the beginning of the file where this data should be written. If typeof position !== &#39;number&#39; the data will be written at the current position. See pwrite(2). encoding is the expected string encoding. The callback will receive the arguments (err, written, string) where written specifies how many bytes the passed string required to be written. Note that bytes written is not the same as string characters. See Buffer.byteLength. Note that it is unsafe to use fs.write multiple times on the same file without waiting for the callback. For this scenario, fs.createWriteStream is strongly recommended. On Linux, positional writes don&#39;t work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_writefile_file_data_options_callback","title":"fs.writeFile(file, data[, options], callback)","description":"Asynchronously writes data to a file, replacing the file if it already exists. data can be a string or a buffer. The encoding option is ignored if data is a buffer. Example: fs.writeFile(&#39;message.txt&#39;, &#39;Hello Node.js&#39;, (err) => {   if (err) throw err;   console.log(&#39;The file has been saved!&#39;); });  If options is a string, then it specifies the encoding. Example: fs.writeFile(&#39;message.txt&#39;, &#39;Hello Node.js&#39;, &#39;utf8&#39;, callback);  Any specified file descriptor has to support writing. Note that it is unsafe to use fs.writeFile multiple times on the same file without waiting for the callback. For this scenario, fs.createWriteStream is strongly recommended. If a file descriptor is specified as the file, it will not be closed automatically."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_writefilesync_file_data_options","title":"fs.writeFileSync(file, data[, options])","description":"The synchronous version of fs.writeFile(). Returns undefined."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_writesync_fd_buffer_offset_length_position","title":"fs.writeSync(fd, buffer[, offset[, length[, position]]])","description":"Synchronous versions of fs.write(). Returns the number of bytes written."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_writesync_fd_string_position_encoding","title":"fs.writeSync(fd, string[, position[, encoding]])","description":"Synchronous versions of fs.write(). Returns the number of bytes written."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_file_paths","title":"File paths","description":"Most fs operations accept filepaths that may be specified in the form of a string, a Buffer, or a URL object using the file: protocol. String form paths are interpreted as UTF-8 character sequences identifying the absolute or relative filename. Relative paths will be resolved relative to the current working directory as specified by process.cwd(). Example using an absolute path on POSIX: const fs = require(&#39;fs&#39;);  fs.open(&#39;\/open\/some\/file.txt&#39;, &#39;r&#39;, (err, fd) => {   if (err) throw err;   fs.close(fd, (err) => {     if (err) throw err;   }); });  Example using a relative path on POSIX (relative to process.cwd()): fs.open(&#39;file.txt&#39;, &#39;r&#39;, (err, fd) => {   if (err) throw err;   fs.close(fd, (err) => {     if (err) throw err;   }); });  Paths specified using a Buffer are useful primarily on certain POSIX operating systems that treat file paths as opaque byte sequences. On such systems, it is possible for a single file path to contain sub-sequences that use multiple character encodings. As with string paths, Buffer paths may be relative or absolute: Example using an absolute path on POSIX: fs.open(Buffer.from(&#39;\/open\/some\/file.txt&#39;), &#39;r&#39;, (err, fd) => {   if (err) throw err;   fs.close(fd, (err) => {     if (err) throw err;   }); });  Note: On Windows Node.js follows the concept of per-drive working directory. This behavior can be observed when using a drive path without a backslash. For example fs.readdirSync(&#39;c:\\\\&#39;) can potentially return a different result than fs.readdirSync(&#39;c:&#39;). For more information, see this MSDN page."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_url_object_support","title":"URL object support","description":"For most fs module functions, the path or filename argument may be passed as a WHATWG URL object. Only URL objects using the file: protocol are supported. const fs = require(&#39;fs&#39;); const fileUrl = new URL(&#39;file:\/\/\/tmp\/hello&#39;);  fs.readFileSync(fileUrl);  file: URLs are always absolute paths. Using WHATWG URL objects might introduce platform-specific behaviors. On Windows, file: URLs with a hostname convert to UNC paths, while file: URLs with drive letters convert to local absolute paths. file: URLs without a hostname nor a drive letter will result in a throw: \/\/ On Windows :  \/\/ - WHATWG file URLs with hostname convert to UNC path \/\/ file:\/\/hostname\/p\/a\/t\/h\/file => \\\\hostname\\p\\a\\t\\h\\file fs.readFileSync(new URL(&#39;file:\/\/hostname\/p\/a\/t\/h\/file&#39;));  \/\/ - WHATWG file URLs with drive letters convert to absolute path \/\/ file:\/\/\/C:\/tmp\/hello => C:\\tmp\\hello fs.readFileSync(new URL(&#39;file:\/\/\/C:\/tmp\/hello&#39;));  \/\/ - WHATWG file URLs without hostname must have a drive letters fs.readFileSync(new URL(&#39;file:\/\/\/notdriveletter\/p\/a\/t\/h\/file&#39;)); fs.readFileSync(new URL(&#39;file:\/\/\/c\/p\/a\/t\/h\/file&#39;)); \/\/ TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must be absolute  file: URLs with drive letters must use : as a separator just after the drive letter. Using another separator will result in a throw. On all other platforms, file: URLs with a hostname are unsupported and will result in a throw: \/\/ On other platforms:  \/\/ - WHATWG file URLs with hostname are unsupported \/\/ file:\/\/hostname\/p\/a\/t\/h\/file => throw! fs.readFileSync(new URL(&#39;file:\/\/hostname\/p\/a\/t\/h\/file&#39;)); \/\/ TypeError [ERR_INVALID_FILE_URL_PATH]: must be absolute  \/\/ - WHATWG file URLs convert to absolute path \/\/ file:\/\/\/tmp\/hello => \/tmp\/hello fs.readFileSync(new URL(&#39;file:\/\/\/tmp\/hello&#39;));  A file: URL having encoded slash characters will result in a throw on all platforms: \/\/ On Windows fs.readFileSync(new URL(&#39;file:\/\/\/C:\/p\/a\/t\/h\/%2F&#39;)); fs.readFileSync(new URL(&#39;file:\/\/\/C:\/p\/a\/t\/h\/%2f&#39;)); \/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded \\ or \/ characters *\/  \/\/ On POSIX fs.readFileSync(new URL(&#39;file:\/\/\/p\/a\/t\/h\/%2F&#39;)); fs.readFileSync(new URL(&#39;file:\/\/\/p\/a\/t\/h\/%2f&#39;)); \/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded \/ characters *\/  On Windows, file: URLs having encoded backslash will result in a throw: \/\/ On Windows fs.readFileSync(new URL(&#39;file:\/\/\/C:\/path\/%5C&#39;)); fs.readFileSync(new URL(&#39;file:\/\/\/C:\/path\/%5c&#39;)); \/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded \\ or \/ characters *\/"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_file_descriptors","title":"File Descriptors","description":"On POSIX systems, for every process, the kernel maintains a table of currently open files and resources. Each open file is assigned a simple numeric identifier called a file descriptor. At the system-level, all file system operations use these file descriptors to identify and track each specific file. Windows systems use a different but conceptually similar mechanism for tracking resources. To simplify things for users, Node.js abstracts away the specific differences between operating systems and assigns all open files a numeric file descriptor. The fs.open() method is used to allocate a new file descriptor. Once allocated, the file descriptor may be used to read data from, write data to, or request information about the file. fs.open(&#39;\/open\/some\/file.txt&#39;, &#39;r&#39;, (err, fd) => {   if (err) throw err;   fs.fstat(fd, (err, stat) => {     if (err) throw err;     \/\/ use stat      \/\/ always close the file descriptor!     fs.close(fd, (err) => {       if (err) throw err;     });   }); });  Most operating systems limit the number of file descriptors that may be open at any given time so it is critical to close the descriptor when operations are completed. Failure to do so will result in a memory leak that will eventually cause an application to crash."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_threadpool_usage","title":"Threadpool Usage","description":"Note that all file system APIs except fs.FSWatcher() and those that are explicitly synchronous use libuv&#39;s threadpool, which can have surprising and negative performance implications for some applications, see the UV_THREADPOOL_SIZE documentation for more information."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_promises_api","title":"fs Promises API","description":"The fs.promises API provides an alternative set of asynchronous file system methods that return Promise objects rather than using callbacks. The API is accessible via require(&#39;fs&#39;).promises."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_access_path_mode","title":"fsPromises.access(path[, mode])","description":"Tests a user&#39;s permissions for the file or directory specified by path. The mode argument is an optional integer that specifies the accessibility checks to be performed. Check File Access Constants for possible values of mode. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. fs.constants.W_OK | fs.constants.R_OK). If the accessibility check is successful, the Promise is resolved with no value. If any of the accessibility checks fail, the Promise is rejected with an Error object. The following example checks if the file \/etc\/passwd can be read and written by the current process. const fs = require(&#39;fs&#39;); const fsPromises = fs.promises;  fsPromises.access(&#39;\/etc\/passwd&#39;, fs.constants.R_OK | fs.constants.W_OK)   .then(() => console.log(&#39;can access&#39;))   .catch(() => console.error(&#39;cannot access&#39;));  Using fsPromises.access() to check for the accessibility of a file before calling fsPromises.open() is not recommended. Doing so introduces a race condition, since other processes may change the file&#39;s state between the two calls. Instead, user code should open\/read\/write the file directly and handle the error raised if the file is not accessible."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_appendfile_path_data_options","title":"fsPromises.appendFile(path, data[, options])","description":"Asynchronously append data to a file, creating the file if it does not yet exist. data can be a string or a Buffer. The Promise will be resolved with no arguments upon success. If options is a string, then it specifies the encoding. The path may be specified as a FileHandle that has been opened for appending (using fsPromises.open())."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_chmod_path_mode","title":"fsPromises.chmod(path, mode)","description":"Changes the permissions of a file then resolves the Promise with no arguments upon succces."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_chown_path_uid_gid","title":"fsPromises.chown(path, uid, gid)","description":"Changes the ownership of a file then resolves the Promise with no arguments upon success."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_copyfile_src_dest_flags","title":"fsPromises.copyFile(src, dest[, flags])","description":"Asynchronously copies src to dest. By default, dest is overwritten if it already exists. The Promise will be resolved with no arguments upon success. Node.js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node.js will attempt to remove the destination. flags is an optional integer that specifies the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE).  fs.constants.COPYFILE_EXCL - The copy operation will fail if dest already exists. fs.constants.COPYFILE_FICLONE - The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used. fs.constants.COPYFILE_FICLONE_FORCE - The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail.  Example: const fsPromises = require(&#39;fs&#39;).promises;  \/\/ destination.txt will be created or overwritten by default. fsPromises.copyFile(&#39;source.txt&#39;, &#39;destination.txt&#39;)   .then(() => console.log(&#39;source.txt was copied to destination.txt&#39;))   .catch(() => console.log(&#39;The file could not be copied&#39;));  If the third argument is a number, then it specifies flags, as shown in the following example. const fs = require(&#39;fs&#39;); const fsPromises = fs.promises; const { COPYFILE_EXCL } = fs.constants;  \/\/ By using COPYFILE_EXCL, the operation will fail if destination.txt exists. fsPromises.copyFile(&#39;source.txt&#39;, &#39;destination.txt&#39;, COPYFILE_EXCL)   .then(() => console.log(&#39;source.txt was copied to destination.txt&#39;))   .catch(() => console.log(&#39;The file could not be copied&#39;));"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_lchmod_path_mode","title":"fsPromises.lchmod(path, mode)","description":"Changes the permissions on a symbolic link then resolves the Promise with no arguments upon success. This method is only implemented on macOS."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_lchown_path_uid_gid","title":"fsPromises.lchown(path, uid, gid)","description":"Changes the ownership on a symbolic link then resolves the Promise with no arguments upon success."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_link_existingpath_newpath","title":"fsPromises.link(existingPath, newPath)","description":"Asynchronous link(2). The Promise is resolved with no arguments upon success."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_lstat_path_options","title":"fsPromises.lstat(path[, options])","description":"Asynchronous lstat(2). The Promise is resolved with the fs.Stats object for the given symbolic link path."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_mkdir_path_mode","title":"fsPromises.mkdir(path[, mode])","description":"Asynchronously creates a directory then resolves the Promise with no arguments upon success."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_mkdtemp_prefix_options","title":"fsPromises.mkdtemp(prefix[, options])","description":"Creates a unique temporary directory and resolves the Promise with the created folder path. A unique directory name is generated by appending six random characters to the end of the provided prefix. The optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use. fsPromises.mkdtemp(path.join(os.tmpdir(), &#39;foo-&#39;))   .catch(console.error);  The fsPromises.mkdtemp() method will append the six randomly selected characters directly to the prefix string. For instance, given a directory \/tmp, if the intention is to create a temporary directory within \/tmp, the prefix must end with a trailing platform-specific path separator (require(&#39;path&#39;).sep)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_open_path_flags_mode","title":"fsPromises.open(path, flags[, mode])","description":"Asynchronous file open that returns a Promise that, when resolved, yields a FileHandle object. See open(2). mode sets the file mode (permission and sticky bits), but only if the file was created. Some characters (< > : \" \/ \\ | ? *) are reserved under Windows as documented by Naming Files, Paths, and Namespaces. Under NTFS, if the filename contains a colon, Node.js will open a file system stream, as described by this MSDN page."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_readdir_path_options","title":"fsPromises.readdir(path[, options])","description":"Reads the contents of a directory then resolves the Promise with an array of the names of the files in the directory excluding &#39;.&#39; and &#39;..&#39;. The optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the filenames. If the encoding is set to &#39;buffer&#39;, the filenames returned will be passed as Buffer objects."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_readfile_path_options","title":"fsPromises.readFile(path[, options])","description":"Asynchronously reads the entire contents of a file. The Promise is resolved with the contents of the file. If no encoding is specified (using options.encoding), the data is returned as a Buffer object. Otherwise, the data will be a string. If options is a string, then it specifies the encoding. When the path is a directory, the behavior of fsPromises.readFile() is platform-specific. On macOS, Linux, and Windows, the promise will be rejected with an error. On FreeBSD, a representation of the directory&#39;s contents will be returned. Any specified FileHandle has to support reading."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_readlink_path_options","title":"fsPromises.readlink(path[, options])","description":"Asynchronous readlink(2). The Promise is resolved with the linkString upon success. The optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the link path returned. If the encoding is set to &#39;buffer&#39;, the link path returned will be passed as a Buffer object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_realpath_path_options","title":"fsPromises.realpath(path[, options])","description":"Determines the actual location of path using the same semantics as the fs.realpath.native() function then resolves the Promise with the resolved path. Only paths that can be converted to UTF8 strings are supported. The optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the path. If the encoding is set to &#39;buffer&#39;, the path returned will be passed as a Buffer object. On Linux, when Node.js is linked against musl libc, the procfs file system must be mounted on \/proc in order for this function to work. Glibc does not have this restriction."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_rename_oldpath_newpath","title":"fsPromises.rename(oldPath, newPath)","description":"Renames oldPath to newPath and resolves the Promise with no arguments upon success."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_rmdir_path","title":"fsPromises.rmdir(path)","description":"Removes the directory identified by path then resolves the Promise with no arguments upon success. Using fsPromises.rmdir() on a file (not a directory) results in the Promise being rejected with an ENOENT error on Windows and an ENOTDIR error on POSIX."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_stat_path_options","title":"fsPromises.stat(path[, options])","description":"The Promise is resolved with the fs.Stats object for the given path."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_symlink_target_path_type","title":"fsPromises.symlink(target, path[, type])","description":"Creates a symbolic link then resolves the Promise with no arguments upon success. The type argument is only used on Windows platforms and can be one of &#39;dir&#39;, &#39;file&#39;, or &#39;junction&#39;. Note that Windows junction points require the destination path to be absolute. When using &#39;junction&#39;, the target argument will automatically be normalized to absolute path."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_truncate_path_len","title":"fsPromises.truncate(path[, len])","description":"Truncates the path then resolves the Promise with no arguments upon success. The path must be a string or Buffer."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_unlink_path","title":"fsPromises.unlink(path)","description":"Asynchronous unlink(2). The Promise is resolved with no arguments upon success."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_utimes_path_atime_mtime","title":"fsPromises.utimes(path, atime, mtime)","description":"Change the file system timestamps of the object referenced by path then resolves the Promise with no arguments upon success. The atime and mtime arguments follow these rules:  Values can be either numbers representing Unix epoch time, Dates, or a numeric string like &#39;123456789.0&#39;. If the value can not be converted to a number, or is NaN, Infinity or -Infinity, an Error will be thrown."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fspromises_writefile_file_data_options","title":"fsPromises.writeFile(file, data[, options])","description":"Asynchronously writes data to a file, replacing the file if it already exists. data can be a string or a buffer. The Promise will be resolved with no arguments upon success. The encoding option is ignored if data is a buffer. If options is a string, then it specifies the encoding. Any specified FileHandle has to support writing. It is unsafe to use fsPromises.writeFile() multiple times on the same file without waiting for the Promise to be resolved (or rejected)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_fs_constants","title":"FS Constants","description":"The following constants are exported by fs.constants. Not every constant will be available on every operating system."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_file_access_constants","title":"File Access Constants","description":"The following constants are meant for use with fs.access().         Constant     Description           F_OK     Flag indicating that the file is visible to the calling process.      This is useful for determining if a file exists, but says nothing      about rwx permissions. Default if no mode is specified.           R_OK     Flag indicating that the file can be read by the calling process.           W_OK     Flag indicating that the file can be written by the calling     process.           X_OK     Flag indicating that the file can be executed by the calling     process. This has no effect on Windows     (will behave like fs.constants.F_OK)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_file_copy_constants","title":"File Copy Constants","description":"The following constants are meant for use with fs.copyFile().         Constant     Description           COPYFILE_EXCL     If present, the copy operation will fail with an error if the     destination path already exists.           COPYFILE_FICLONE     If present, the copy operation will attempt to create a     copy-on-write reflink. If the underlying platform does not support     copy-on-write, then a fallback copy mechanism is used.           COPYFILE_FICLONE_FORCE     If present, the copy operation will attempt to create a     copy-on-write reflink. If the underlying platform does not support     copy-on-write, then the operation will fail with an error."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_file_open_constants","title":"File Open Constants","description":"The following constants are meant for use with fs.open().         Constant     Description           O_RDONLY     Flag indicating to open a file for read-only access.           O_WRONLY     Flag indicating to open a file for write-only access.           O_RDWR     Flag indicating to open a file for read-write access.           O_CREAT     Flag indicating to create the file if it does not already exist.           O_EXCL     Flag indicating that opening a file should fail if the     O_CREAT flag is set and the file already exists.           O_NOCTTY     Flag indicating that if path identifies a terminal device, opening the     path shall not cause that terminal to become the controlling terminal for     the process (if the process does not already have one).           O_TRUNC     Flag indicating that if the file exists and is a regular file, and the     file is opened successfully for write access, its length shall be truncated     to zero.           O_APPEND     Flag indicating that data will be appended to the end of the file.           O_DIRECTORY     Flag indicating that the open should fail if the path is not a     directory.         O_NOATIME     Flag indicating reading accesses to the file system will no longer     result in an update to the atime information associated with the file.     This flag is available on Linux operating systems only.           O_NOFOLLOW     Flag indicating that the open should fail if the path is a symbolic     link.           O_SYNC     Flag indicating that the file is opened for synchronized I\/O with write     operations waiting for file integrity.           O_DSYNC     Flag indicating that the file is opened for synchronized I\/O with write     operations waiting for data integrity.           O_SYMLINK     Flag indicating to open the symbolic link itself rather than the     resource it is pointing to.           O_DIRECT     When set, an attempt will be made to minimize caching effects of file     I\/O.           O_NONBLOCK     Flag indicating to open the file in nonblocking mode when possible."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_file_type_constants","title":"File Type Constants","description":"The following constants are meant for use with the fs.Stats object&#39;s mode property for determining a file&#39;s type.         Constant     Description           S_IFMT     Bit mask used to extract the file type code.           S_IFREG     File type constant for a regular file.           S_IFDIR     File type constant for a directory.           S_IFCHR     File type constant for a character-oriented device file.           S_IFBLK     File type constant for a block-oriented device file.           S_IFIFO     File type constant for a FIFO\/pipe.           S_IFLNK     File type constant for a symbolic link.           S_IFSOCK     File type constant for a socket."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_file_mode_constants","title":"File Mode Constants","description":"The following constants are meant for use with the fs.Stats object&#39;s mode property for determining the access permissions for a file.         Constant     Description           S_IRWXU     File mode indicating readable, writable, and executable by owner.           S_IRUSR     File mode indicating readable by owner.           S_IWUSR     File mode indicating writable by owner.           S_IXUSR     File mode indicating executable by owner.           S_IRWXG     File mode indicating readable, writable, and executable by group.           S_IRGRP     File mode indicating readable by group.           S_IWGRP     File mode indicating writable by group.           S_IXGRP     File mode indicating executable by group.           S_IRWXO     File mode indicating readable, writable, and executable by others.           S_IROTH     File mode indicating readable by others.           S_IWOTH     File mode indicating writable by others.           S_IXOTH     File mode indicating executable by others."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_file_system_flags","title":"File System Flags","description":"The following flags are available wherever the flag option takes a string:  &#39;a&#39; - Open file for appending. The file is created if it does not exist.  &#39;ax&#39; - Like &#39;a&#39; but fails if the path exists.  &#39;a+&#39; - Open file for reading and appending. The file is created if it does not exist.  &#39;ax+&#39; - Like &#39;a+&#39; but fails if the path exists.  &#39;as&#39; - Open file for appending in synchronous mode. The file is created if it does not exist.  &#39;as+&#39; - Open file for reading and appending in synchronous mode. The file is created if it does not exist.  &#39;r&#39; - Open file for reading. An exception occurs if the file does not exist.  &#39;r+&#39; - Open file for reading and writing. An exception occurs if the file does not exist.  &#39;rs+&#39; - Open file for reading and writing in synchronous mode. Instructs the operating system to bypass the local file system cache. This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache. It has a very real impact on I\/O performance so using this flag is not recommended unless it is needed. Note that this doesn&#39;t turn fs.open() or fsPromises.open() into a synchronous blocking call. If synchronous operation is desired, something like fs.openSync() should be used.  &#39;w&#39; - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).  &#39;wx&#39; - Like &#39;w&#39; but fails if the path exists.  &#39;w+&#39; - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).  &#39;wx+&#39; - Like &#39;w+&#39; but fails if the path exists.   flag can also be a number as documented by open(2); commonly used constants are available from fs.constants. On Windows, flags are translated to their equivalent ones where applicable, e.g. O_WRONLY to FILE_GENERIC_WRITE, or O_EXCL|O_CREAT to CREATE_NEW, as accepted by CreateFileW. The exclusive flag &#39;x&#39; (O_EXCL flag in open(2)) ensures that path is newly created. On POSIX systems, path is considered to exist even if it is a symlink to a non-existent file. The exclusive flag may or may not work with network file systems. On Linux, positional writes don&#39;t work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file. Modifying a file rather than replacing it may require a flags mode of &#39;r+&#39; rather than the default mode &#39;w&#39;. The behavior of some flags are platform-specific. As such, opening a directory on macOS and Linux with the &#39;a+&#39; flag - see example below - will return an error. In contrast, on Windows and FreeBSD, a file descriptor or a FileHandle will be returned. \/\/ macOS and Linux fs.open(&#39;<directory>&#39;, &#39;a+&#39;, (err, fd) => {   \/\/ => [Error: EISDIR: illegal operation on a directory, open <directory>] });  \/\/ Windows and FreeBSD fs.open(&#39;<directory>&#39;, &#39;a+&#39;, (err, fd) => {   \/\/ => null, <fd> });  On Windows, opening an existing hidden file using the &#39;w&#39; flag (either through fs.open() or fs.writeFile() or fsPromises.open()) will fail with EPERM. Existing hidden files can be opened for writing with the &#39;r+&#39; flag. A call to fs.ftruncate() or fsPromises.ftruncate() can be used to reset the file contents."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_http","title":"HTTP","description":"To use the HTTP server and client one must require(&#39;http&#39;). The HTTP interfaces in Node.js are designed to support many features of the protocol which have been traditionally difficult to use. In particular, large, possibly chunk-encoded, messages. The interface is careful to never buffer entire requests or responses \u2014 the user is able to stream data. HTTP message headers are represented by an object like this:  { &#39;content-length&#39;: &#39;123&#39;,   &#39;content-type&#39;: &#39;text\/plain&#39;,   &#39;connection&#39;: &#39;keep-alive&#39;,   &#39;host&#39;: &#39;mysite.com&#39;,   &#39;accept&#39;: &#39;*\/*&#39; }  Keys are lowercased. Values are not modified. In order to support the full spectrum of possible HTTP applications, Node.js&#39;s HTTP API is very low-level. It deals with stream handling and message parsing only. It parses a message into headers and body but it does not parse the actual headers or the body. See message.headers for details on how duplicate headers are handled. The raw headers as they were received are retained in the rawHeaders property, which is an array of [key, value, key2, value2, ...]. For example, the previous message header object might have a rawHeaders list like the following:  [ &#39;ConTent-Length&#39;, &#39;123456&#39;,   &#39;content-LENGTH&#39;, &#39;123&#39;,   &#39;content-type&#39;, &#39;text\/plain&#39;,   &#39;CONNECTION&#39;, &#39;keep-alive&#39;,   &#39;Host&#39;, &#39;mysite.com&#39;,   &#39;accepT&#39;, &#39;*\/*&#39; ]"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_http_createserver_options_requestlistener","title":"http.createServer([options][, requestListener])","description":"Returns a new instance of http.Server. The requestListener is a function which is automatically added to the &#39;request&#39; event."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_http_get_options_callback","title":"http.get(options[, callback])","description":"Since most requests are GET requests without bodies, Node.js provides this convenience method. The only difference between this method and http.request() is that it sets the method to GET and calls req.end() automatically. Note that the callback must take care to consume the response data for reasons stated in http.ClientRequest section. The callback is invoked with a single argument that is an instance of http.IncomingMessage. JSON Fetching Example: http.get(&#39;http:\/\/nodejs.org\/dist\/index.json&#39;, (res) => {   const { statusCode } = res;   const contentType = res.headers[&#39;content-type&#39;];    let error;   if (statusCode !== 200) {     error = new Error(&#39;Request Failed.\\n&#39; +                       `Status Code: ${statusCode}`);   } else if (!\/^application\\\/json\/.test(contentType)) {     error = new Error(&#39;Invalid content-type.\\n&#39; +                       `Expected application\/json but received ${contentType}`);   }   if (error) {     console.error(error.message);     \/\/ consume response data to free up memory     res.resume();     return;   }    res.setEncoding(&#39;utf8&#39;);   let rawData = &#39;&#39;;   res.on(&#39;data&#39;, (chunk) => { rawData += chunk; });   res.on(&#39;end&#39;, () => {     try {       const parsedData = JSON.parse(rawData);       console.log(parsedData);     } catch (e) {       console.error(e.message);     }   }); }).on(&#39;error&#39;, (e) => {   console.error(`Got error: ${e.message}`); });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_http_request_options_callback","title":"http.request(options[, callback])","description":"Node.js maintains several connections per server to make HTTP requests. This function allows one to transparently issue requests. options can be an object, a string, or a URL object. If options is a string, it is automatically parsed with url.parse(). If it is a URL object, it will be automatically converted to an ordinary options object. The optional callback parameter will be added as a one-time listener for the &#39;response&#39; event. http.request() returns an instance of the http.ClientRequest class. The ClientRequest instance is a writable stream. If one needs to upload a file with a POST request, then write to the ClientRequest object. Example: const postData = querystring.stringify({   &#39;msg&#39;: &#39;Hello World!&#39; });  const options = {   hostname: &#39;www.google.com&#39;,   port: 80,   path: &#39;\/upload&#39;,   method: &#39;POST&#39;,   headers: {     &#39;Content-Type&#39;: &#39;application\/x-www-form-urlencoded&#39;,     &#39;Content-Length&#39;: Buffer.byteLength(postData)   } };  const req = http.request(options, (res) => {   console.log(`STATUS: ${res.statusCode}`);   console.log(`HEADERS: ${JSON.stringify(res.headers)}`);   res.setEncoding(&#39;utf8&#39;);   res.on(&#39;data&#39;, (chunk) => {     console.log(`BODY: ${chunk}`);   });   res.on(&#39;end&#39;, () => {     console.log(&#39;No more data in response.&#39;);   }); });  req.on(&#39;error&#39;, (e) => {   console.error(`problem with request: ${e.message}`); });  \/\/ write data to request body req.write(postData); req.end();  Note that in the example req.end() was called. With http.request() one must always call req.end() to signify the end of the request - even if there is no data being written to the request body. If any error is encountered during the request (be that with DNS resolution, TCP level errors, or actual HTTP parse errors) an &#39;error&#39; event is emitted on the returned request object. As with all &#39;error&#39; events, if no listeners are registered the error will be thrown. There are a few special headers that should be noted.  Sending a &#39;Connection: keep-alive&#39; will notify Node.js that the connection to the server should be persisted until the next request.  Sending a &#39;Content-Length&#39; header will disable the default chunked encoding.  Sending an &#39;Expect&#39; header will immediately send the request headers. Usually, when sending &#39;Expect: 100-continue&#39;, both a timeout and a listener for the &#39;continue&#39; event should be set. See RFC2616 Section 8.2.3 for more information.  Sending an Authorization header will override using the auth option to compute basic authentication.   Example using a URL as options: const options = new URL(&#39;http:\/\/abc:xyz@example.com&#39;);  const req = http.request(options, (res) => {   \/\/ ... });  In a successful request, the following events will be emitted in the following order:  &#39;socket&#39; &#39;response&#39; &#39;data&#39; any number of times, on the res object (&#39;data&#39; will not be emitted at all if the response body is empty, for instance, in most redirects) &#39;end&#39; on the res object   &#39;close&#39;  In the case of a connection error, the following events will be emitted:  &#39;socket&#39; &#39;error&#39; &#39;close&#39;  If req.abort() is called before the connection succeeds, the following events will be emitted in the following order:  &#39;socket&#39; (req.abort() called here) &#39;abort&#39; &#39;close&#39; &#39;error&#39; with an error with message &#39;Error: socket hang up&#39; and code &#39;ECONNRESET&#39;  If req.abort() is called after the response is received, the following events will be emitted in the following order:  &#39;socket&#39; &#39;response&#39; &#39;data&#39; any number of times, on the res object   (req.abort() called here) &#39;abort&#39; &#39;close&#39; &#39;aborted&#39; on the res object &#39;end&#39; on the res object &#39;close&#39; on the res object    Note that setting the timeout option or using the setTimeout() function will not abort the request or do anything besides add a &#39;timeout&#39; event."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_http_2","title":"HTTP\/2","description":"The http2 module provides an implementation of the HTTP\/2 protocol. It can be accessed using: const http2 = require(&#39;http2&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_core_api","title":"Core API","description":"The Core API provides a low-level interface designed specifically around support for HTTP\/2 protocol features. It is specifically not designed for compatibility with the existing HTTP\/1 module API. However, the Compatibility API is. The http2 Core API is much more symmetric between client and server than the http API. For instance, most events, like &#39;error&#39;, &#39;connect&#39; and &#39;stream&#39;, can be emitted either by client-side code or server-side code."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_http2_createserver_options_onrequesthandler","title":"http2.createServer(options[, onRequestHandler])","description":"Returns a net.Server instance that creates and manages Http2Session instances. Since there are no browsers known that support unencrypted HTTP\/2, the use of http2.createSecureServer() is necessary when communicating with browser clients. const http2 = require(&#39;http2&#39;);  \/\/ Create an unencrypted HTTP\/2 server. \/\/ Since there are no browsers known that support \/\/ unencrypted HTTP\/2, the use of `http2.createSecureServer()` \/\/ is necessary when communicating with browser clients. const server = http2.createServer();  server.on(&#39;stream&#39;, (stream, headers) => {   stream.respond({     &#39;content-type&#39;: &#39;text\/html&#39;,     &#39;:status&#39;: 200   });   stream.end(&#39;<h1>Hello World<\/h1>&#39;); });  server.listen(80);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_http2_createsecureserver_options_onrequesthandler","title":"http2.createSecureServer(options[, onRequestHandler])","description":"Returns a tls.Server instance that creates and manages Http2Session instances. const http2 = require(&#39;http2&#39;);  const options = {   key: fs.readFileSync(&#39;server-key.pem&#39;),   cert: fs.readFileSync(&#39;server-cert.pem&#39;) };  \/\/ Create a secure HTTP\/2 server const server = http2.createSecureServer(options);  server.on(&#39;stream&#39;, (stream, headers) => {   stream.respond({     &#39;content-type&#39;: &#39;text\/html&#39;,     &#39;:status&#39;: 200   });   stream.end(&#39;<h1>Hello World<\/h1>&#39;); });  server.listen(80);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_http2_connect_authority_options_listener","title":"http2.connect(authority[, options][, listener])","description":"Returns a ClientHttp2Session instance. const http2 = require(&#39;http2&#39;); const client = http2.connect(&#39;https:\/\/localhost:1234&#39;);  \/* Use the client *\/  client.close();"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_http2_getdefaultsettings","title":"http2.getDefaultSettings()","description":"Returns an object containing the default settings for an Http2Session instance. This method returns a new object instance every time it is called so instances returned may be safely modified for use."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_http2_getpackedsettings_settings","title":"http2.getPackedSettings(settings)","description":"Returns a Buffer instance containing serialized representation of the given HTTP\/2 settings as specified in the HTTP\/2 specification. This is intended for use with the HTTP2-Settings header field. const http2 = require(&#39;http2&#39;);  const packed = http2.getPackedSettings({ enablePush: false });  console.log(packed.toString(&#39;base64&#39;)); \/\/ Prints: AAIAAAAA"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_http2_getunpackedsettings_buf","title":"http2.getUnpackedSettings(buf)","description":"Returns a HTTP\/2 Settings Object containing the deserialized settings from the given Buffer as generated by http2.getPackedSettings()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_server_side_example","title":"Server-side example","description":"The following illustrates a simple HTTP\/2 server using the Core API. Since there are no browsers known that support unencrypted HTTP\/2, the use of http2.createSecureServer() is necessary when communicating with browser clients. const http2 = require(&#39;http2&#39;); const fs = require(&#39;fs&#39;);  const server = http2.createSecureServer({   key: fs.readFileSync(&#39;localhost-privkey.pem&#39;),   cert: fs.readFileSync(&#39;localhost-cert.pem&#39;) }); server.on(&#39;error&#39;, (err) => console.error(err));  server.on(&#39;stream&#39;, (stream, headers) => {   \/\/ stream is a Duplex   stream.respond({     &#39;content-type&#39;: &#39;text\/html&#39;,     &#39;:status&#39;: 200   });   stream.end(&#39;<h1>Hello World<\/h1>&#39;); });  server.listen(8443);  To generate the certificate and key for this example, run: openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj &#39;\/CN=localhost&#39; \\   -keyout localhost-privkey.pem -out localhost-cert.pem"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_client_side_example","title":"Client-side example","description":"The following illustrates an HTTP\/2 client: const http2 = require(&#39;http2&#39;); const fs = require(&#39;fs&#39;); const client = http2.connect(&#39;https:\/\/localhost:8443&#39;, {   ca: fs.readFileSync(&#39;localhost-cert.pem&#39;) }); client.on(&#39;error&#39;, (err) => console.error(err));  const req = client.request({ &#39;:path&#39;: &#39;\/&#39; });  req.on(&#39;response&#39;, (headers, flags) => {   for (const name in headers) {     console.log(`${name}: ${headers[name]}`);   } });  req.setEncoding(&#39;utf8&#39;); let data = &#39;&#39;; req.on(&#39;data&#39;, (chunk) => { data += chunk; }); req.on(&#39;end&#39;, () => {   console.log(`\\n${data}`);   client.close(); }); req.end();"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_headers_object","title":"Headers Object","description":"Headers are represented as own-properties on JavaScript objects. The property keys will be serialized to lower-case. Property values should be strings (if they are not they will be coerced to strings) or an Array of strings (in order to send more than one value per header field). const headers = {   &#39;:status&#39;: &#39;200&#39;,   &#39;content-type&#39;: &#39;text-plain&#39;,   &#39;ABC&#39;: [&#39;has&#39;, &#39;more&#39;, &#39;than&#39;, &#39;one&#39;, &#39;value&#39;] };  stream.respond(headers);  Header objects passed to callback functions will have a null prototype. This means that normal JavaScript object methods such as Object.prototype.toString() and Object.prototype.hasOwnProperty() will not work. For incoming headers:  The :status header is converted to number. Duplicates of :status, :method, :authority, :scheme, :path, age, authorization, access-control-allow-credentials, access-control-max-age, access-control-request-method, content-encoding, content-language, content-length, content-location, content-md5, content-range, content-type, date, dnt, etag, expires, from, if-match, if-modified-since, if-none-match, if-range, if-unmodified-since, last-modified, location, max-forwards, proxy-authorization, range, referer,retry-after, tk, upgrade-insecure-requests, user-agent or x-content-type-options are discarded. set-cookie is a string if present once or an array in case duplicates are present. cookie: the values are joined together with &#39;; &#39;. For all other headers, the values are joined together with &#39;, &#39;.  const http2 = require(&#39;http2&#39;); const server = http2.createServer(); server.on(&#39;stream&#39;, (stream, headers) => {   console.log(headers[&#39;:path&#39;]);   console.log(headers.ABC); });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_settings_object","title":"Settings Object","description":"The http2.getDefaultSettings(), http2.getPackedSettings(), http2.createServer(), http2.createSecureServer(), http2session.settings(), http2session.localSettings, and http2session.remoteSettings APIs either return or receive as input an object that defines configuration settings for an Http2Session object. These objects are ordinary JavaScript objects containing the following properties.  headerTableSize {number} Specifies the maximum number of bytes used for header compression. The minimum allowed value is 0. The maximum allowed value is 232-1. Default: 4,096 octets. enablePush {boolean} Specifies true if HTTP\/2 Push Streams are to be permitted on the Http2Session instances. initialWindowSize {number} Specifies the senders initial window size for stream-level flow control. The minimum allowed value is 0. The maximum allowed value is 232-1. Default: 65,535 bytes. maxFrameSize {number} Specifies the size of the largest frame payload. The minimum allowed value is 16,384. The maximum allowed value is 224-1. Default: 16,384 bytes. maxConcurrentStreams {number} Specifies the maximum number of concurrent streams permitted on an Http2Session. There is no default value which implies, at least theoretically, 231-1 streams may be open concurrently at any given time in an Http2Session. The minimum value is 0. The maximum allowed value is 231-1. maxHeaderListSize {number} Specifies the maximum size (uncompressed octets) of header list that will be accepted. The minimum allowed value is 0. The maximum allowed value is 232-1. Default: 65535.  All additional properties on the settings object are ignored."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_using_options_selectpadding","title":"Using `options.selectPadding()`","description":"When options.paddingStrategy is equal to http2.constants.PADDING_STRATEGY_CALLBACK, the HTTP\/2 implementation will consult the options.selectPadding() callback function, if provided, to determine the specific amount of padding to use per HEADERS and DATA frame. The options.selectPadding() function receives two numeric arguments, frameLen and maxFrameLen and must return a number N such that frameLen <= N <= maxFrameLen. const http2 = require(&#39;http2&#39;); const server = http2.createServer({   paddingStrategy: http2.constants.PADDING_STRATEGY_CALLBACK,   selectPadding(frameLen, maxFrameLen) {     return maxFrameLen;   } });  The options.selectPadding() function is invoked once for every HEADERS and DATA frame. This has a definite noticeable impact on performance."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_error_handling","title":"Error Handling","description":"There are several types of error conditions that may arise when using the http2 module: Validation errors occur when an incorrect argument, option, or setting value is passed in. These will always be reported by a synchronous throw. State errors occur when an action is attempted at an incorrect time (for instance, attempting to send data on a stream after it has closed). These will be reported using either a synchronous throw or via an &#39;error&#39; event on the Http2Stream, Http2Session or HTTP\/2 Server objects, depending on where and when the error occurs. Internal errors occur when an HTTP\/2 session fails unexpectedly. These will be reported via an &#39;error&#39; event on the Http2Session or HTTP\/2 Server objects. Protocol errors occur when various HTTP\/2 protocol constraints are violated. These will be reported using either a synchronous throw or via an &#39;error&#39; event on the Http2Stream, Http2Session or HTTP\/2 Server objects, depending on where and when the error occurs."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_invalid_character_handling_in_header_names_and_values","title":"Invalid character handling in header names and values","description":"The HTTP\/2 implementation applies stricter handling of invalid characters in HTTP header names and values than the HTTP\/1 implementation. Header field names are case-insensitive and are transmitted over the wire strictly as lower-case strings. The API provided by Node.js allows header names to be set as mixed-case strings (e.g. Content-Type) but will convert those to lower-case (e.g. content-type) upon transmission. Header field-names must only contain one or more of the following ASCII characters: a-z, A-Z, 0-9, !, #, $, %, &, &#39;, *, +, -, ., ^, _, `  (backtick), |, and ~. Using invalid characters within an HTTP header field name will cause the stream to be closed with a protocol error being reported. Header field values are handled with more leniency but should not contain new-line or carriage return characters and should be limited to US-ASCII characters, per the requirements of the HTTP specification."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_push_streams_on_the_client","title":"Push streams on the client","description":"To receive pushed streams on the client, set a listener for the &#39;stream&#39; event on the ClientHttp2Session: const http2 = require(&#39;http2&#39;);  const client = http2.connect(&#39;http:\/\/localhost&#39;);  client.on(&#39;stream&#39;, (pushedStream, requestHeaders) => {   pushedStream.on(&#39;push&#39;, (responseHeaders) => {     \/\/ process response headers   });   pushedStream.on(&#39;data&#39;, (chunk) => { \/* handle pushed data *\/ }); });  const req = client.request({ &#39;:path&#39;: &#39;\/&#39; });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_supporting_the_connect_method","title":"Supporting the CONNECT method","description":"The CONNECT method is used to allow an HTTP\/2 server to be used as a proxy for TCP\/IP connections. A simple TCP Server: const net = require(&#39;net&#39;);  const server = net.createServer((socket) => {   let name = &#39;&#39;;   socket.setEncoding(&#39;utf8&#39;);   socket.on(&#39;data&#39;, (chunk) => name += chunk);   socket.on(&#39;end&#39;, () => socket.end(`hello ${name}`)); });  server.listen(8000);  An HTTP\/2 CONNECT proxy: const http2 = require(&#39;http2&#39;); const { NGHTTP2_REFUSED_STREAM } = http2.constants; const net = require(&#39;net&#39;);  const proxy = http2.createServer(); proxy.on(&#39;stream&#39;, (stream, headers) => {   if (headers[&#39;:method&#39;] !== &#39;CONNECT&#39;) {     \/\/ Only accept CONNECT requests     stream.close(NGHTTP2_REFUSED_STREAM);     return;   }   const auth = new URL(`tcp:\/\/${headers[&#39;:authority&#39;]}`);   \/\/ It&#39;s a very good idea to verify that hostname and port are   \/\/ things this proxy should be connecting to.   const socket = net.connect(auth.port, auth.hostname, () => {     stream.respond();     socket.pipe(stream);     stream.pipe(socket);   });   socket.on(&#39;error&#39;, (error) => {     stream.close(http2.constants.NGHTTP2_CONNECT_ERROR);   }); });  proxy.listen(8001);  An HTTP\/2 CONNECT client: const http2 = require(&#39;http2&#39;);  const client = http2.connect(&#39;http:\/\/localhost:8001&#39;);  \/\/ Must not specify the &#39;:path&#39; and &#39;:scheme&#39; headers \/\/ for CONNECT requests or an error will be thrown. const req = client.request({   &#39;:method&#39;: &#39;CONNECT&#39;,   &#39;:authority&#39;: `localhost:${port}` });  req.on(&#39;response&#39;, (headers) => {   console.log(headers[http2.constants.HTTP2_HEADER_STATUS]); }); let data = &#39;&#39;; req.setEncoding(&#39;utf8&#39;); req.on(&#39;data&#39;, (chunk) => data += chunk); req.on(&#39;end&#39;, () => {   console.log(`The server says: ${data}`);   client.close(); }); req.end(&#39;Jane&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_compatibility_api","title":"Compatibility API","description":"The Compatibility API has the goal of providing a similar developer experience of HTTP\/1 when using HTTP\/2, making it possible to develop applications that support both HTTP\/1 and HTTP\/2. This API targets only the public API of the HTTP\/1. However many modules use internal methods or state, and those are not supported as it is a completely different implementation. The following example creates an HTTP\/2 server using the compatibility API: const http2 = require(&#39;http2&#39;); const server = http2.createServer((req, res) => {   res.setHeader(&#39;Content-Type&#39;, &#39;text\/html&#39;);   res.setHeader(&#39;X-Foo&#39;, &#39;bar&#39;);   res.writeHead(200, { &#39;Content-Type&#39;: &#39;text\/plain&#39; });   res.end(&#39;ok&#39;); });  In order to create a mixed HTTPS and HTTP\/2 server, refer to the ALPN negotiation section. Upgrading from non-tls HTTP\/1 servers is not supported. The HTTP\/2 compatibility API is composed of Http2ServerRequest and Http2ServerResponse. They aim at API compatibility with HTTP\/1, but they do not hide the differences between the protocols. As an example, the status message for HTTP codes is ignored."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_alpn_negotiation","title":"ALPN negotiation","description":"ALPN negotiation allows supporting both HTTPS and HTTP\/2 over the same socket. The req and res objects can be either HTTP\/1 or HTTP\/2, and an application must restrict itself to the public API of HTTP\/1, and detect if it is possible to use the more advanced features of HTTP\/2. The following example creates a server that supports both protocols: const { createSecureServer } = require(&#39;http2&#39;); const { readFileSync } = require(&#39;fs&#39;);  const cert = readFileSync(&#39;.\/cert.pem&#39;); const key = readFileSync(&#39;.\/key.pem&#39;);  const server = createSecureServer(   { cert, key, allowHTTP1: true },   onRequest ).listen(4443);  function onRequest(req, res) {   \/\/ detects if it is a HTTPS request or HTTP\/2   const { socket: { alpnProtocol } } = req.httpVersion === &#39;2.0&#39; ?     req.stream.session : req;   res.writeHead(200, { &#39;content-type&#39;: &#39;application\/json&#39; });   res.end(JSON.stringify({     alpnProtocol,     httpVersion: req.httpVersion   })); }  The &#39;request&#39; event works identically on both HTTPS and HTTP\/2."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_collecting_http_2_performance_metrics","title":"Collecting HTTP\/2 Performance Metrics","description":"The Performance Observer API can be used to collect basic performance metrics for each Http2Session and Http2Stream instance. const { PerformanceObserver } = require(&#39;perf_hooks&#39;);  const obs = new PerformanceObserver((items) => {   const entry = items.getEntries()[0];   console.log(entry.entryType);  \/\/ prints &#39;http2&#39;   if (entry.name === &#39;Http2Session&#39;) {     \/\/ entry contains statistics about the Http2Session   } else if (entry.name === &#39;Http2Stream&#39;) {     \/\/ entry contains statistics about the Http2Stream   } }); obs.observe({ entryTypes: [&#39;http2&#39;] });  The entryType property of the PerformanceEntry will be equal to &#39;http2&#39;. The name property of the PerformanceEntry will be equal to either &#39;Http2Stream&#39; or &#39;Http2Session&#39;. If name is equal to Http2Stream, the PerformanceEntry will contain the following additional properties:  bytesRead {number} The number of DATA frame bytes received for this Http2Stream. bytesWritten {number} The number of DATA frame bytes sent for this Http2Stream. id {number} The identifier of the associated Http2Stream timeToFirstByte {number} The number of milliseconds elapsed between the PerformanceEntry startTime and the reception of the first DATA frame. timeToFirstByteSent {number} The number of milliseconds elapsed between the PerformanceEntry startTime and sending of the first DATA frame. timeToFirstHeader {number} The number of milliseconds elapsed between the PerformanceEntry startTime and the reception of the first header.  If name is equal to Http2Session, the PerformanceEntry will contain the following additional properties:  bytesRead {number} The number of bytes received for this Http2Session. bytesWritten {number} The number of bytes sent for this Http2Session. framesReceived {number} The number of HTTP\/2 frames received by the Http2Session. framesSent {number} The number of HTTP\/2 frames sent by the Http2Session. maxConcurrentStreams {number} The maximum number of streams concurrently open during the lifetime of the Http2Session. pingRTT {number} The number of milliseconds elapsed since the transmission of a PING frame and the reception of its acknowledgment. Only present if a PING frame has been sent on the Http2Session. streamAverageDuration {number} The average duration (in milliseconds) for all Http2Stream instances. streamCount {number} The number of Http2Stream instances processed by the Http2Session. type {string} Either &#39;server&#39; or &#39;client&#39; to identify the type of Http2Session."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_https","title":"HTTPS","description":"HTTPS is the HTTP protocol over TLS\/SSL. In Node.js this is implemented as a separate module."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_https_createserver_options_requestlistener","title":"https.createServer([options][, requestListener])","description":"Example: \/\/ curl -k https:\/\/localhost:8000\/ const https = require(&#39;https&#39;); const fs = require(&#39;fs&#39;);  const options = {   key: fs.readFileSync(&#39;test\/fixtures\/keys\/agent2-key.pem&#39;),   cert: fs.readFileSync(&#39;test\/fixtures\/keys\/agent2-cert.pem&#39;) };  https.createServer(options, (req, res) => {   res.writeHead(200);   res.end(&#39;hello world\\n&#39;); }).listen(8000);  Or const https = require(&#39;https&#39;); const fs = require(&#39;fs&#39;);  const options = {   pfx: fs.readFileSync(&#39;test\/fixtures\/test_cert.pfx&#39;),   passphrase: &#39;sample&#39; };  https.createServer(options, (req, res) => {   res.writeHead(200);   res.end(&#39;hello world\\n&#39;); }).listen(8000);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_https_get_options_callback","title":"https.get(options[, callback])","description":"Like http.get() but for HTTPS. options can be an object, a string, or a URL object. If options is a string, it is automatically parsed with url.parse(). If it is a URL object, it will be automatically converted to an ordinary options object. Example: const https = require(&#39;https&#39;);  https.get(&#39;https:\/\/encrypted.google.com\/&#39;, (res) => {   console.log(&#39;statusCode:&#39;, res.statusCode);   console.log(&#39;headers:&#39;, res.headers);    res.on(&#39;data&#39;, (d) => {     process.stdout.write(d);   });  }).on(&#39;error&#39;, (e) => {   console.error(e); });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_https_request_options_callback","title":"https.request(options[, callback])","description":"Makes a request to a secure web server. The following additional options from tls.connect() are also accepted: ca, cert, ciphers, clientCertEngine, crl, dhparam, ecdhCurve, honorCipherOrder, key, passphrase, pfx, rejectUnauthorized, secureOptions, secureProtocol, servername, sessionIdContext. options can be an object, a string, or a URL object. If options is a string, it is automatically parsed with url.parse(). If it is a URL object, it will be automatically converted to an ordinary options object. Example: const https = require(&#39;https&#39;);  const options = {   hostname: &#39;encrypted.google.com&#39;,   port: 443,   path: &#39;\/&#39;,   method: &#39;GET&#39; };  const req = https.request(options, (res) => {   console.log(&#39;statusCode:&#39;, res.statusCode);   console.log(&#39;headers:&#39;, res.headers);    res.on(&#39;data&#39;, (d) => {     process.stdout.write(d);   }); });  req.on(&#39;error&#39;, (e) => {   console.error(e); }); req.end();  Example using options from tls.connect(): const options = {   hostname: &#39;encrypted.google.com&#39;,   port: 443,   path: &#39;\/&#39;,   method: &#39;GET&#39;,   key: fs.readFileSync(&#39;test\/fixtures\/keys\/agent2-key.pem&#39;),   cert: fs.readFileSync(&#39;test\/fixtures\/keys\/agent2-cert.pem&#39;) }; options.agent = new https.Agent(options);  const req = https.request(options, (res) => {   \/\/ ... });  Alternatively, opt out of connection pooling by not using an Agent. Example: const options = {   hostname: &#39;encrypted.google.com&#39;,   port: 443,   path: &#39;\/&#39;,   method: &#39;GET&#39;,   key: fs.readFileSync(&#39;test\/fixtures\/keys\/agent2-key.pem&#39;),   cert: fs.readFileSync(&#39;test\/fixtures\/keys\/agent2-cert.pem&#39;),   agent: false };  const req = https.request(options, (res) => {   \/\/ ... });  Example using a URL as options: const options = new URL(&#39;https:\/\/abc:xyz@example.com&#39;);  const req = https.request(options, (res) => {   \/\/ ... });  Example pinning on certificate fingerprint, or the public key (similar to pin-sha256): const tls = require(&#39;tls&#39;); const https = require(&#39;https&#39;); const crypto = require(&#39;crypto&#39;);  function sha256(s) {   return crypto.createHash(&#39;sha256&#39;).update(s).digest(&#39;base64&#39;); } const options = {   hostname: &#39;github.com&#39;,   port: 443,   path: &#39;\/&#39;,   method: &#39;GET&#39;,   checkServerIdentity: function(host, cert) {     \/\/ Make sure the certificate is issued to the host we are connected to     const err = tls.checkServerIdentity(host, cert);     if (err) {       return err;     }      \/\/ Pin the public key, similar to HPKP pin-sha25 pinning     const pubkey256 = &#39;pL1+qb9HTMRZJmuC\/bB\/ZI9d302BYrrqiVuRyW+DGrU=&#39;;     if (sha256(cert.pubkey) !== pubkey256) {       const msg = &#39;Certificate verification error: &#39; +         `The public key of &#39;${cert.subject.CN}&#39; ` +         &#39;does not match our pinned fingerprint&#39;;       return new Error(msg);     }      \/\/ Pin the exact certificate, rather then the pub key     const cert256 = &#39;25:FE:39:32:D9:63:8C:8A:FC:A1:9A:29:87:&#39; +       &#39;D8:3E:4C:1D:98:DB:71:E4:1A:48:03:98:EA:22:6A:BD:8B:93:16&#39;;     if (cert.fingerprint256 !== cert256) {       const msg = &#39;Certificate verification error: &#39; +         `The certificate of &#39;${cert.subject.CN}&#39; ` +         &#39;does not match our pinned fingerprint&#39;;       return new Error(msg);     }      \/\/ This loop is informational only.     \/\/ Print the certificate and public key fingerprints of all certs in the     \/\/ chain. Its common to pin the public key of the issuer on the public     \/\/ internet, while pinning the public key of the service in sensitive     \/\/ environments.     do {       console.log(&#39;Subject Common Name:&#39;, cert.subject.CN);       console.log(&#39;  Certificate SHA256 fingerprint:&#39;, cert.fingerprint256);        hash = crypto.createHash(&#39;sha256&#39;);       console.log(&#39;  Public key ping-sha256:&#39;, sha256(cert.pubkey));        lastprint256 = cert.fingerprint256;       cert = cert.issuerCertificate;     } while (cert.fingerprint256 !== lastprint256);    }, };  options.agent = new https.Agent(options); const req = https.request(options, (res) => {   console.log(&#39;All OK. Server matched our pinned cert or public key&#39;);   console.log(&#39;statusCode:&#39;, res.statusCode);   \/\/ Print the HPKP values   console.log(&#39;headers:&#39;, res.headers[&#39;public-key-pins&#39;]);    res.on(&#39;data&#39;, (d) => {}); });  req.on(&#39;error&#39;, (e) => {   console.error(e.message); }); req.end();  Outputs for example: Subject Common Name: github.com   Certificate SHA256 fingerprint: 25:FE:39:32:D9:63:8C:8A:FC:A1:9A:29:87:D8:3E:4C:1D:98:DB:71:E4:1A:48:03:98:EA:22:6A:BD:8B:93:16   Public key ping-sha256: pL1+qb9HTMRZJmuC\/bB\/ZI9d302BYrrqiVuRyW+DGrU= Subject Common Name: DigiCert SHA2 Extended Validation Server CA   Certificate SHA256 fingerprint: 40:3E:06:2A:26:53:05:91:13:28:5B:AF:80:A0:D4:AE:42:2C:84:8C:9F:78:FA:D0:1F:C9:4B:C5:B8:7F:EF:1A   Public key ping-sha256: RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn\/yOhI\/y+ho= Subject Common Name: DigiCert High Assurance EV Root CA   Certificate SHA256 fingerprint: 74:31:E5:F4:C3:C1:CE:46:90:77:4F:0B:61:E0:54:40:88:3B:A9:A0:1E:D0:0B:A6:AB:D7:80:6E:D3:B1:18:CF   Public key ping-sha256: WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18= All OK. Server matched our pinned cert or public key statusCode: 200 headers: max-age=0; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn\/yOhI\/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5\/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+\/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_inspector","title":"Inspector","description":"The inspector module provides an API for interacting with the V8 inspector. It can be accessed using: const inspector = require(&#39;inspector&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_inspector_open_port_host_wait","title":"inspector.open([port[, host[, wait]]])","description":"Activate inspector on host and port. Equivalent to node --inspect=[[host:]port], but can be done programmatically after node has started. If wait is true, will block until a client has connected to the inspect port and flow control has been passed to the debugger client."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_inspector_close","title":"inspector.close()","description":"Deactivate the inspector. Blocks until there are no active connections."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_inspector_url","title":"inspector.url()","description":"Return the URL of the active inspector, or undefined if there is none."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_modules","title":"Modules","description":"In the Node.js module system, each file is treated as a separate module. For example, consider a file named foo.js: const circle = require(&#39;.\/circle.js&#39;); console.log(`The area of a circle of radius 4 is ${circle.area(4)}`);  On the first line, foo.js loads the module circle.js that is in the same directory as foo.js. Here are the contents of circle.js: const { PI } = Math;  exports.area = (r) => PI * r ** 2;  exports.circumference = (r) => 2 * PI * r;  The module circle.js has exported the functions area() and circumference(). Functions and objects are added to the root of a module by specifying additional properties on the special exports object. Variables local to the module will be private, because the module is wrapped in a function by Node.js (see module wrapper). In this example, the variable PI is private to circle.js. The module.exports property can be assigned a new value (such as a function or object). Below, bar.js makes use of the square module, which exports a Square class: const Square = require(&#39;.\/square.js&#39;); const mySquare = new Square(2); console.log(`The area of mySquare is ${mySquare.area()}`);  The square module is defined in square.js: \/\/ assigning to exports will not modify module, must use module.exports module.exports = class Square {   constructor(width) {     this.width = width;   }    area() {     return this.width ** 2;   } };  The module system is implemented in the require(&#39;module&#39;) module."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_accessing_the_main_module","title":"Accessing the main module","description":"When a file is run directly from Node.js, require.main is set to its module. That means that it is possible to determine whether a file has been run directly by testing require.main === module. For a file foo.js, this will be true if run via node foo.js, but false if run by require(&#39;.\/foo&#39;). Because module provides a filename property (normally equivalent to __filename), the entry point of the current application can be obtained by checking require.main.filename."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_addenda_package_manager_tips","title":"Addenda: Package Manager Tips","description":"The semantics of Node.js&#39;s require() function were designed to be general enough to support a number of reasonable directory structures. Package manager programs such as dpkg, rpm, and npm will hopefully find it possible to build native packages from Node.js modules without modification. Below we give a suggested directory structure that could work: Let&#39;s say that we wanted to have the folder at \/usr\/lib\/node\/<some-package>\/<some-version> hold the contents of a specific version of a package. Packages can depend on one another. In order to install package foo, it may be necessary to install a specific version of package bar. The bar package may itself have dependencies, and in some cases, these may even collide or form cyclic dependencies. Since Node.js looks up the realpath of any modules it loads (that is, resolves symlinks), and then looks for their dependencies in the node_modules folders as described here, this situation is very simple to resolve with the following architecture:  \/usr\/lib\/node\/foo\/1.2.3\/ - Contents of the foo package, version 1.2.3. \/usr\/lib\/node\/bar\/4.3.2\/ - Contents of the bar package that foo depends on. \/usr\/lib\/node\/foo\/1.2.3\/node_modules\/bar - Symbolic link to \/usr\/lib\/node\/bar\/4.3.2\/. \/usr\/lib\/node\/bar\/4.3.2\/node_modules\/* - Symbolic links to the packages that bar depends on.  Thus, even if a cycle is encountered, or if there are dependency conflicts, every module will be able to get a version of its dependency that it can use. When the code in the foo package does require(&#39;bar&#39;), it will get the version that is symlinked into \/usr\/lib\/node\/foo\/1.2.3\/node_modules\/bar. Then, when the code in the bar package calls require(&#39;quux&#39;), it&#39;ll get the version that is symlinked into \/usr\/lib\/node\/bar\/4.3.2\/node_modules\/quux. Furthermore, to make the module lookup process even more optimal, rather than putting packages directly in \/usr\/lib\/node, we could put them in \/usr\/lib\/node_modules\/<name>\/<version>. Then Node.js will not bother looking for missing dependencies in \/usr\/node_modules or \/node_modules. In order to make modules available to the Node.js REPL, it might be useful to also add the \/usr\/lib\/node_modules folder to the $NODE_PATH environment variable. Since the module lookups using node_modules folders are all relative, and based on the real path of the files making the calls to require(), the packages themselves can be anywhere."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_all_together","title":"All Together...","description":"To get the exact filename that will be loaded when require() is called, use the require.resolve() function. Putting together all of the above, here is the high-level algorithm in pseudocode of what require.resolve() does: require(X) from module at path Y 1. If X is a core module,    a. return the core module    b. STOP 2. If X begins with &#39;\/&#39;    a. set Y to be the filesystem root 3. If X begins with &#39;.\/&#39; or &#39;\/&#39; or &#39;..\/&#39;    a. LOAD_AS_FILE(Y + X)    b. LOAD_AS_DIRECTORY(Y + X) 4. LOAD_NODE_MODULES(X, dirname(Y)) 5. THROW \"not found\"  LOAD_AS_FILE(X) 1. If X is a file, load X as JavaScript text.  STOP 2. If X.js is a file, load X.js as JavaScript text.  STOP 3. If X.json is a file, parse X.json to a JavaScript Object.  STOP 4. If X.node is a file, load X.node as binary addon.  STOP  LOAD_INDEX(X) 1. If X\/index.js is a file, load X\/index.js as JavaScript text.  STOP 2. If X\/index.json is a file, parse X\/index.json to a JavaScript object. STOP 3. If X\/index.node is a file, load X\/index.node as binary addon.  STOP  LOAD_AS_DIRECTORY(X) 1. If X\/package.json is a file,    a. Parse X\/package.json, and look for \"main\" field.    b. let M = X + (json main field)    c. LOAD_AS_FILE(M)    d. LOAD_INDEX(M) 2. LOAD_INDEX(X)  LOAD_NODE_MODULES(X, START) 1. let DIRS = NODE_MODULES_PATHS(START) 2. for each DIR in DIRS:    a. LOAD_AS_FILE(DIR\/X)    b. LOAD_AS_DIRECTORY(DIR\/X)  NODE_MODULES_PATHS(START) 1. let PARTS = path split(START) 2. let I = count of PARTS - 1 3. let DIRS = [GLOBAL_FOLDERS] 4. while I >= 0,    a. if PARTS[I] = \"node_modules\" CONTINUE    b. DIR = path join(PARTS[0 .. I] + \"node_modules\")    c. DIRS = DIRS + DIR    d. let I = I - 1 5. return DIRS"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_caching","title":"Caching","description":"Modules are cached after the first time they are loaded. This means (among other things) that every call to require(&#39;foo&#39;) will get exactly the same object returned, if it would resolve to the same file. Multiple calls to require(&#39;foo&#39;) may not cause the module code to be executed multiple times.  This is an important feature. With it, \"partially done\" objects can be returned, thus allowing transitive dependencies to be loaded even when they would cause cycles. To have a module execute code multiple times, export a function, and call that function."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_module_caching_caveats","title":"Module Caching Caveats","description":"Modules are cached based on their resolved filename. Since modules may resolve to a different filename based on the location of the calling module (loading from node_modules folders), it is not a guarantee that require(&#39;foo&#39;) will always return the exact same object, if it would resolve to different files. Additionally, on case-insensitive file systems or operating systems, different resolved filenames can point to the same file, but the cache will still treat them as different modules and will reload the file multiple times. For example, require(&#39;.\/foo&#39;) and require(&#39;.\/FOO&#39;) return two different objects, irrespective of whether or not .\/foo and .\/FOO are the same file."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_core_modules","title":"Core Modules","description":"Node.js has several modules compiled into the binary. These modules are described in greater detail elsewhere in this documentation. The core modules are defined within Node.js&#39;s source and are located in the lib\/ folder. Core modules are always preferentially loaded if their identifier is passed to require(). For instance, require(&#39;http&#39;) will always return the built in HTTP module, even if there is a file by that name."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_cycles","title":"Cycles","description":"When there are circular require() calls, a module might not have finished executing when it is returned. Consider this situation: a.js: console.log(&#39;a starting&#39;); exports.done = false; const b = require(&#39;.\/b.js&#39;); console.log(&#39;in a, b.done = %j&#39;, b.done); exports.done = true; console.log(&#39;a done&#39;);  b.js: console.log(&#39;b starting&#39;); exports.done = false; const a = require(&#39;.\/a.js&#39;); console.log(&#39;in b, a.done = %j&#39;, a.done); exports.done = true; console.log(&#39;b done&#39;);  main.js: console.log(&#39;main starting&#39;); const a = require(&#39;.\/a.js&#39;); const b = require(&#39;.\/b.js&#39;); console.log(&#39;in main, a.done = %j, b.done = %j&#39;, a.done, b.done);  When main.js loads a.js, then a.js in turn loads b.js. At that point, b.js tries to load a.js. In order to prevent an infinite loop, an unfinished copy of the a.js exports object is returned to the b.js module. b.js then finishes loading, and its exports object is provided to the a.js module. By the time main.js has loaded both modules, they&#39;re both finished. The output of this program would thus be: $ node main.js main starting a starting b starting in b, a.done = false b done in a, b.done = true a done in main, a.done = true, b.done = true  Careful planning is required to allow cyclic module dependencies to work correctly within an application."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_file_modules","title":"File Modules","description":"If the exact filename is not found, then Node.js will attempt to load the required filename with the added extensions: .js, .json, and finally .node. .js files are interpreted as JavaScript text files, and .json files are parsed as JSON text files. .node files are interpreted as compiled addon modules loaded with dlopen. A required module prefixed with &#39;\/&#39; is an absolute path to the file. For example, require(&#39;\/home\/marco\/foo.js&#39;) will load the file at \/home\/marco\/foo.js. A required module prefixed with &#39;.\/&#39; is relative to the file calling require(). That is, circle.js must be in the same directory as foo.js for require(&#39;.\/circle&#39;) to find it. Without a leading &#39;\/&#39;, &#39;.\/&#39;, or &#39;..\/&#39; to indicate a file, the module must either be a core module or is loaded from a node_modules folder. If the given path does not exist, require() will throw an Error with its code property set to &#39;MODULE_NOT_FOUND&#39;."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_folders_as_modules","title":"Folders as Modules","description":"It is convenient to organize programs and libraries into self-contained directories, and then provide a single entry point to that library. There are three ways in which a folder may be passed to require() as an argument. The first is to create a package.json file in the root of the folder, which specifies a main module. An example package.json file might look like this: { \"name\" : \"some-library\",   \"main\" : \".\/lib\/some-library.js\" }  If this was in a folder at .\/some-library, then require(&#39;.\/some-library&#39;) would attempt to load .\/some-library\/lib\/some-library.js. This is the extent of Node.js&#39;s awareness of package.json files. If the file specified by the &#39;main&#39; entry of package.json is missing and can not be resolved, Node.js will report the entire module as missing with the default error: Error: Cannot find module &#39;some-library&#39;  If there is no package.json file present in the directory, then Node.js will attempt to load an index.js or index.node file out of that directory. For example, if there was no package.json file in the above example, then require(&#39;.\/some-library&#39;) would attempt to load:  .\/some-library\/index.js .\/some-library\/index.node"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_loading_from_node_modules_folders","title":"Loading from `node_modules` Folders","description":"If the module identifier passed to require() is not a core module, and does not begin with &#39;\/&#39;, &#39;..\/&#39;, or &#39;.\/&#39;, then Node.js starts at the parent directory of the current module, and adds \/node_modules, and attempts to load the module from that location. Node will not append node_modules to a path already ending in node_modules. If it is not found there, then it moves to the parent directory, and so on, until the root of the file system is reached. For example, if the file at &#39;\/home\/ry\/projects\/foo.js&#39; called require(&#39;bar.js&#39;), then Node.js would look in the following locations, in this order:  \/home\/ry\/projects\/node_modules\/bar.js \/home\/ry\/node_modules\/bar.js \/home\/node_modules\/bar.js \/node_modules\/bar.js  This allows programs to localize their dependencies, so that they do not clash. It is possible to require specific files or sub modules distributed with a module by including a path suffix after the module name. For instance require(&#39;example-module\/path\/to\/file&#39;) would resolve path\/to\/file relative to where example-module is located. The suffixed path follows the same module resolution semantics."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_loading_from_the_global_folders","title":"Loading from the global folders","description":"If the NODE_PATH environment variable is set to a colon-delimited list of absolute paths, then Node.js will search those paths for modules if they are not found elsewhere. On Windows, NODE_PATH is delimited by semicolons (;) instead of colons. NODE_PATH was originally created to support loading modules from varying paths before the current module resolution algorithm was frozen. NODE_PATH is still supported, but is less necessary now that the Node.js ecosystem has settled on a convention for locating dependent modules. Sometimes deployments that rely on NODE_PATH show surprising behavior when people are unaware that NODE_PATH must be set. Sometimes a module&#39;s dependencies change, causing a different version (or even a different module) to be loaded as the NODE_PATH is searched. Additionally, Node.js will search in the following list of GLOBAL_FOLDERS:  1: $HOME\/.node_modules 2: $HOME\/.node_libraries 3: $PREFIX\/lib\/node  Where $HOME is the user&#39;s home directory, and $PREFIX is Node.js&#39;s configured node_prefix. These are mostly for historic reasons. It is strongly encouraged to place dependencies in the local node_modules folder. These will be loaded faster, and more reliably."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_the_module_wrapper","title":"The module wrapper","description":"Before a module&#39;s code is executed, Node.js will wrap it with a function wrapper that looks like the following: (function(exports, require, module, __filename, __dirname) { \/\/ Module code actually lives in here });  By doing this, Node.js achieves a few things:  It keeps top-level variables (defined with var, const or let) scoped to the module rather than the global object. It helps to provide some global-looking variables that are actually specific to the module, such as: The module and exports objects that the implementor can use to export values from the module. The convenience variables __filename and __dirname, containing the module&#39;s absolute filename and directory path."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_the_module_object","title":"The `module` Object","description":"{Object}  In each module, the module free variable is a reference to the object representing the current module. For convenience, module.exports is also accessible via the exports module-global. module is not actually a global but rather local to each module."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_module_require_id","title":"module.require(id)","description":"The module.require method provides a way to load a module as if require() was called from the original module. In order to do this, it is necessary to get a reference to the module object. Since require() returns the module.exports, and the module is typically only available within a specific module&#39;s code, it must be explicitly exported in order to be used."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_the_module_scope","title":"The module scope","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all___dirname","title":"\\_\\_dirname","description":"{string}  The directory name of the current module. This is the same as the path.dirname() of the __filename. Example: running node example.js from \/Users\/mjr console.log(__dirname); \/\/ Prints: \/Users\/mjr console.log(path.dirname(__filename)); \/\/ Prints: \/Users\/mjr"},{"url":"http:\/\/nodejs.org\/api\/all.html#all___filename","title":"\\_\\_filename","description":"{string}  The file name of the current module. This is the resolved absolute path of the current module file. For a main program this is not necessarily the same as the file name used in the command line. See __dirname for the directory name of the current module. Examples: Running node example.js from \/Users\/mjr console.log(__filename); \/\/ Prints: \/Users\/mjr\/example.js console.log(__dirname); \/\/ Prints: \/Users\/mjr  Given two modules: a and b, where b is a dependency of a and there is a directory structure of:  \/Users\/mjr\/app\/a.js \/Users\/mjr\/app\/node_modules\/b\/b.js  References to __filename within b.js will return \/Users\/mjr\/app\/node_modules\/b\/b.js while references to __filename within a.js will return \/Users\/mjr\/app\/a.js."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_exports","title":"exports","description":"A reference to the module.exports that is shorter to type. See the section about the exports shortcut for details on when to use exports and when to use module.exports."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_module","title":"module","description":"{Object}  A reference to the current module, see the section about the module object. In particular, module.exports is used for defining what a module exports and makes available through require()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_require","title":"require()","description":"{Function}  To require modules."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_require_resolve_request_options","title":"require.resolve(request[, options])","description":"Use the internal require() machinery to look up the location of a module, but rather than loading the module, just return the resolved filename."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_require_resolve_paths_request","title":"require.resolve.paths(request)","description":"Returns an array containing the paths searched during resolution of request or null if the request string references a core module, for example http or fs."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_the_module_object","title":"The `Module` Object","description":"{Object}  Provides general utility methods when interacting with instances of Module \u2014 the module variable often seen in file modules. Accessed via require(&#39;module&#39;)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net","title":"Net","description":"Stability: 2 - Stable  The net module provides an asynchronous network API for creating stream-based TCP or IPC servers (net.createServer()) and clients (net.createConnection()). It can be accessed using: const net = require(&#39;net&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_connect","title":"net.connect()","description":"Aliases to net.createConnection(). Possible signatures:  net.connect(options[, connectListener]) net.connect(path[, connectListener]) for IPC connections. net.connect(port[, host][, connectListener]) for TCP connections."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_connect_options_connectlistener","title":"net.connect(options[, connectListener])","description":"Alias to net.createConnection(options[, connectListener])."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_connect_path_connectlistener","title":"net.connect(path[, connectListener])","description":"Alias to net.createConnection(path[, connectListener])."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_connect_port_host_connectlistener","title":"net.connect(port[, host][, connectListener])","description":"Alias to net.createConnection(port[, host][, connectListener])."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_createconnection","title":"net.createConnection()","description":"A factory function, which creates a new net.Socket, immediately initiates connection with socket.connect(), then returns the net.Socket that starts the connection. When the connection is established, a &#39;connect&#39; event will be emitted on the returned socket. The last parameter connectListener, if supplied, will be added as a listener for the &#39;connect&#39; event once. Possible signatures:  net.createConnection(options[, connectListener]) net.createConnection(path[, connectListener]) for IPC connections. net.createConnection(port[, host][, connectListener]) for TCP connections.  The net.connect() function is an alias to this function."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_createconnection_options_connectlistener","title":"net.createConnection(options[, connectListener])","description":"For available options, see new net.Socket([options]) and socket.connect(options[, connectListener]). Additional options:  timeout {number} If set, will be used to call socket.setTimeout(timeout) after the socket is created, but before it starts the connection.  Following is an example of a client of the echo server described in the net.createServer() section: const net = require(&#39;net&#39;); const client = net.createConnection({ port: 8124 }, () => {   \/\/ &#39;connect&#39; listener   console.log(&#39;connected to server!&#39;);   client.write(&#39;world!\\r\\n&#39;); }); client.on(&#39;data&#39;, (data) => {   console.log(data.toString());   client.end(); }); client.on(&#39;end&#39;, () => {   console.log(&#39;disconnected from server&#39;); });  To connect on the socket \/tmp\/echo.sock the second line would just be changed to: const client = net.createConnection({ path: &#39;\/tmp\/echo.sock&#39; });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_createconnection_path_connectlistener","title":"net.createConnection(path[, connectListener])","description":"Initiates an IPC connection. This function creates a new net.Socket with all options set to default, immediately initiates connection with socket.connect(path[, connectListener]), then returns the net.Socket that starts the connection."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_createconnection_port_host_connectlistener","title":"net.createConnection(port[, host][, connectListener])","description":"Initiates a TCP connection. This function creates a new net.Socket with all options set to default, immediately initiates connection with socket.connect(port[, host][, connectListener]), then returns the net.Socket that starts the connection."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_createserver_options_connectionlistener","title":"net.createServer([options][, connectionListener])","description":"Creates a new TCP or IPC server.  options {Object} allowHalfOpen {boolean} Indicates whether half-opened TCP connections are allowed. Default: false. pauseOnConnect {boolean} Indicates whether the socket should be paused on incoming connections. Default: false.   connectionListener {Function} Automatically set as a listener for the &#39;connection&#39; event. Returns: {net.Server}  If allowHalfOpen is set to true, when the other end of the socket sends a FIN packet, the server will only send a FIN packet back when socket.end() is explicitly called, until then the connection is half-closed (non-readable but still writable). See &#39;end&#39; event and RFC 1122 (section 4.2.2.13) for more information. If pauseOnConnect is set to true, then the socket associated with each incoming connection will be paused, and no data will be read from its handle. This allows connections to be passed between processes without any data being read by the original process. To begin reading data from a paused socket, call socket.resume(). The server can be a TCP server or an IPC server, depending on what it listen() to. Here is an example of an TCP echo server which listens for connections on port 8124: const net = require(&#39;net&#39;); const server = net.createServer((c) => {   \/\/ &#39;connection&#39; listener   console.log(&#39;client connected&#39;);   c.on(&#39;end&#39;, () => {     console.log(&#39;client disconnected&#39;);   });   c.write(&#39;hello\\r\\n&#39;);   c.pipe(c); }); server.on(&#39;error&#39;, (err) => {   throw err; }); server.listen(8124, () => {   console.log(&#39;server bound&#39;); });  Test this by using telnet: $ telnet localhost 8124  To listen on the socket \/tmp\/echo.sock the third line from the last would just be changed to: server.listen(&#39;\/tmp\/echo.sock&#39;, () => {   console.log(&#39;server bound&#39;); });  Use nc to connect to a UNIX domain socket server: $ nc -U \/tmp\/echo.sock"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_isip_input","title":"net.isIP(input)","description":"Tests if input is an IP address. Returns 0 for invalid strings, returns 4 for IP version 4 addresses, and returns 6 for IP version 6 addresses."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_isipv4_input","title":"net.isIPv4(input)","description":"Returns true if input is a version 4 IP address, otherwise returns false."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_net_isipv6_input","title":"net.isIPv6(input)","description":"Returns true if input is a version 6 IP address, otherwise returns false."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_ipc_support","title":"IPC Support","description":"The net module supports IPC with named pipes on Windows, and UNIX domain sockets on other operating systems."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_identifying_paths_for_ipc_connections","title":"Identifying paths for IPC connections","description":"net.connect(), net.createConnection(), server.listen() and socket.connect() take a path parameter to identify IPC endpoints. On UNIX, the local domain is also known as the UNIX domain. The path is a filesystem pathname. It gets truncated to sizeof(sockaddr_un.sun_path) - 1, which varies on different operating system between 91 and 107 bytes. The typical values are 107 on Linux and 103 on macOS. The path is subject to the same naming conventions and permissions checks as would be done on file creation. If the UNIX domain socket (that is visible as a file system path) is created and used in conjunction with one of Node.js&#39; API abstractions such as net.createServer(), it will be unlinked as part of server.close(). On the other hand, if it is created and used outside of these abstractions, the user will need to manually remove it. The same applies when the path was created by a Node.js API but the program crashes abruptly. In short, a UNIX domain socket once successfully created will be visible in the filesystem, and will persist until unlinked. On Windows, the local domain is implemented using a named pipe. The path must refer to an entry in \\\\?\\pipe\\ or \\\\.\\pipe\\. Any characters are permitted, but the latter may do some processing of pipe names, such as resolving .. sequences. Despite how it might look, the pipe namespace is flat. Pipes will not persist. They are removed when the last reference to them is closed. Unlike UNIX domain sockets, Windows will close and remove the pipe when the owning process exits. JavaScript string escaping requires paths to be specified with extra backslash escaping such as: net.createServer().listen(   path.join(&#39;\\\\\\\\?\\\\pipe&#39;, process.cwd(), &#39;myctl&#39;));"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os","title":"OS","description":"The os module provides a number of operating system-related utility methods. It can be accessed using: const os = require(&#39;os&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_arch","title":"os.arch()","description":"The os.arch() method returns a string identifying the operating system CPU architecture for which the Node.js binary was compiled. The current possible values are: &#39;arm&#39;, &#39;arm64&#39;, &#39;ia32&#39;, &#39;mips&#39;, &#39;mipsel&#39;, &#39;ppc&#39;, &#39;ppc64&#39;, &#39;s390&#39;, &#39;s390x&#39;, &#39;x32&#39;, and &#39;x64&#39;. Equivalent to process.arch."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_cpus","title":"os.cpus()","description":"The os.cpus() method returns an array of objects containing information about each logical CPU core. The properties included on each object include:  model {string} speed {number} (in MHz) times {Object} user {number} The number of milliseconds the CPU has spent in user mode. nice {number} The number of milliseconds the CPU has spent in nice mode. sys {number} The number of milliseconds the CPU has spent in sys mode. idle {number} The number of milliseconds the CPU has spent in idle mode. irq {number} The number of milliseconds the CPU has spent in irq mode.     [   {     model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,     speed: 2926,     times: {       user: 252020,       nice: 0,       sys: 30340,       idle: 1070356870,       irq: 0     }   },   {     model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,     speed: 2926,     times: {       user: 306960,       nice: 0,       sys: 26980,       idle: 1071569080,       irq: 0     }   },   {     model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,     speed: 2926,     times: {       user: 248450,       nice: 0,       sys: 21750,       idle: 1070919370,       irq: 0     }   },   {     model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,     speed: 2926,     times: {       user: 256880,       nice: 0,       sys: 19430,       idle: 1070905480,       irq: 20     }   },   {     model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,     speed: 2926,     times: {       user: 511580,       nice: 20,       sys: 40900,       idle: 1070842510,       irq: 0     }   },   {     model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,     speed: 2926,     times: {       user: 291660,       nice: 0,       sys: 34360,       idle: 1070888000,       irq: 10     }   },   {     model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,     speed: 2926,     times: {       user: 308260,       nice: 0,       sys: 55410,       idle: 1071129970,       irq: 880     }   },   {     model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,     speed: 2926,     times: {       user: 266450,       nice: 1480,       sys: 34920,       idle: 1072572010,       irq: 30     }   } ]  Because nice values are UNIX-specific, on Windows the nice values of all processors are always 0."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_endianness","title":"os.endianness()","description":"The os.endianness() method returns a string identifying the endianness of the CPU for which the Node.js binary was compiled. Possible values are:  &#39;BE&#39; for big endian &#39;LE&#39; for little endian."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_freemem","title":"os.freemem()","description":"The os.freemem() method returns the amount of free system memory in bytes as an integer."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_homedir","title":"os.homedir()","description":"The os.homedir() method returns the home directory of the current user as a string."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_hostname","title":"os.hostname()","description":"The os.hostname() method returns the hostname of the operating system as a string."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_loadavg","title":"os.loadavg()","description":"The os.loadavg() method returns an array containing the 1, 5, and 15 minute load averages. The load average is a measure of system activity, calculated by the operating system and expressed as a fractional number. As a rule of thumb, the load average should ideally be less than the number of logical CPUs in the system. The load average is a UNIX-specific concept with no real equivalent on Windows platforms. On Windows, the return value is always [0, 0, 0]."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_networkinterfaces","title":"os.networkInterfaces()","description":"The os.networkInterfaces() method returns an object containing only network interfaces that have been assigned a network address. Each key on the returned object identifies a network interface. The associated value is an array of objects that each describe an assigned network address. The properties available on the assigned network address object include:  address {string} The assigned IPv4 or IPv6 address netmask {string} The IPv4 or IPv6 network mask family {string} Either IPv4 or IPv6 mac {string} The MAC address of the network interface internal {boolean} true if the network interface is a loopback or similar interface that is not remotely accessible; otherwise false scopeid {number} The numeric IPv6 scope ID (only specified when family is IPv6) cidr {string} The assigned IPv4 or IPv6 address with the routing prefix in CIDR notation. If the netmask is invalid, this property is set to null.   {   lo: [     {       address: &#39;127.0.0.1&#39;,       netmask: &#39;255.0.0.0&#39;,       family: &#39;IPv4&#39;,       mac: &#39;00:00:00:00:00:00&#39;,       internal: true,       cidr: &#39;127.0.0.1\/8&#39;     },     {       address: &#39;::1&#39;,       netmask: &#39;ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff&#39;,       family: &#39;IPv6&#39;,       mac: &#39;00:00:00:00:00:00&#39;,       internal: true,       cidr: &#39;::1\/128&#39;     }   ],   eth0: [     {       address: &#39;192.168.1.108&#39;,       netmask: &#39;255.255.255.0&#39;,       family: &#39;IPv4&#39;,       mac: &#39;01:02:03:0a:0b:0c&#39;,       internal: false,       cidr: &#39;192.168.1.108\/24&#39;     },     {       address: &#39;fe80::a00:27ff:fe4e:66a1&#39;,       netmask: &#39;ffff:ffff:ffff:ffff::&#39;,       family: &#39;IPv6&#39;,       mac: &#39;01:02:03:0a:0b:0c&#39;,       internal: false,       cidr: &#39;fe80::a00:27ff:fe4e:66a1\/64&#39;     }   ] }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_platform","title":"os.platform()","description":"The os.platform() method returns a string identifying the operating system platform as set during compile time of Node.js. Currently possible values are:  &#39;aix&#39; &#39;darwin&#39; &#39;freebsd&#39; &#39;linux&#39; &#39;openbsd&#39; &#39;sunos&#39; &#39;win32&#39;  Equivalent to process.platform. The value &#39;android&#39; may also be returned if the Node.js is built on the Android operating system. However, Android support in Node.js is considered to be experimental at this time."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_release","title":"os.release()","description":"The os.release() method returns a string identifying the operating system release. On POSIX systems, the operating system release is determined by calling uname(3). On Windows, GetVersionExW() is used. Please see https:\/\/en.wikipedia.org\/wiki\/Uname#Examples for more information."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_tmpdir","title":"os.tmpdir()","description":"The os.tmpdir() method returns a string specifying the operating system&#39;s default directory for temporary files."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_totalmem","title":"os.totalmem()","description":"The os.totalmem() method returns the total amount of system memory in bytes as an integer."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_type","title":"os.type()","description":"The os.type() method returns a string identifying the operating system name as returned by uname(3). For example &#39;Linux&#39; on Linux, &#39;Darwin&#39; on macOS and &#39;Windows_NT&#39; on Windows. Please see https:\/\/en.wikipedia.org\/wiki\/Uname#Examples for additional information about the output of running uname(3) on various operating systems."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_uptime","title":"os.uptime()","description":"The os.uptime() method returns the system uptime in number of seconds."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_userinfo_options","title":"os.userInfo([options])","description":"The os.userInfo() method returns information about the currently effective user \u2014 on POSIX platforms, this is typically a subset of the password file. The returned object includes the username, uid, gid, shell, and homedir. On Windows, the uid and gid fields are -1, and shell is null. The value of homedir returned by os.userInfo() is provided by the operating system. This differs from the result of os.homedir(), which queries several environment variables for the home directory before falling back to the operating system response."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_os_constants","title":"OS Constants","description":"The following constants are exported by os.constants. Not all constants will be available on every operating system."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_signal_constants","title":"Signal Constants","description":"The following signal constants are exported by os.constants.signals:         Constant     Description           SIGHUP     Sent to indicate when a controlling terminal is closed or a parent     process exits.           SIGINT     Sent to indicate when a user wishes to interrupt a process     ((Ctrl+C)).           SIGQUIT     Sent to indicate when a user wishes to terminate a process and perform a     core dump.           SIGILL     Sent to a process to notify that it has attempted to perform an illegal,     malformed, unknown, or privileged instruction.           SIGTRAP     Sent to a process when an exception has occurred.           SIGABRT     Sent to a process to request that it abort.           SIGIOT     Synonym for SIGABRT           SIGBUS     Sent to a process to notify that it has caused a bus error.           SIGFPE     Sent to a process to notify that it has performed an illegal arithmetic     operation.           SIGKILL     Sent to a process to terminate it immediately.           SIGUSR1 SIGUSR2     Sent to a process to identify user-defined conditions.           SIGSEGV     Sent to a process to notify of a segmentation fault.           SIGPIPE     Sent to a process when it has attempted to write to a disconnected     pipe.           SIGALRM     Sent to a process when a system timer elapses.           SIGTERM     Sent to a process to request termination.           SIGCHLD     Sent to a process when a child process terminates.           SIGSTKFLT     Sent to a process to indicate a stack fault on a coprocessor.           SIGCONT     Sent to instruct the operating system to continue a paused process.           SIGSTOP     Sent to instruct the operating system to halt a process.           SIGTSTP     Sent to a process to request it to stop.           SIGBREAK     Sent to indicate when a user wishes to interrupt a process.           SIGTTIN     Sent to a process when it reads from the TTY while in the     background.           SIGTTOU     Sent to a process when it writes to the TTY while in the     background.           SIGURG     Sent to a process when a socket has urgent data to read.           SIGXCPU     Sent to a process when it has exceeded its limit on CPU usage.           SIGXFSZ     Sent to a process when it grows a file larger than the maximum     allowed.           SIGVTALRM     Sent to a process when a virtual timer has elapsed.           SIGPROF     Sent to a process when a system timer has elapsed.           SIGWINCH     Sent to a process when the controlling terminal has changed its     size.           SIGIO     Sent to a process when I\/O is available.           SIGPOLL     Synonym for SIGIO           SIGLOST     Sent to a process when a file lock has been lost.           SIGPWR     Sent to a process to notify of a power failure.           SIGINFO     Synonym for SIGPWR           SIGSYS     Sent to a process to notify of a bad argument.           SIGUNUSED     Synonym for SIGSYS"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_error_constants","title":"Error Constants","description":"The following error constants are exported by os.constants.errno:"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_posix_error_constants","title":"POSIX Error Constants","description":"Constant     Description           E2BIG     Indicates that the list of arguments is longer than expected.           EACCES     Indicates that the operation did not have sufficient permissions.           EADDRINUSE     Indicates that the network address is already in use.           EADDRNOTAVAIL     Indicates that the network address is currently unavailable for     use.           EAFNOSUPPORT     Indicates that the network address family is not supported.           EAGAIN     Indicates that there is currently no data available and to try the     operation again later.           EALREADY     Indicates that the socket already has a pending connection in     progress.           EBADF     Indicates that a file descriptor is not valid.           EBADMSG     Indicates an invalid data message.           EBUSY     Indicates that a device or resource is busy.           ECANCELED     Indicates that an operation was canceled.           ECHILD     Indicates that there are no child processes.           ECONNABORTED     Indicates that the network connection has been aborted.           ECONNREFUSED     Indicates that the network connection has been refused.           ECONNRESET     Indicates that the network connection has been reset.           EDEADLK     Indicates that a resource deadlock has been avoided.           EDESTADDRREQ     Indicates that a destination address is required.           EDOM     Indicates that an argument is out of the domain of the function.           EDQUOT     Indicates that the disk quota has been exceeded.           EEXIST     Indicates that the file already exists.           EFAULT     Indicates an invalid pointer address.           EFBIG     Indicates that the file is too large.           EHOSTUNREACH     Indicates that the host is unreachable.           EIDRM     Indicates that the identifier has been removed.           EILSEQ     Indicates an illegal byte sequence.           EINPROGRESS     Indicates that an operation is already in progress.           EINTR     Indicates that a function call was interrupted.           EINVAL     Indicates that an invalid argument was provided.           EIO     Indicates an otherwise unspecified I\/O error.           EISCONN     Indicates that the socket is connected.           EISDIR     Indicates that the path is a directory.           ELOOP     Indicates too many levels of symbolic links in a path.           EMFILE     Indicates that there are too many open files.           EMLINK     Indicates that there are too many hard links to a file.           EMSGSIZE     Indicates that the provided message is too long.           EMULTIHOP     Indicates that a multihop was attempted.           ENAMETOOLONG     Indicates that the filename is too long.           ENETDOWN     Indicates that the network is down.           ENETRESET     Indicates that the connection has been aborted by the network.           ENETUNREACH     Indicates that the network is unreachable.           ENFILE     Indicates too many open files in the system.           ENOBUFS     Indicates that no buffer space is available.           ENODATA     Indicates that no message is available on the stream head read     queue.           ENODEV     Indicates that there is no such device.           ENOENT     Indicates that there is no such file or directory.           ENOEXEC     Indicates an exec format error.           ENOLCK     Indicates that there are no locks available.           ENOLINK     Indications that a link has been severed.           ENOMEM     Indicates that there is not enough space.           ENOMSG     Indicates that there is no message of the desired type.           ENOPROTOOPT     Indicates that a given protocol is not available.           ENOSPC     Indicates that there is no space available on the device.           ENOSR     Indicates that there are no stream resources available.           ENOSTR     Indicates that a given resource is not a stream.           ENOSYS     Indicates that a function has not been implemented.           ENOTCONN     Indicates that the socket is not connected.           ENOTDIR     Indicates that the path is not a directory.           ENOTEMPTY     Indicates that the directory is not empty.           ENOTSOCK     Indicates that the given item is not a socket.           ENOTSUP     Indicates that a given operation is not supported.           ENOTTY     Indicates an inappropriate I\/O control operation.           ENXIO     Indicates no such device or address.           EOPNOTSUPP     Indicates that an operation is not supported on the socket.     Note that while ENOTSUP and EOPNOTSUPP have the same value on Linux,     according to POSIX.1 these error values should be distinct.)           EOVERFLOW     Indicates that a value is too large to be stored in a given data     type.           EPERM     Indicates that the operation is not permitted.           EPIPE     Indicates a broken pipe.           EPROTO     Indicates a protocol error.           EPROTONOSUPPORT     Indicates that a protocol is not supported.           EPROTOTYPE     Indicates the wrong type of protocol for a socket.           ERANGE     Indicates that the results are too large.           EROFS     Indicates that the file system is read only.           ESPIPE     Indicates an invalid seek operation.           ESRCH     Indicates that there is no such process.           ESTALE     Indicates that the file handle is stale.           ETIME     Indicates an expired timer.           ETIMEDOUT     Indicates that the connection timed out.           ETXTBSY     Indicates that a text file is busy.           EWOULDBLOCK     Indicates that the operation would block.           EXDEV     Indicates an improper link."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_windows_specific_error_constants","title":"Windows Specific Error Constants","description":"The following error codes are specific to the Windows operating system:         Constant     Description           WSAEINTR     Indicates an interrupted function call.           WSAEBADF     Indicates an invalid file handle.           WSAEACCES     Indicates insufficient permissions to complete the operation.           WSAEFAULT     Indicates an invalid pointer address.           WSAEINVAL     Indicates that an invalid argument was passed.           WSAEMFILE     Indicates that there are too many open files.           WSAEWOULDBLOCK     Indicates that a resource is temporarily unavailable.           WSAEINPROGRESS     Indicates that an operation is currently in progress.           WSAEALREADY     Indicates that an operation is already in progress.           WSAENOTSOCK     Indicates that the resource is not a socket.           WSAEDESTADDRREQ     Indicates that a destination address is required.           WSAEMSGSIZE     Indicates that the message size is too long.           WSAEPROTOTYPE     Indicates the wrong protocol type for the socket.           WSAENOPROTOOPT     Indicates a bad protocol option.           WSAEPROTONOSUPPORT     Indicates that the protocol is not supported.           WSAESOCKTNOSUPPORT     Indicates that the socket type is not supported.           WSAEOPNOTSUPP     Indicates that the operation is not supported.           WSAEPFNOSUPPORT     Indicates that the protocol family is not supported.           WSAEAFNOSUPPORT     Indicates that the address family is not supported.           WSAEADDRINUSE     Indicates that the network address is already in use.           WSAEADDRNOTAVAIL     Indicates that the network address is not available.           WSAENETDOWN     Indicates that the network is down.           WSAENETUNREACH     Indicates that the network is unreachable.           WSAENETRESET     Indicates that the network connection has been reset.           WSAECONNABORTED     Indicates that the connection has been aborted.           WSAECONNRESET     Indicates that the connection has been reset by the peer.           WSAENOBUFS     Indicates that there is no buffer space available.           WSAEISCONN     Indicates that the socket is already connected.           WSAENOTCONN     Indicates that the socket is not connected.           WSAESHUTDOWN     Indicates that data cannot be sent after the socket has been     shutdown.           WSAETOOMANYREFS     Indicates that there are too many references.           WSAETIMEDOUT     Indicates that the connection has timed out.           WSAECONNREFUSED     Indicates that the connection has been refused.           WSAELOOP     Indicates that a name cannot be translated.           WSAENAMETOOLONG     Indicates that a name was too long.           WSAEHOSTDOWN     Indicates that a network host is down.           WSAEHOSTUNREACH     Indicates that there is no route to a network host.           WSAENOTEMPTY     Indicates that the directory is not empty.           WSAEPROCLIM     Indicates that there are too many processes.           WSAEUSERS     Indicates that the user quota has been exceeded.           WSAEDQUOT     Indicates that the disk quota has been exceeded.           WSAESTALE     Indicates a stale file handle reference.           WSAEREMOTE     Indicates that the item is remote.           WSASYSNOTREADY     Indicates that the network subsystem is not ready.           WSAVERNOTSUPPORTED     Indicates that the winsock.dll version is out of range.           WSANOTINITIALISED     Indicates that successful WSAStartup has not yet been performed.           WSAEDISCON     Indicates that a graceful shutdown is in progress.           WSAENOMORE     Indicates that there are no more results.           WSAECANCELLED     Indicates that an operation has been canceled.           WSAEINVALIDPROCTABLE     Indicates that the procedure call table is invalid.           WSAEINVALIDPROVIDER     Indicates an invalid service provider.           WSAEPROVIDERFAILEDINIT     Indicates that the service provider failed to initialized.           WSASYSCALLFAILURE     Indicates a system call failure.           WSASERVICE_NOT_FOUND     Indicates that a service was not found.           WSATYPE_NOT_FOUND     Indicates that a class type was not found.           WSA_E_NO_MORE     Indicates that there are no more results.           WSA_E_CANCELLED     Indicates that the call was canceled.           WSAEREFUSED     Indicates that a database query was refused."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dlopen_constants","title":"dlopen Constants","description":"If available on the operating system, the following constants are exported in os.constants.dlopen. See dlopen(3) for detailed information.         Constant     Description           RTLD_LAZY     Perform lazy binding. Node.js sets this flag by default.           RTLD_NOW     Resolve all undefined symbols in the library before dlopen(3)     returns.           RTLD_GLOBAL     Symbols defined by the library will be made available for symbol     resolution of subsequently loaded libraries.           RTLD_LOCAL     The converse of RTLD_GLOBAL. This is the default behavior if neither     flag is specified.           RTLD_DEEPBIND     Make a self-contained library use its own symbols in preference to     symbols from previously loaded libraries."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_libuv_constants","title":"libuv Constants","description":"Constant     Description           UV_UDP_REUSEADDR"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path","title":"Path","description":"The path module provides utilities for working with file and directory paths. It can be accessed using: const path = require(&#39;path&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path_basename_path_ext","title":"path.basename(path[, ext])","description":"The path.basename() methods returns the last portion of a path, similar to the Unix basename command. Trailing directory separators are ignored, see path.sep. path.basename(&#39;\/foo\/bar\/baz\/asdf\/quux.html&#39;); \/\/ Returns: &#39;quux.html&#39;  path.basename(&#39;\/foo\/bar\/baz\/asdf\/quux.html&#39;, &#39;.html&#39;); \/\/ Returns: &#39;quux&#39;  A TypeError is thrown if path is not a string or if ext is given and is not a string."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path_dirname_path","title":"path.dirname(path)","description":"The path.dirname() method returns the directory name of a path, similar to the Unix dirname command. Trailing directory separators are ignored, see path.sep. path.dirname(&#39;\/foo\/bar\/baz\/asdf\/quux&#39;); \/\/ Returns: &#39;\/foo\/bar\/baz\/asdf&#39;  A TypeError is thrown if path is not a string."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path_extname_path","title":"path.extname(path)","description":"The path.extname() method returns the extension of the path, from the last occurrence of the . (period) character to end of string in the last portion of the path. If there is no . in the last portion of the path, or if the first character of the basename of path (see path.basename()) is ., then an empty string is returned. path.extname(&#39;index.html&#39;); \/\/ Returns: &#39;.html&#39;  path.extname(&#39;index.coffee.md&#39;); \/\/ Returns: &#39;.md&#39;  path.extname(&#39;index.&#39;); \/\/ Returns: &#39;.&#39;  path.extname(&#39;index&#39;); \/\/ Returns: &#39;&#39;  path.extname(&#39;.index&#39;); \/\/ Returns: &#39;&#39;  A TypeError is thrown if path is not a string."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path_format_pathobject","title":"path.format(pathObject)","description":"The path.format() method returns a path string from an object. This is the opposite of path.parse(). When providing properties to the pathObject remember that there are combinations where one property has priority over another:  pathObject.root is ignored if pathObject.dir is provided pathObject.ext and pathObject.name are ignored if pathObject.base exists  For example, on POSIX: \/\/ If `dir`, `root` and `base` are provided, \/\/ `${dir}${path.sep}${base}` \/\/ will be returned. `root` is ignored. path.format({   root: &#39;\/ignored&#39;,   dir: &#39;\/home\/user\/dir&#39;,   base: &#39;file.txt&#39; }); \/\/ Returns: &#39;\/home\/user\/dir\/file.txt&#39;  \/\/ `root` will be used if `dir` is not specified. \/\/ If only `root` is provided or `dir` is equal to `root` then the \/\/ platform separator will not be included. `ext` will be ignored. path.format({   root: &#39;\/&#39;,   base: &#39;file.txt&#39;,   ext: &#39;ignored&#39; }); \/\/ Returns: &#39;\/file.txt&#39;  \/\/ `name` + `ext` will be used if `base` is not specified. path.format({   root: &#39;\/&#39;,   name: &#39;file&#39;,   ext: &#39;.txt&#39; }); \/\/ Returns: &#39;\/file.txt&#39;  On Windows: path.format({   dir: &#39;C:\\\\path\\\\dir&#39;,   base: &#39;file.txt&#39; }); \/\/ Returns: &#39;C:\\\\path\\\\dir\\\\file.txt&#39;"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path_isabsolute_path","title":"path.isAbsolute(path)","description":"The path.isAbsolute() method determines if path is an absolute path. If the given path is a zero-length string, false will be returned. For example on POSIX: path.isAbsolute(&#39;\/foo\/bar&#39;); \/\/ true path.isAbsolute(&#39;\/baz\/..&#39;);  \/\/ true path.isAbsolute(&#39;qux\/&#39;);     \/\/ false path.isAbsolute(&#39;.&#39;);        \/\/ false  On Windows: path.isAbsolute(&#39;\/\/server&#39;);    \/\/ true path.isAbsolute(&#39;\\\\\\\\server&#39;);  \/\/ true path.isAbsolute(&#39;C:\/foo\/..&#39;);   \/\/ true path.isAbsolute(&#39;C:\\\\foo\\\\..&#39;); \/\/ true path.isAbsolute(&#39;bar\\\\baz&#39;);    \/\/ false path.isAbsolute(&#39;bar\/baz&#39;);     \/\/ false path.isAbsolute(&#39;.&#39;);           \/\/ false  A TypeError is thrown if path is not a string."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path_join_paths","title":"path.join([...paths])","description":"The path.join() method joins all given path segments together using the platform specific separator as a delimiter, then normalizes the resulting path. Zero-length path segments are ignored. If the joined path string is a zero-length string then &#39;.&#39; will be returned, representing the current working directory. path.join(&#39;\/foo&#39;, &#39;bar&#39;, &#39;baz\/asdf&#39;, &#39;quux&#39;, &#39;..&#39;); \/\/ Returns: &#39;\/foo\/bar\/baz\/asdf&#39;  path.join(&#39;foo&#39;, {}, &#39;bar&#39;); \/\/ throws &#39;TypeError: Path must be a string. Received {}&#39;  A TypeError is thrown if any of the path segments is not a string."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path_normalize_path","title":"path.normalize(path)","description":"The path.normalize() method normalizes the given path, resolving &#39;..&#39; and &#39;.&#39; segments. When multiple, sequential path segment separation characters are found (e.g. \/ on POSIX and either \\ or \/ on Windows), they are replaced by a single instance of the platform specific path segment separator (\/ on POSIX and \\ on Windows). Trailing separators are preserved. If the path is a zero-length string, &#39;.&#39; is returned, representing the current working directory. For example on POSIX: path.normalize(&#39;\/foo\/bar\/\/baz\/asdf\/quux\/..&#39;); \/\/ Returns: &#39;\/foo\/bar\/baz\/asdf&#39;  On Windows: path.normalize(&#39;C:\\\\temp\\\\\\\\foo\\\\bar\\\\..\\\\&#39;); \/\/ Returns: &#39;C:\\\\temp\\\\foo\\\\&#39;  Since Windows recognizes multiple path separators, both separators will be replaced by instances of the Windows preferred separator (\\): path.win32.normalize(&#39;C:\/\/\/\/temp\\\\\\\\\/\\\\\/\\\\\/foo\/bar&#39;); \/\/ Returns: &#39;C:\\\\temp\\\\foo\\\\bar&#39;  A TypeError is thrown if path is not a string."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path_parse_path","title":"path.parse(path)","description":"The path.parse() method returns an object whose properties represent significant elements of the path. Trailing directory separators are ignored, see path.sep. The returned object will have the following properties:  dir {string} root {string} base {string} name {string} ext {string}  For example on POSIX: path.parse(&#39;\/home\/user\/dir\/file.txt&#39;); \/\/ Returns: \/\/ { root: &#39;\/&#39;, \/\/   dir: &#39;\/home\/user\/dir&#39;, \/\/   base: &#39;file.txt&#39;, \/\/   ext: &#39;.txt&#39;, \/\/   name: &#39;file&#39; }  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502          dir        \u2502    base    \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 root \u2502              \u2502 name \u2502 ext \u2502 \"  \/    home\/user\/dir \/ file  .txt \" \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 (all spaces in the \"\" line should be ignored \u2014 they are purely for formatting)  On Windows: path.parse(&#39;C:\\\\path\\\\dir\\\\file.txt&#39;); \/\/ Returns: \/\/ { root: &#39;C:\\\\&#39;, \/\/   dir: &#39;C:\\\\path\\\\dir&#39;, \/\/   base: &#39;file.txt&#39;, \/\/   ext: &#39;.txt&#39;, \/\/   name: &#39;file&#39; }  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502          dir        \u2502    base    \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 root \u2502              \u2502 name \u2502 ext \u2502 \" C:\\      path\\dir   \\ file  .txt \" \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518 (all spaces in the \"\" line should be ignored \u2014 they are purely for formatting)  A TypeError is thrown if path is not a string."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path_relative_from_to","title":"path.relative(from, to)","description":"The path.relative() method returns the relative path from from to to based on the current working directory. If from and to each resolve to the same path (after calling path.resolve() on each), a zero-length string is returned. If a zero-length string is passed as from or to, the current working directory will be used instead of the zero-length strings. For example on POSIX: path.relative(&#39;\/data\/orandea\/test\/aaa&#39;, &#39;\/data\/orandea\/impl\/bbb&#39;); \/\/ Returns: &#39;..\/..\/impl\/bbb&#39;  On Windows: path.relative(&#39;C:\\\\orandea\\\\test\\\\aaa&#39;, &#39;C:\\\\orandea\\\\impl\\\\bbb&#39;); \/\/ Returns: &#39;..\\\\..\\\\impl\\\\bbb&#39;  A TypeError is thrown if either from or to is not a string."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path_resolve_paths","title":"path.resolve([...paths])","description":"The path.resolve() method resolves a sequence of paths or path segments into an absolute path. The given sequence of paths is processed from right to left, with each subsequent path prepended until an absolute path is constructed. For instance, given the sequence of path segments: \/foo, \/bar, baz, calling path.resolve(&#39;\/foo&#39;, &#39;\/bar&#39;, &#39;baz&#39;) would return \/bar\/baz. If after processing all given path segments an absolute path has not yet been generated, the current working directory is used. The resulting path is normalized and trailing slashes are removed unless the path is resolved to the root directory. Zero-length path segments are ignored. If no path segments are passed, path.resolve() will return the absolute path of the current working directory. path.resolve(&#39;\/foo\/bar&#39;, &#39;.\/baz&#39;); \/\/ Returns: &#39;\/foo\/bar\/baz&#39;  path.resolve(&#39;\/foo\/bar&#39;, &#39;\/tmp\/file\/&#39;); \/\/ Returns: &#39;\/tmp\/file&#39;  path.resolve(&#39;wwwroot&#39;, &#39;static_files\/png\/&#39;, &#39;..\/gif\/image.gif&#39;); \/\/ if the current working directory is \/home\/myself\/node, \/\/ this returns &#39;\/home\/myself\/node\/wwwroot\/static_files\/gif\/image.gif&#39;  A TypeError is thrown if any of the arguments is not a string."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_path_tonamespacedpath_path","title":"path.toNamespacedPath(path)","description":"On Windows systems only, returns an equivalent namespace-prefixed path for the given path. If path is not a string, path will be returned without modifications. This method is meaningful only on Windows system. On posix systems, the method is non-operational and always returns path without modifications."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_windows_vs_posix","title":"Windows vs. POSIX","description":"The default operation of the path module varies based on the operating system on which a Node.js application is running. Specifically, when running on a Windows operating system, the path module will assume that Windows-style paths are being used. For example, using the path.basename() function with the Windows file path C:\\temp\\myfile.html, will yield different results when running on POSIX than when run on Windows: On POSIX: path.basename(&#39;C:\\\\temp\\\\myfile.html&#39;); \/\/ Returns: &#39;C:\\\\temp\\\\myfile.html&#39;  On Windows: path.basename(&#39;C:\\\\temp\\\\myfile.html&#39;); \/\/ Returns: &#39;myfile.html&#39;  To achieve consistent results when working with Windows file paths on any operating system, use path.win32: On POSIX and Windows: path.win32.basename(&#39;C:\\\\temp\\\\myfile.html&#39;); \/\/ Returns: &#39;myfile.html&#39;  To achieve consistent results when working with POSIX file paths on any operating system, use path.posix: On POSIX and Windows: path.posix.basename(&#39;\/tmp\/myfile.html&#39;); \/\/ Returns: &#39;myfile.html&#39;  Note: On Windows Node.js follows the concept of per-drive working directory. This behavior can be observed when using a drive path without a backslash. For example path.resolve(&#39;c:\\\\&#39;) can potentially return a different result than path.resolve(&#39;c:&#39;). For more information, see this MSDN page."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_performance_timing_api","title":"Performance Timing API","description":"The Performance Timing API provides an implementation of the W3C Performance Timeline specification. The purpose of the API is to support collection of high resolution performance metrics. This is the same Performance API as implemented in modern Web browsers. const { PerformanceObserver, performance } = require(&#39;perf_hooks&#39;);  const obs = new PerformanceObserver((items) => {   console.log(items.getEntries()[0].duration);   performance.clearMarks(); }); obs.observe({ entryTypes: [&#39;measure&#39;] });  performance.mark(&#39;A&#39;); doSomeLongRunningProcess(() => {   performance.mark(&#39;B&#39;);   performance.measure(&#39;A to B&#39;, &#39;A&#39;, &#39;B&#39;); });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_punycode","title":"Punycode","description":"The version of the punycode module bundled in Node.js is being deprecated. In a future major version of Node.js this module will be removed. Users currently depending on the punycode module should switch to using the userland-provided Punycode.js module instead. The punycode module is a bundled version of the Punycode.js module. It can be accessed using: const punycode = require(&#39;punycode&#39;);  Punycode is a character encoding scheme defined by RFC 3492 that is primarily intended for use in Internationalized Domain Names. Because host names in URLs are limited to ASCII characters only, Domain Names that contain non-ASCII characters must be converted into ASCII using the Punycode scheme. For instance, the Japanese character that translates into the English word, &#39;example&#39; is &#39;\u4f8b&#39;. The Internationalized Domain Name, &#39;\u4f8b.com&#39; (equivalent to &#39;example.com&#39;) is represented by Punycode as the ASCII string &#39;xn--fsq.com&#39;. The punycode module provides a simple implementation of the Punycode standard. The punycode module is a third-party dependency used by Node.js and made available to developers as a convenience. Fixes or other modifications to the module must be directed to the Punycode.js project."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_punycode_decode_string","title":"punycode.decode(string)","description":"The punycode.decode() method converts a Punycode string of ASCII-only characters to the equivalent string of Unicode codepoints. punycode.decode(&#39;maana-pta&#39;); \/\/ &#39;ma\u00f1ana&#39; punycode.decode(&#39;--dqo34k&#39;); \/\/ &#39;\u2603-\u2318&#39;"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_punycode_encode_string","title":"punycode.encode(string)","description":"The punycode.encode() method converts a string of Unicode codepoints to a Punycode string of ASCII-only characters. punycode.encode(&#39;ma\u00f1ana&#39;); \/\/ &#39;maana-pta&#39; punycode.encode(&#39;\u2603-\u2318&#39;); \/\/ &#39;--dqo34k&#39;"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_punycode_toascii_domain","title":"punycode.toASCII(domain)","description":"The punycode.toASCII() method converts a Unicode string representing an Internationalized Domain Name to Punycode. Only the non-ASCII parts of the domain name will be converted. Calling punycode.toASCII() on a string that already only contains ASCII characters will have no effect. \/\/ encode domain names punycode.toASCII(&#39;ma\u00f1ana.com&#39;);  \/\/ &#39;xn--maana-pta.com&#39; punycode.toASCII(&#39;\u2603-\u2318.com&#39;);   \/\/ &#39;xn----dqo34k.com&#39; punycode.toASCII(&#39;example.com&#39;); \/\/ &#39;example.com&#39;"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_punycode_tounicode_domain","title":"punycode.toUnicode(domain)","description":"The punycode.toUnicode() method converts a string representing a domain name containing Punycode encoded characters into Unicode. Only the Punycode encoded parts of the domain name are be converted. \/\/ decode domain names punycode.toUnicode(&#39;xn--maana-pta.com&#39;); \/\/ &#39;ma\u00f1ana.com&#39; punycode.toUnicode(&#39;xn----dqo34k.com&#39;);  \/\/ &#39;\u2603-\u2318.com&#39; punycode.toUnicode(&#39;example.com&#39;);       \/\/ &#39;example.com&#39;"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_query_string","title":"Query String","description":"The querystring module provides utilities for parsing and formatting URL query strings. It can be accessed using: const querystring = require(&#39;querystring&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_querystring_escape_str","title":"querystring.escape(str)","description":"The querystring.escape() method performs URL percent-encoding on the given str in a manner that is optimized for the specific requirements of URL query strings. The querystring.escape() method is used by querystring.stringify() and is generally not expected to be used directly. It is exported primarily to allow application code to provide a replacement percent-encoding implementation if necessary by assigning querystring.escape to an alternative function."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_querystring_parse_str_sep_eq_options","title":"querystring.parse(str[, sep[, eq[, options]]])","description":"The querystring.parse() method parses a URL query string (str) into a collection of key and value pairs. For example, the query string &#39;foo=bar&abc=xyz&abc=123&#39; is parsed into:  {   foo: &#39;bar&#39;,   abc: [&#39;xyz&#39;, &#39;123&#39;] }  The object returned by the querystring.parse() method does not prototypically inherit from the JavaScript Object. This means that typical Object methods such as obj.toString(), obj.hasOwnProperty(), and others are not defined and will not work. By default, percent-encoded characters within the query string will be assumed to use UTF-8 encoding. If an alternative character encoding is used, then an alternative decodeURIComponent option will need to be specified as illustrated in the following example: \/\/ Assuming gbkDecodeURIComponent function already exists...  querystring.parse(&#39;w=%D6%D0%CE%C4&foo=bar&#39;, null, null,                   { decodeURIComponent: gbkDecodeURIComponent });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_querystring_stringify_obj_sep_eq_options","title":"querystring.stringify(obj[, sep[, eq[, options]]])","description":"The querystring.stringify() method produces a URL query string from a given obj by iterating through the object&#39;s \"own properties\". It serializes the following types of values passed in obj: {string|number|boolean|string[]|number[]|boolean[]} Any other input values will be coerced to empty strings. querystring.stringify({ foo: &#39;bar&#39;, baz: [&#39;qux&#39;, &#39;quux&#39;], corge: &#39;&#39; }); \/\/ returns &#39;foo=bar&baz=qux&baz=quux&corge=&#39;  querystring.stringify({ foo: &#39;bar&#39;, baz: &#39;qux&#39; }, &#39;;&#39;, &#39;:&#39;); \/\/ returns &#39;foo:bar;baz:qux&#39;  By default, characters requiring percent-encoding within the query string will be encoded as UTF-8. If an alternative encoding is required, then an alternative encodeURIComponent option will need to be specified as illustrated in the following example: \/\/ Assuming gbkEncodeURIComponent function already exists,  querystring.stringify({ w: &#39;\u4e2d\u6587&#39;, foo: &#39;bar&#39; }, null, null,                       { encodeURIComponent: gbkEncodeURIComponent });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_querystring_unescape_str","title":"querystring.unescape(str)","description":"The querystring.unescape() method performs decoding of URL percent-encoded characters on the given str. The querystring.unescape() method is used by querystring.parse() and is generally not expected to be used directly. It is exported primarily to allow application code to provide a replacement decoding implementation if necessary by assigning querystring.unescape to an alternative function. By default, the querystring.unescape() method will attempt to use the JavaScript built-in decodeURIComponent() method to decode. If that fails, a safer equivalent that does not throw on malformed URLs will be used."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_readline","title":"Readline","description":"The readline module provides an interface for reading data from a Readable stream (such as process.stdin) one line at a time. It can be accessed using: const readline = require(&#39;readline&#39;);  The following simple example illustrates the basic use of the readline module. const readline = require(&#39;readline&#39;);  const rl = readline.createInterface({   input: process.stdin,   output: process.stdout });  rl.question(&#39;What do you think of Node.js? &#39;, (answer) => {   \/\/ TODO: Log the answer in a database   console.log(`Thank you for your valuable feedback: ${answer}`);    rl.close(); });  Once this code is invoked, the Node.js application will not terminate until the readline.Interface is closed because the interface waits for data to be received on the input stream."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_readline_clearline_stream_dir","title":"readline.clearLine(stream, dir)","description":"The readline.clearLine() method clears current line of given TTY stream in a specified direction identified by dir."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_readline_clearscreendown_stream","title":"readline.clearScreenDown(stream)","description":"The readline.clearScreenDown() method clears the given TTY stream from the current position of the cursor down."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_readline_createinterface_options","title":"readline.createInterface(options)","description":"The readline.createInterface() method creates a new readline.Interface instance. const readline = require(&#39;readline&#39;); const rl = readline.createInterface({   input: process.stdin,   output: process.stdout });  Once the readline.Interface instance is created, the most common case is to listen for the &#39;line&#39; event: rl.on(&#39;line&#39;, (line) => {   console.log(`Received: ${line}`); });  If terminal is true for this instance then the output stream will get the best compatibility if it defines an output.columns property and emits a &#39;resize&#39; event on the output if or when the columns ever change (process.stdout does this automatically when it is a TTY)."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_use_of_the_completer_function","title":"Use of the `completer` Function","description":"The completer function takes the current line entered by the user as an argument, and returns an Array with 2 entries:  An Array with matching entries for the completion. The substring that was used for the matching.  For instance: [[substr1, substr2, ...], originalsubstring]. function completer(line) {   const completions = &#39;.help .error .exit .quit .q&#39;.split(&#39; &#39;);   const hits = completions.filter((c) => c.startsWith(line));   \/\/ show all completions if none found   return [hits.length ? hits : completions, line]; }  The completer function can be called asynchronously if it accepts two arguments: function completer(linePartial, callback) {   callback(null, [[&#39;123&#39;], linePartial]); }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_readline_cursorto_stream_x_y","title":"readline.cursorTo(stream, x, y)","description":"The readline.cursorTo() method moves cursor to the specified position in a given TTY stream."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_readline_emitkeypressevents_stream_interface","title":"readline.emitKeypressEvents(stream[, interface])","description":"The readline.emitKeypressEvents() method causes the given Readable stream to begin emitting &#39;keypress&#39; events corresponding to received input. Optionally, interface specifies a readline.Interface instance for which autocompletion is disabled when copy-pasted input is detected. If the stream is a TTY, then it must be in raw mode. This is automatically called by any readline instance on its input if the input is a terminal. Closing the readline instance does not stop the input from emitting &#39;keypress&#39; events. readline.emitKeypressEvents(process.stdin); if (process.stdin.isTTY)   process.stdin.setRawMode(true);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_readline_movecursor_stream_dx_dy","title":"readline.moveCursor(stream, dx, dy)","description":"The readline.moveCursor() method moves the cursor relative to its current position in a given TTY stream. Example: Tiny CLI The following example illustrates the use of readline.Interface class to implement a small command-line interface: const readline = require(&#39;readline&#39;); const rl = readline.createInterface({   input: process.stdin,   output: process.stdout,   prompt: &#39;OHAI> &#39; });  rl.prompt();  rl.on(&#39;line&#39;, (line) => {   switch (line.trim()) {     case &#39;hello&#39;:       console.log(&#39;world!&#39;);       break;     default:       console.log(`Say what? I might have heard &#39;${line.trim()}&#39;`);       break;   }   rl.prompt(); }).on(&#39;close&#39;, () => {   console.log(&#39;Have a great day!&#39;);   process.exit(0); });  Example: Read File Stream Line-by-Line A common use case for readline is to consume input from a filesystem Readable stream one line at a time, as illustrated in the following example: const readline = require(&#39;readline&#39;); const fs = require(&#39;fs&#39;);  const rl = readline.createInterface({   input: fs.createReadStream(&#39;sample.txt&#39;),   crlfDelay: Infinity });  rl.on(&#39;line&#39;, (line) => {   console.log(`Line from file: ${line}`); });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_repl","title":"REPL","description":"The repl module provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications. It can be accessed using: const repl = require(&#39;repl&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_repl_start_options","title":"repl.start([options])","description":"The repl.start() method creates and starts a repl.REPLServer instance. If options is a string, then it specifies the input prompt: const repl = require(&#39;repl&#39;);  \/\/ a Unix style prompt repl.start(&#39;$ &#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_design_and_features","title":"Design and Features","description":"The repl module exports the repl.REPLServer class. While running, instances of repl.REPLServer will accept individual lines of user input, evaluate those according to a user-defined evaluation function, then output the result. Input and output may be from stdin and stdout, respectively, or may be connected to any Node.js stream. Instances of repl.REPLServer support automatic completion of inputs, simplistic Emacs-style line editing, multi-line inputs, ANSI-styled output, saving and restoring current REPL session state, error recovery, and customizable evaluation functions."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_commands_and_special_keys","title":"Commands and Special Keys","description":"The following special commands are supported by all REPL instances:  .break - When in the process of inputting a multi-line expression, entering the .break command (or pressing the <ctrl>-C key combination) will abort further input or processing of that expression. .clear - Resets the REPL context to an empty object and clears any multi-line expression currently being input. .exit - Close the I\/O stream, causing the REPL to exit. .help - Show this list of special commands. .save - Save the current REPL session to a file: > .save .\/file\/to\/save.js .load - Load a file into the current REPL session. > .load .\/file\/to\/load.js .editor - Enter editor mode (<ctrl>-D to finish, <ctrl>-C to cancel).   > .editor \/\/ Entering editor mode (^D to finish, ^C to cancel) function welcome(name) {   return `Hello ${name}!`; }  welcome(&#39;Node.js User&#39;);  \/\/ ^D &#39;Hello Node.js User!&#39; >  The following key combinations in the REPL have these special effects:  <ctrl>-C - When pressed once, has the same effect as the .break command. When pressed twice on a blank line, has the same effect as the .exit command. <ctrl>-D - Has the same effect as the .exit command. <tab> - When pressed on a blank line, displays global and local (scope) variables. When pressed while entering other input, displays relevant autocompletion options."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_default_evaluation","title":"Default Evaluation","description":"By default, all instances of repl.REPLServer use an evaluation function that evaluates JavaScript expressions and provides access to Node.js&#39; built-in modules. This default behavior can be overridden by passing in an alternative evaluation function when the repl.REPLServer instance is created."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_javascript_expressions","title":"JavaScript Expressions","description":"The default evaluator supports direct evaluation of JavaScript expressions:  > 1 + 1 2 > const m = 2 undefined > m + 1 3  Unless otherwise scoped within blocks or functions, variables declared either implicitly or using the const, let, or var keywords are declared at the global scope."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_global_and_local_scope","title":"Global and Local Scope","description":"The default evaluator provides access to any variables that exist in the global scope. It is possible to expose a variable to the REPL explicitly by assigning it to the context object associated with each REPLServer: const repl = require(&#39;repl&#39;); const msg = &#39;message&#39;;  repl.start(&#39;> &#39;).context.m = msg;  Properties in the context object appear as local within the REPL:  $ node repl_test.js > m &#39;message&#39;  Context properties are not read-only by default. To specify read-only globals, context properties must be defined using Object.defineProperty(): const repl = require(&#39;repl&#39;); const msg = &#39;message&#39;;  const r = repl.start(&#39;> &#39;); Object.defineProperty(r.context, &#39;m&#39;, {   configurable: false,   enumerable: true,   value: msg });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_accessing_core_node_js_modules","title":"Accessing Core Node.js Modules","description":"The default evaluator will automatically load Node.js core modules into the REPL environment when used. For instance, unless otherwise declared as a global or scoped variable, the input fs will be evaluated on-demand as global.fs = require(&#39;fs&#39;).  > fs.createReadStream(&#39;.\/some\/file&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_global_uncaught_exceptions","title":"Global Uncaught Exceptions","description":"The REPL uses the domain module to catch all uncaught exceptions for that REPL session. This use of the domain module in the REPL has these side effects:  Uncaught exceptions do not emit the &#39;uncaughtException&#39; event. Trying to use process.setUncaughtExceptionCaptureCallback() throws an ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE error."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_assignment_of_the__underscore_variable","title":"Assignment of the `_` (underscore) variable","description":"The default evaluator will, by default, assign the result of the most recently evaluated expression to the special variable _ (underscore). Explicitly setting _ to a value will disable this behavior.  > [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ] [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ] > _.length 3 > _ += 1 Expression assignment to _ now disabled. 4 > 1 + 1 2 > _ 4  Similarly, _error will refer to the last seen error, if there was any. Explicitly setting _error to a value will disable this behavior.  > throw new Error(&#39;foo&#39;); Error: foo > _error.message &#39;foo&#39;"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_await_keyword","title":"`await` keyword","description":"With the --experimental-repl-await command line option specified, experimental support for the await keyword is enabled.  > await Promise.resolve(123) 123 > await Promise.reject(new Error(&#39;REPL await&#39;)) Error: REPL await     at repl:1:45 > const timeout = util.promisify(setTimeout); undefined > const old = Date.now(); await timeout(1000); console.log(Date.now() - old); 1002 undefined"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_custom_evaluation_functions","title":"Custom Evaluation Functions","description":"When a new repl.REPLServer is created, a custom evaluation function may be provided. This can be used, for instance, to implement fully customized REPL applications. The following illustrates a hypothetical example of a REPL that performs translation of text from one language to another: const repl = require(&#39;repl&#39;); const { Translator } = require(&#39;translator&#39;);  const myTranslator = new Translator(&#39;en&#39;, &#39;fr&#39;);  function myEval(cmd, context, filename, callback) {   callback(null, myTranslator.translate(cmd)); }  repl.start({ prompt: &#39;> &#39;, eval: myEval });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_recoverable_errors","title":"Recoverable Errors","description":"As a user is typing input into the REPL prompt, pressing the <enter> key will send the current line of input to the eval function. In order to support multi-line input, the eval function can return an instance of repl.Recoverable to the provided callback function: function myEval(cmd, context, filename, callback) {   let result;   try {     result = vm.runInThisContext(cmd);   } catch (e) {     if (isRecoverableError(e)) {       return callback(new repl.Recoverable(e));     }   }   callback(null, result); }  function isRecoverableError(error) {   if (error.name === &#39;SyntaxError&#39;) {     return \/^(Unexpected end of input|Unexpected token)\/.test(error.message);   }   return false; }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_customizing_repl_output","title":"Customizing REPL Output","description":"By default, repl.REPLServer instances format output using the util.inspect() method before writing the output to the provided Writable stream (process.stdout by default). The useColors boolean option can be specified at construction to instruct the default writer to use ANSI style codes to colorize the output from the util.inspect() method. It is possible to fully customize the output of a repl.REPLServer instance by passing a new function in using the writer option on construction. The following example, for instance, simply converts any input text to upper case: const repl = require(&#39;repl&#39;);  const r = repl.start({ prompt: &#39;> &#39;, eval: myEval, writer: myWriter });  function myEval(cmd, context, filename, callback) {   callback(null, cmd); }  function myWriter(output) {   return output.toUpperCase(); }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_the_node_js_repl","title":"The Node.js REPL","description":"Node.js itself uses the repl module to provide its own interactive interface for executing JavaScript. This can be used by executing the Node.js binary without passing any arguments (or by passing the -i argument):  $ node > const a = [1, 2, 3]; undefined > a [ 1, 2, 3 ] > a.forEach((v) => { ...   console.log(v); ...   }); 1 2 3"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_environment_variable_options","title":"Environment Variable Options","description":"Various behaviors of the Node.js REPL can be customized using the following environment variables:  NODE_REPL_HISTORY - When a valid path is given, persistent REPL history will be saved to the specified file rather than .node_repl_history in the user&#39;s home directory. Setting this value to &#39;&#39; will disable persistent REPL history. Whitespace will be trimmed from the value. NODE_REPL_HISTORY_SIZE - Controls how many lines of history will be persisted if history is available. Must be a positive number. Default: 1000. NODE_REPL_MODE - May be either &#39;sloppy&#39; or &#39;strict&#39;. Default: &#39;sloppy&#39;, which will allow non-strict mode code to be run."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_persistent_history","title":"Persistent History","description":"By default, the Node.js REPL will persist history between node REPL sessions by saving inputs to a .node_repl_history file located in the user&#39;s home directory. This can be disabled by setting the environment variable NODE_REPL_HISTORY=&#39;&#39;."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_using_the_node_js_repl_with_advanced_line_editors","title":"Using the Node.js REPL with advanced line-editors","description":"For advanced line-editors, start Node.js with the environment variable NODE_NO_READLINE=1. This will start the main and debugger REPL in canonical terminal settings, which will allow use with rlwrap. For example, the following can be added to a .bashrc file: alias node=\"env NODE_NO_READLINE=1 rlwrap node\""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_starting_multiple_repl_instances_against_a_single_running_instance","title":"Starting multiple REPL instances against a single running instance","description":"It is possible to create and run multiple REPL instances against a single running instance of Node.js that share a single global object but have separate I\/O interfaces. The following example, for instance, provides separate REPLs on stdin, a Unix socket, and a TCP socket: const net = require(&#39;net&#39;); const repl = require(&#39;repl&#39;); let connections = 0;  repl.start({   prompt: &#39;Node.js via stdin> &#39;,   input: process.stdin,   output: process.stdout });  net.createServer((socket) => {   connections += 1;   repl.start({     prompt: &#39;Node.js via Unix socket> &#39;,     input: socket,     output: socket   }).on(&#39;exit&#39;, () => {     socket.end();   }); }).listen(&#39;\/tmp\/node-repl-sock&#39;);  net.createServer((socket) => {   connections += 1;   repl.start({     prompt: &#39;Node.js via TCP socket> &#39;,     input: socket,     output: socket   }).on(&#39;exit&#39;, () => {     socket.end();   }); }).listen(5001);  Running this application from the command line will start a REPL on stdin. Other REPL clients may connect through the Unix socket or TCP socket. telnet, for instance, is useful for connecting to TCP sockets, while socat can be used to connect to both Unix and TCP sockets. By starting a REPL from a Unix socket-based server instead of stdin, it is possible to connect to a long-running Node.js process without restarting it. For an example of running a \"full-featured\" (terminal) REPL over a net.Server and net.Socket instance, see: https:\/\/gist.github.com\/2209310. For an example of running a REPL instance over curl(1), see: https:\/\/gist.github.com\/2053342."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_stream","title":"Stream","description":"A stream is an abstract interface for working with streaming data in Node.js. The stream module provides a base API that makes it easy to build objects that implement the stream interface. There are many stream objects provided by Node.js. For instance, a request to an HTTP server and process.stdout are both stream instances. Streams can be readable, writable, or both. All streams are instances of EventEmitter. The stream module can be accessed using: const stream = require(&#39;stream&#39;);  While it is important to understand how streams work, the stream module itself is most useful for developers that are creating new types of stream instances. Developers who are primarily consuming stream objects will rarely need to use the stream module directly."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_stream_finished_stream_callback","title":"stream.finished(stream, callback)","description":"A function to get notified when a stream is no longer readable, writable or has experienced an error or a premature close event. const { finished } = require(&#39;stream&#39;);  const rs = fs.createReadStream(&#39;archive.tar&#39;);  finished(rs, (err) => {   if (err) {     console.error(&#39;Stream failed&#39;, err);   } else {     console.log(&#39;Stream is done reading&#39;);   } });  rs.resume(); \/\/ drain the stream  Especially useful in error handling scenarios where a stream is destroyed prematurely (like an aborted HTTP request), and will not emit &#39;end&#39; or &#39;finish&#39;. The finished API is promisify&#39;able as well; const finished = util.promisify(stream.finished);  const rs = fs.createReadStream(&#39;archive.tar&#39;);  async function run() {   await finished(rs);   console.log(&#39;Stream is done reading&#39;); }  run().catch(console.error); rs.resume(); \/\/ drain the stream"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_stream_pipeline_streams_callback","title":"stream.pipeline(...streams[, callback])","description":"A module method to pipe between streams forwarding errors and properly cleaning up and provide a callback when the pipeline is complete. const { pipeline } = require(&#39;stream&#39;); const fs = require(&#39;fs&#39;); const zlib = require(&#39;zlib&#39;);  \/\/ Use the pipeline API to easily pipe a series of streams \/\/ together and get notified when the pipeline is fully done.  \/\/ A pipeline to gzip a potentially huge tar file efficiently:  pipeline(   fs.createReadStream(&#39;archive.tar&#39;),   zlib.createGzip(),   fs.createWriteStream(&#39;archive.tar.gz&#39;),   (err) => {     if (err) {       console.error(&#39;Pipeline failed&#39;, err);     } else {       console.log(&#39;Pipeline succeeded&#39;);     }   } );  The pipeline API is promisify&#39;able as well: const pipeline = util.promisify(stream.pipeline);  async function run() {   await pipeline(     fs.createReadStream(&#39;archive.tar&#39;),     zlib.createGzip(),     fs.createWriteStream(&#39;archive.tar.gz&#39;)   );   console.log(&#39;Pipeline succeeded&#39;); }  run().catch(console.error);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_api_for_stream_consumers","title":"API for Stream Consumers","description":"Almost all Node.js applications, no matter how simple, use streams in some manner. The following is an example of using streams in a Node.js application that implements an HTTP server: const http = require(&#39;http&#39;);  const server = http.createServer((req, res) => {   \/\/ req is an http.IncomingMessage, which is a Readable Stream   \/\/ res is an http.ServerResponse, which is a Writable Stream    let body = &#39;&#39;;   \/\/ Get the data as utf8 strings.   \/\/ If an encoding is not set, Buffer objects will be received.   req.setEncoding(&#39;utf8&#39;);    \/\/ Readable streams emit &#39;data&#39; events once a listener is added   req.on(&#39;data&#39;, (chunk) => {     body += chunk;   });    \/\/ the &#39;end&#39; event indicates that the entire body has been received   req.on(&#39;end&#39;, () => {     try {       const data = JSON.parse(body);       \/\/ write back something interesting to the user:       res.write(typeof data);       res.end();     } catch (er) {       \/\/ uh oh! bad json!       res.statusCode = 400;       return res.end(`error: ${er.message}`);     }   }); });  server.listen(1337);  \/\/ $ curl localhost:1337 -d \"{}\" \/\/ object \/\/ $ curl localhost:1337 -d \"\\\"foo\\\"\" \/\/ string \/\/ $ curl localhost:1337 -d \"not json\" \/\/ error: Unexpected token o in JSON at position 1  Writable streams (such as res in the example) expose methods such as write() and end() that are used to write data onto the stream. Readable streams use the EventEmitter API for notifying application code when data is available to be read off the stream. That available data can be read from the stream in multiple ways. Both Writable and Readable streams use the EventEmitter API in various ways to communicate the current state of the stream. Duplex and Transform streams are both Writable and Readable. Applications that are either writing data to or consuming data from a stream are not required to implement the stream interfaces directly and will generally have no reason to call require(&#39;stream&#39;). Developers wishing to implement new types of streams should refer to the section API for Stream Implementers."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_stream_finished_stream_callback","title":"stream.finished(stream, callback)","description":"A function to get notified when a stream is no longer readable, writable or has experienced an error or a premature close event. const { finished } = require(&#39;stream&#39;);  const rs = fs.createReadStream(&#39;archive.tar&#39;);  finished(rs, (err) => {   if (err) {     console.error(&#39;Stream failed&#39;, err);   } else {     console.log(&#39;Stream is done reading&#39;);   } });  rs.resume(); \/\/ drain the stream  Especially useful in error handling scenarios where a stream is destroyed prematurely (like an aborted HTTP request), and will not emit &#39;end&#39; or &#39;finish&#39;. The finished API is promisify&#39;able as well; const finished = util.promisify(stream.finished);  const rs = fs.createReadStream(&#39;archive.tar&#39;);  async function run() {   await finished(rs);   console.log(&#39;Stream is done reading&#39;); }  run().catch(console.error); rs.resume(); \/\/ drain the stream"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_stream_pipeline_streams_callback","title":"stream.pipeline(...streams[, callback])","description":"A module method to pipe between streams forwarding errors and properly cleaning up and provide a callback when the pipeline is complete. const { pipeline } = require(&#39;stream&#39;); const fs = require(&#39;fs&#39;); const zlib = require(&#39;zlib&#39;);  \/\/ Use the pipeline API to easily pipe a series of streams \/\/ together and get notified when the pipeline is fully done.  \/\/ A pipeline to gzip a potentially huge tar file efficiently:  pipeline(   fs.createReadStream(&#39;archive.tar&#39;),   zlib.createGzip(),   fs.createWriteStream(&#39;archive.tar.gz&#39;),   (err) => {     if (err) {       console.error(&#39;Pipeline failed&#39;, err);     } else {       console.log(&#39;Pipeline succeeded&#39;);     }   } );  The pipeline API is promisify&#39;able as well: const pipeline = util.promisify(stream.pipeline);  async function run() {   await pipeline(     fs.createReadStream(&#39;archive.tar&#39;),     zlib.createGzip(),     fs.createWriteStream(&#39;archive.tar.gz&#39;)   );   console.log(&#39;Pipeline succeeded&#39;); }  run().catch(console.error);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_writable_streams","title":"Writable Streams","description":"Writable streams are an abstraction for a destination to which data is written. Examples of Writable streams include:  HTTP requests, on the client HTTP responses, on the server fs write streams zlib streams crypto streams TCP sockets child process stdin process.stdout, process.stderr  Some of these examples are actually Duplex streams that implement the Writable interface. All Writable streams implement the interface defined by the stream.Writable class. While specific instances of Writable streams may differ in various ways, all Writable streams follow the same fundamental usage pattern as illustrated in the example below: const myStream = getWritableStreamSomehow(); myStream.write(&#39;some data&#39;); myStream.write(&#39;some more data&#39;); myStream.end(&#39;done writing data&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_readable_streams","title":"Readable Streams","description":"Readable streams are an abstraction for a source from which data is consumed. Examples of Readable streams include:  HTTP responses, on the client HTTP requests, on the server fs read streams zlib streams crypto streams TCP sockets child process stdout and stderr process.stdin  All Readable streams implement the interface defined by the stream.Readable class."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_two_modes","title":"Two Modes","description":"Readable streams effectively operate in one of two modes: flowing and paused. When in flowing mode, data is read from the underlying system automatically and provided to an application as quickly as possible using events via the EventEmitter interface. In paused mode, the stream.read() method must be called explicitly to read chunks of data from the stream. All Readable streams begin in paused mode but can be switched to flowing mode in one of the following ways:  Adding a &#39;data&#39; event handler. Calling the stream.resume() method. Calling the stream.pipe() method to send the data to a Writable.  The Readable can switch back to paused mode using one of the following:  If there are no pipe destinations, by calling the stream.pause() method. If there are pipe destinations, by removing all pipe destinations. Multiple pipe destinations may be removed by calling the stream.unpipe() method.  The important concept to remember is that a Readable will not generate data until a mechanism for either consuming or ignoring that data is provided. If the consuming mechanism is disabled or taken away, the Readable will attempt to stop generating the data. For backwards compatibility reasons, removing &#39;data&#39; event handlers will not automatically pause the stream. Also, if there are piped destinations, then calling stream.pause() will not guarantee that the stream will remain paused once those destinations drain and ask for more data. If a Readable is switched into flowing mode and there are no consumers available to handle the data, that data will be lost. This can occur, for instance, when the readable.resume() method is called without a listener attached to the &#39;data&#39; event, or when a &#39;data&#39; event handler is removed from the stream."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_three_states","title":"Three States","description":"The \"two modes\" of operation for a Readable stream are a simplified abstraction for the more complicated internal state management that is happening within the Readable stream implementation. Specifically, at any given point in time, every Readable is in one of three possible states:  readable.readableFlowing = null readable.readableFlowing = false readable.readableFlowing = true  When readable.readableFlowing is null, no mechanism for consuming the streams data is provided so the stream will not generate its data. While in this state, attaching a listener for the &#39;data&#39; event, calling the readable.pipe() method, or calling the readable.resume() method will switch readable.readableFlowing to true, causing the Readable to begin actively emitting events as data is generated. Calling readable.pause(), readable.unpipe(), or receiving \"back pressure\" will cause the readable.readableFlowing to be set as false, temporarily halting the flowing of events but not halting the generation of data. While in this state, attaching a listener for the &#39;data&#39; event would not cause readable.readableFlowing to switch to true. const { PassThrough, Writable } = require(&#39;stream&#39;); const pass = new PassThrough(); const writable = new Writable();  pass.pipe(writable); pass.unpipe(writable); \/\/ readableFlowing is now false  pass.on(&#39;data&#39;, (chunk) => { console.log(chunk.toString()); }); pass.write(&#39;ok&#39;); \/\/ will not emit &#39;data&#39; pass.resume(); \/\/ must be called to make &#39;data&#39; being emitted  While readable.readableFlowing is false, data may be accumulating within the streams internal buffer."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_choose_one","title":"Choose One","description":"The Readable stream API evolved across multiple Node.js versions and provides multiple methods of consuming stream data. In general, developers should choose one of the methods of consuming data and should never use multiple methods to consume data from a single stream. Use of the readable.pipe() method is recommended for most users as it has been implemented to provide the easiest way of consuming stream data. Developers that require more fine-grained control over the transfer and generation of data can use the EventEmitter and readable.pause()\/readable.resume() APIs."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_duplex_and_transform_streams","title":"Duplex and Transform Streams","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_api_for_stream_implementers","title":"API for Stream Implementers","description":"The stream module API has been designed to make it possible to easily implement streams using JavaScript&#39;s prototypal inheritance model. First, a stream developer would declare a new JavaScript class that extends one of the four basic stream classes (stream.Writable, stream.Readable, stream.Duplex, or stream.Transform), making sure they call the appropriate parent class constructor: const { Writable } = require(&#39;stream&#39;);  class MyWritable extends Writable {   constructor(options) {     super(options);     \/\/ ...   } }  The new stream class must then implement one or more specific methods, depending on the type of stream being created, as detailed in the chart below:                         Use-case                       Class                       Method(s) to implement                              Reading only                 Readable                 _read                       Writing only                 Writable                          _write,         _writev,         _final                              Reading and writing                 Duplex                          _read,         _write,         _writev,         _final                       Operate on written data, then read the result                 Transform                          _transform,         _flush,         _final                  The implementation code for a stream should never call the \"public\" methods of a stream that are intended for use by consumers (as described in the API for Stream Consumers section). Doing so may lead to adverse side effects in application code consuming the stream."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_simplified_construction","title":"Simplified Construction","description":"For many simple cases, it is possible to construct a stream without relying on inheritance. This can be accomplished by directly creating instances of the stream.Writable, stream.Readable, stream.Duplex or stream.Transform objects and passing appropriate methods as constructor options. const { Writable } = require(&#39;stream&#39;);  const myWritable = new Writable({   write(chunk, encoding, callback) {     \/\/ ...   } });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_implementing_a_writable_stream","title":"Implementing a Writable Stream","description":"The stream.Writable class is extended to implement a Writable stream. Custom Writable streams must call the new stream.Writable([options]) constructor and implement the writable._write() method. The writable._writev() method may also be implemented."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_writable_write_chunk_encoding_callback","title":"writable.\\_write(chunk, encoding, callback)","description":"All Writable stream implementations must provide a writable._write() method to send data to the underlying resource. Transform streams provide their own implementation of the writable._write(). This function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal Writable class methods only. The callback method must be called to signal either that the write completed successfully or failed with an error. The first argument passed to the callback must be the Error object if the call failed or null if the write succeeded. All calls to writable.write() that occur between the time writable._write() is called and the callback is called will cause the written data to be buffered. When the callback is invoked, the stream might emit a &#39;drain&#39; event. If a stream implementation is capable of processing multiple chunks of data at once, the writable._writev() method should be implemented. If the decodeStrings property is explicitly set to false in the constructor options, then chunk will remain the same object that is passed to .write(), and may be a string rather than a Buffer. This is to support implementations that have an optimized handling for certain string data encodings. In that case, the encoding argument will indicate the character encoding of the string. Otherwise, the encoding argument can be safely ignored. The writable._write() method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_writable_writev_chunks_callback","title":"writable.\\_writev(chunks, callback)","description":"This function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal Writable class methods only. The writable._writev() method may be implemented in addition to writable._write() in stream implementations that are capable of processing multiple chunks of data at once. If implemented, the method will be called with all chunks of data currently buffered in the write queue. The writable._writev() method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_writable_destroy_err_callback","title":"writable.\\_destroy(err, callback)","description":"The _destroy() method is called by writable.destroy(). It can be overridden by child classes but it must not be called directly."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_writable_final_callback","title":"writable.\\_final(callback)","description":"The _final() method must not be called directly. It may be implemented by child classes, and if so, will be called by the internal Writable class methods only. This optional function will be called before the stream closes, delaying the &#39;finish&#39; event until callback is called. This is useful to close resources or write buffered data before a stream ends."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_errors_while_writing","title":"Errors While Writing","description":"It is recommended that errors occurring during the processing of the writable._write() and writable._writev() methods are reported by invoking the callback and passing the error as the first argument. This will cause an &#39;error&#39; event to be emitted by the Writable. Throwing an Error from within writable._write() can result in unexpected and inconsistent behavior depending on how the stream is being used. Using the callback ensures consistent and predictable handling of errors. If a Readable stream pipes into a Writable stream when Writable emits an error, the Readable stream will be unpiped. const { Writable } = require(&#39;stream&#39;);  const myWritable = new Writable({   write(chunk, encoding, callback) {     if (chunk.toString().indexOf(&#39;a&#39;) >= 0) {       callback(new Error(&#39;chunk is invalid&#39;));     } else {       callback();     }   } });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_an_example_writable_stream","title":"An Example Writable Stream","description":"The following illustrates a rather simplistic (and somewhat pointless) custom Writable stream implementation. While this specific Writable stream instance is not of any real particular usefulness, the example illustrates each of the required elements of a custom Writable stream instance: const { Writable } = require(&#39;stream&#39;);  class MyWritable extends Writable {   constructor(options) {     super(options);     \/\/ ...   }    _write(chunk, encoding, callback) {     if (chunk.toString().indexOf(&#39;a&#39;) >= 0) {       callback(new Error(&#39;chunk is invalid&#39;));     } else {       callback();     }   } }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_decoding_buffers_in_a_writable_stream","title":"Decoding buffers in a Writable Stream","description":"Decoding buffers is a common task, for instance, when using transformers whose input is a string. This is not a trivial process when using multi-byte characters encoding, such as UTF-8. The following example shows how to decode multi-byte strings using StringDecoder and Writable. const { Writable } = require(&#39;stream&#39;); const { StringDecoder } = require(&#39;string_decoder&#39;);  class StringWritable extends Writable {   constructor(options) {     super(options);     this._decoder = new StringDecoder(options && options.defaultEncoding);     this.data = &#39;&#39;;   }   _write(chunk, encoding, callback) {     if (encoding === &#39;buffer&#39;) {       chunk = this._decoder.write(chunk);     }     this.data += chunk;     callback();   }   _final(callback) {     this.data += this._decoder.end();     callback();   } }  const euro = [[0xE2, 0x82], [0xAC]].map(Buffer.from); const w = new StringWritable();  w.write(&#39;currency: &#39;); w.write(euro[0]); w.end(euro[1]);  console.log(w.data); \/\/ currency: \u20ac"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_implementing_a_readable_stream","title":"Implementing a Readable Stream","description":"The stream.Readable class is extended to implement a Readable stream. Custom Readable streams must call the new stream.Readable([options]) constructor and implement the readable._read() method."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_readable_read_size","title":"readable.\\_read(size)","description":"This function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal Readable class methods only. All Readable stream implementations must provide an implementation of the readable._read() method to fetch data from the underlying resource. When readable._read() is called, if data is available from the resource, the implementation should begin pushing that data into the read queue using the this.push(dataChunk) method. _read() should continue reading from the resource and pushing data until readable.push() returns false. Only when _read() is called again after it has stopped should it resume pushing additional data onto the queue. Once the readable._read() method has been called, it will not be called again until the readable.push() method is called. readable._read() is guaranteed to be called only once within a synchronous execution, i.e. a microtick. The size argument is advisory. For implementations where a \"read\" is a single operation that returns data can use the size argument to determine how much data to fetch. Other implementations may ignore this argument and simply provide data whenever it becomes available. There is no need to \"wait\" until size bytes are available before calling stream.push(chunk). The readable._read() method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_readable_destroy_err_callback","title":"readable.\\_destroy(err, callback)","description":"The _destroy() method is called by readable.destroy(). It can be overridden by child classes but it must not be called directly."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_readable_push_chunk_encoding","title":"readable.push(chunk[, encoding])","description":"When chunk is a Buffer, Uint8Array or string, the chunk of data will be added to the internal queue for users of the stream to consume. Passing chunk as null signals the end of the stream (EOF), after which no more data can be written. When the Readable is operating in paused mode, the data added with readable.push() can be read out by calling the readable.read() method when the &#39;readable&#39; event is emitted. When the Readable is operating in flowing mode, the data added with readable.push() will be delivered by emitting a &#39;data&#39; event. The readable.push() method is designed to be as flexible as possible. For example, when wrapping a lower-level source that provides some form of pause\/resume mechanism, and a data callback, the low-level source can be wrapped by the custom Readable instance as illustrated in the following example: \/\/ source is an object with readStop() and readStart() methods, \/\/ and an `ondata` member that gets called when it has data, and \/\/ an `onend` member that gets called when the data is over.  class SourceWrapper extends Readable {   constructor(options) {     super(options);      this._source = getLowlevelSourceObject();      \/\/ Every time there&#39;s data, push it into the internal buffer.     this._source.ondata = (chunk) => {       \/\/ if push() returns false, then stop reading from source       if (!this.push(chunk))         this._source.readStop();     };      \/\/ When the source ends, push the EOF-signaling `null` chunk     this._source.onend = () => {       this.push(null);     };   }   \/\/ _read will be called when the stream wants to pull more data in   \/\/ the advisory size argument is ignored in this case.   _read(size) {     this._source.readStart();   } }  The readable.push() method is intended be called only by Readable implementers, and only from within the readable._read() method. For streams not operating in object mode, if the chunk parameter of readable.push() is undefined, it will be treated as empty string or buffer. See readable.push(&#39;&#39;) for more information."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_errors_while_reading","title":"Errors While Reading","description":"It is recommended that errors occurring during the processing of the readable._read() method are emitted using the &#39;error&#39; event rather than being thrown. Throwing an Error from within readable._read() can result in unexpected and inconsistent behavior depending on whether the stream is operating in flowing or paused mode. Using the &#39;error&#39; event ensures consistent and predictable handling of errors.  const { Readable } = require(&#39;stream&#39;);  const myReadable = new Readable({   read(size) {     if (checkSomeErrorCondition()) {       process.nextTick(() => this.emit(&#39;error&#39;, err));       return;     }     \/\/ do some work   } });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_implementing_a_duplex_stream","title":"Implementing a Duplex Stream","description":"A Duplex stream is one that implements both Readable and Writable, such as a TCP socket connection. Because JavaScript does not have support for multiple inheritance, the stream.Duplex class is extended to implement a Duplex stream (as opposed to extending the stream.Readable and stream.Writable classes). The stream.Duplex class prototypically inherits from stream.Readable and parasitically from stream.Writable, but instanceof will work properly for both base classes due to overriding Symbol.hasInstance on stream.Writable. Custom Duplex streams must call the new stream.Duplex([options]) constructor and implement both the readable._read() and writable._write() methods."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_an_example_duplex_stream","title":"An Example Duplex Stream","description":"The following illustrates a simple example of a Duplex stream that wraps a hypothetical lower-level source object to which data can be written, and from which data can be read, albeit using an API that is not compatible with Node.js streams. The following illustrates a simple example of a Duplex stream that buffers incoming written data via the Writable interface that is read back out via the Readable interface. const { Duplex } = require(&#39;stream&#39;); const kSource = Symbol(&#39;source&#39;);  class MyDuplex extends Duplex {   constructor(source, options) {     super(options);     this[kSource] = source;   }    _write(chunk, encoding, callback) {     \/\/ The underlying source only deals with strings     if (Buffer.isBuffer(chunk))       chunk = chunk.toString();     this[kSource].writeSomeData(chunk);     callback();   }    _read(size) {     this[kSource].fetchSomeData(size, (data, encoding) => {       this.push(Buffer.from(data, encoding));     });   } }  The most important aspect of a Duplex stream is that the Readable and Writable sides operate independently of one another despite co-existing within a single object instance."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_object_mode_duplex_streams","title":"Object Mode Duplex Streams","description":"For Duplex streams, objectMode can be set exclusively for either the Readable or Writable side using the readableObjectMode and writableObjectMode options respectively. In the following example, for instance, a new Transform stream (which is a type of Duplex stream) is created that has an object mode Writable side that accepts JavaScript numbers that are converted to hexadecimal strings on the Readable side. const { Transform } = require(&#39;stream&#39;);  \/\/ All Transform streams are also Duplex Streams const myTransform = new Transform({   writableObjectMode: true,    transform(chunk, encoding, callback) {     \/\/ Coerce the chunk to a number if necessary     chunk |= 0;      \/\/ Transform the chunk into something else.     const data = chunk.toString(16);      \/\/ Push the data onto the readable queue.     callback(null, &#39;0&#39;.repeat(data.length % 2) + data);   } });  myTransform.setEncoding(&#39;ascii&#39;); myTransform.on(&#39;data&#39;, (chunk) => console.log(chunk));  myTransform.write(1); \/\/ Prints: 01 myTransform.write(10); \/\/ Prints: 0a myTransform.write(100); \/\/ Prints: 64"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_implementing_a_transform_stream","title":"Implementing a Transform Stream","description":"A Transform stream is a Duplex stream where the output is computed in some way from the input. Examples include zlib streams or crypto streams that compress, encrypt, or decrypt data. There is no requirement that the output be the same size as the input, the same number of chunks, or arrive at the same time. For example, a Hash stream will only ever have a single chunk of output which is provided when the input is ended. A zlib stream will produce output that is either much smaller or much larger than its input. The stream.Transform class is extended to implement a Transform stream. The stream.Transform class prototypically inherits from stream.Duplex and implements its own versions of the writable._write() and readable._read() methods. Custom Transform implementations must implement the transform._transform() method and may also implement the transform._flush() method. Care must be taken when using Transform streams in that data written to the stream can cause the Writable side of the stream to become paused if the output on the Readable side is not consumed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_transform_flush_callback","title":"transform.\\_flush(callback)","description":"This function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal Readable class methods only. In some cases, a transform operation may need to emit an additional bit of data at the end of the stream. For example, a zlib compression stream will store an amount of internal state used to optimally compress the output. When the stream ends, however, that additional data needs to be flushed so that the compressed data will be complete. Custom Transform implementations may implement the transform._flush() method. This will be called when there is no more written data to be consumed, but before the &#39;end&#39; event is emitted signaling the end of the Readable stream. Within the transform._flush() implementation, the readable.push() method may be called zero or more times, as appropriate. The callback function must be called when the flush operation is complete. The transform._flush() method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_transform_transform_chunk_encoding_callback","title":"transform.\\_transform(chunk, encoding, callback)","description":"This function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal Readable class methods only. All Transform stream implementations must provide a _transform() method to accept input and produce output. The transform._transform() implementation handles the bytes being written, computes an output, then passes that output off to the readable portion using the readable.push() method. The transform.push() method may be called zero or more times to generate output from a single input chunk, depending on how much is to be output as a result of the chunk. It is possible that no output is generated from any given chunk of input data. The callback function must be called only when the current chunk is completely consumed. The first argument passed to the callback must be an Error object if an error occurred while processing the input or null otherwise. If a second argument is passed to the callback, it will be forwarded on to the readable.push() method. In other words the following are equivalent: transform.prototype._transform = function(data, encoding, callback) {   this.push(data);   callback(); };  transform.prototype._transform = function(data, encoding, callback) {   callback(null, data); };  The transform._transform() method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs. transform._transform() is never called in parallel; streams implement a queue mechanism, and to receive the next chunk, callback must be called, either synchronously or asynchronously."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_events_finish_and_end","title":"Events: 'finish' and 'end'","description":"The &#39;finish&#39; and &#39;end&#39; events are from the stream.Writable and stream.Readable classes, respectively. The &#39;finish&#39; event is emitted after stream.end() is called and all chunks have been processed by stream._transform(). The &#39;end&#39; event is emitted after all data has been output, which occurs after the callback in transform._flush() has been called."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_additional_notes","title":"Additional Notes","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_compatibility_with_older_node_js_versions","title":"Compatibility with Older Node.js Versions","description":"In versions of Node.js prior to v0.10, the Readable stream interface was simpler, but also less powerful and less useful.  Rather than waiting for calls the stream.read() method, &#39;data&#39; events would begin emitting immediately. Applications that would need to perform some amount of work to decide how to handle data were required to store read data into buffers so the data would not be lost. The stream.pause() method was advisory, rather than guaranteed. This meant that it was still necessary to be prepared to receive &#39;data&#39; events even when the stream was in a paused state.  In Node.js v0.10, the Readable class was added. For backwards compatibility with older Node.js programs, Readable streams switch into \"flowing mode\" when a &#39;data&#39; event handler is added, or when the stream.resume() method is called. The effect is that, even when not using the new stream.read() method and &#39;readable&#39; event, it is no longer necessary to worry about losing &#39;data&#39; chunks. While most applications will continue to function normally, this introduces an edge case in the following conditions:  No &#39;data&#39; event listener is added. The stream.resume() method is never called. The stream is not piped to any writable destination.  For example, consider the following code: \/\/ WARNING!  BROKEN! net.createServer((socket) => {    \/\/ we add an &#39;end&#39; listener, but never consume the data   socket.on(&#39;end&#39;, () => {     \/\/ It will never get here.     socket.end(&#39;The message was received but was not processed.\\n&#39;);   });  }).listen(1337);  In versions of Node.js prior to v0.10, the incoming message data would be simply discarded. However, in Node.js v0.10 and beyond, the socket remains paused forever. The workaround in this situation is to call the stream.resume() method to begin the flow of data: \/\/ Workaround net.createServer((socket) => {   socket.on(&#39;end&#39;, () => {     socket.end(&#39;The message was received but was not processed.\\n&#39;);   });    \/\/ start the flow of data, discarding it.   socket.resume(); }).listen(1337);  In addition to new Readable streams switching into flowing mode, pre-v0.10 style streams can be wrapped in a Readable class using the readable.wrap() method."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_readable_read_0","title":"`readable.read(0)`","description":"There are some cases where it is necessary to trigger a refresh of the underlying readable stream mechanisms, without actually consuming any data. In such cases, it is possible to call readable.read(0), which will always return null. If the internal read buffer is below the highWaterMark, and the stream is not currently reading, then calling stream.read(0) will trigger a low-level stream._read() call. While most applications will almost never need to do this, there are situations within Node.js where this is done, particularly in the Readable stream class internals."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_readable_push","title":"`readable.push('')`","description":"Use of readable.push(&#39;&#39;) is not recommended. Pushing a zero-byte string, Buffer or Uint8Array to a stream that is not in object mode has an interesting side effect. Because it is a call to readable.push(), the call will end the reading process. However, because the argument is an empty string, no data is added to the readable buffer so there is nothing for a user to consume."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_highwatermark_discrepancy_after_calling_readable_setencoding","title":"`highWaterMark` discrepancy after calling `readable.setEncoding()`","description":"The use of readable.setEncoding() will change the behavior of how the highWaterMark operates in non-object mode. Typically, the size of the current buffer is measured against the highWaterMark in bytes. However, after setEncoding() is called, the comparison function will begin to measure the buffer&#39;s size in characters. This is not a problem in common cases with latin1 or ascii. But it is advised to be mindful about this behavior when working with strings that could contain multi-byte characters."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_organization_of_this_document","title":"Organization of this Document","description":"This document is divided into two primary sections with a third section for additional notes. The first section explains the elements of the stream API that are required to use streams within an application. The second section explains the elements of the API that are required to implement new types of streams."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_types_of_streams","title":"Types of Streams","description":"There are four fundamental stream types within Node.js:  Writable - streams to which data can be written (for example fs.createWriteStream()). Readable - streams from which data can be read (for example fs.createReadStream()). Duplex - streams that are both Readable and Writable (for example net.Socket). Transform - Duplex streams that can modify or transform the data as it is written and read (for example zlib.createDeflate()).  Additionally this module includes the utility functions pipeline and finished."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_buffering","title":"Buffering","description":"Both Writable and Readable streams will store data in an internal buffer that can be retrieved using writable.writableBuffer or readable.readableBuffer, respectively. The amount of data potentially buffered depends on the highWaterMark option passed into the streams constructor. For normal streams, the highWaterMark option specifies a total number of bytes. For streams operating in object mode, the highWaterMark specifies a total number of objects. Data is buffered in Readable streams when the implementation calls stream.push(chunk). If the consumer of the Stream does not call stream.read(), the data will sit in the internal queue until it is consumed. Once the total size of the internal read buffer reaches the threshold specified by highWaterMark, the stream will temporarily stop reading data from the underlying resource until the data currently buffered can be consumed (that is, the stream will stop calling the internal readable._read() method that is used to fill the read buffer). Data is buffered in Writable streams when the writable.write(chunk) method is called repeatedly. While the total size of the internal write buffer is below the threshold set by highWaterMark, calls to writable.write() will return true. Once the size of the internal buffer reaches or exceeds the highWaterMark, false will be returned. A key goal of the stream API, particularly the stream.pipe() method, is to limit the buffering of data to acceptable levels such that sources and destinations of differing speeds will not overwhelm the available memory. Because Duplex and Transform streams are both Readable and Writable, each maintain two separate internal buffers used for reading and writing, allowing each side to operate independently of the other while maintaining an appropriate and efficient flow of data. For example, net.Socket instances are Duplex streams whose Readable side allows consumption of data received from the socket and whose Writable side allows writing data to the socket. Because data may be written to the socket at a faster or slower rate than data is received, it is important for each side to operate (and buffer) independently of the other."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_object_mode","title":"Object Mode","description":"All streams created by Node.js APIs operate exclusively on strings and Buffer (or Uint8Array) objects. It is possible, however, for stream implementations to work with other types of JavaScript values (with the exception of null, which serves a special purpose within streams). Such streams are considered to operate in \"object mode\". Stream instances are switched into object mode using the objectMode option when the stream is created. Attempting to switch an existing stream into object mode is not safe."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_string_decoder","title":"String Decoder","description":"The string_decoder module provides an API for decoding Buffer objects into strings in a manner that preserves encoded multi-byte UTF-8 and UTF-16 characters. It can be accessed using: const { StringDecoder } = require(&#39;string_decoder&#39;);  The following example shows the basic use of the StringDecoder class. const { StringDecoder } = require(&#39;string_decoder&#39;); const decoder = new StringDecoder(&#39;utf8&#39;);  const cent = Buffer.from([0xC2, 0xA2]); console.log(decoder.write(cent));  const euro = Buffer.from([0xE2, 0x82, 0xAC]); console.log(decoder.write(euro));  When a Buffer instance is written to the StringDecoder instance, an internal buffer is used to ensure that the decoded string does not contain any incomplete multibyte characters. These are held in the buffer until the next call to stringDecoder.write() or until stringDecoder.end() is called. In the following example, the three UTF-8 encoded bytes of the European Euro symbol (\u20ac) are written over three separate operations: const { StringDecoder } = require(&#39;string_decoder&#39;); const decoder = new StringDecoder(&#39;utf8&#39;);  decoder.write(Buffer.from([0xE2])); decoder.write(Buffer.from([0x82])); console.log(decoder.end(Buffer.from([0xAC])));"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_timers","title":"Timers","description":"The timer module exposes a global API for scheduling functions to be called at some future period of time. Because the timer functions are globals, there is no need to call require(&#39;timers&#39;) to use the API. The timer functions within Node.js implement a similar API as the timers API provided by Web Browsers but use a different internal implementation that is built around the Node.js Event Loop."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_scheduling_timers","title":"Scheduling Timers","description":"A timer in Node.js is an internal construct that calls a given function after a certain period of time. When a timer&#39;s function is called varies depending on which method was used to create the timer and what other work the Node.js event loop is doing."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_setimmediate_callback_args","title":"setImmediate(callback[, ...args])","description":"Schedules the \"immediate\" execution of the callback after I\/O events&#39; callbacks. When multiple calls to setImmediate() are made, the callback functions are queued for execution in the order in which they are created. The entire callback queue is processed every event loop iteration. If an immediate timer is queued from inside an executing callback, that timer will not be triggered until the next event loop iteration. If callback is not a function, a TypeError will be thrown. This method has a custom variant for promises that is available using util.promisify(): const util = require(&#39;util&#39;); const setImmediatePromise = util.promisify(setImmediate);  setImmediatePromise(&#39;foobar&#39;).then((value) => {   \/\/ value === &#39;foobar&#39; (passing values is optional)   \/\/ This is executed after all I\/O callbacks. });  \/\/ or with async function async function timerExample() {   console.log(&#39;Before I\/O callbacks&#39;);   await setImmediatePromise();   console.log(&#39;After I\/O callbacks&#39;); } timerExample();"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_setinterval_callback_delay_args","title":"setInterval(callback, delay[, ...args])","description":"Schedules repeated execution of callback every delay milliseconds. When delay is larger than 2147483647 or less than 1, the delay will be set to 1. If callback is not a function, a TypeError will be thrown."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_settimeout_callback_delay_args","title":"setTimeout(callback, delay[, ...args])","description":"Schedules execution of a one-time callback after delay milliseconds. The callback will likely not be invoked in precisely delay milliseconds. Node.js makes no guarantees about the exact timing of when callbacks will fire, nor of their ordering. The callback will be called as close as possible to the time specified. When delay is larger than 2147483647 or less than 1, the delay will be set to 1. If callback is not a function, a TypeError will be thrown. This method has a custom variant for promises that is available using util.promisify(): const util = require(&#39;util&#39;); const setTimeoutPromise = util.promisify(setTimeout);  setTimeoutPromise(40, &#39;foobar&#39;).then((value) => {   \/\/ value === &#39;foobar&#39; (passing values is optional)   \/\/ This is executed after about 40 milliseconds. });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_cancelling_timers","title":"Cancelling Timers","description":"The setImmediate(), setInterval(), and setTimeout() methods each return objects that represent the scheduled timers. These can be used to cancel the timer and prevent it from triggering. It is not possible to cancel timers that were created using the promisified variants of setImmediate(), setTimeout()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_clearimmediate_immediate","title":"clearImmediate(immediate)","description":"Cancels an Immediate object created by setImmediate()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_clearinterval_timeout","title":"clearInterval(timeout)","description":"Cancels a Timeout object created by setInterval()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_cleartimeout_timeout","title":"clearTimeout(timeout)","description":"Cancels a Timeout object created by setTimeout()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tls_ssl","title":"TLS (SSL)","description":"The tls module provides an implementation of the Transport Layer Security (TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL. The module can be accessed using: const tls = require(&#39;tls&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tls_checkserveridentity_hostname_cert","title":"tls.checkServerIdentity(hostname, cert)","description":"Verifies the certificate cert is issued to hostname. Returns {Error} object, populating it with the reason, host, and cert on failure. On success, returns {undefined}. This function can be overwritten by providing alternative function as part of the options.checkServerIdentity option passed to tls.connect(). The overwriting function can call tls.checkServerIdentity() of course, to augment the checks done with additional verification. This function is only called if the certificate passed all other checks, such as being issued by trusted CA (options.ca). The cert object contains the parsed certificate and will have a structure similar to: { subject:    { OU: [ &#39;Domain Control Validated&#39;, &#39;PositiveSSL Wildcard&#39; ],      CN: &#39;*.nodejs.org&#39; },   issuer:    { C: &#39;GB&#39;,      ST: &#39;Greater Manchester&#39;,      L: &#39;Salford&#39;,      O: &#39;COMODO CA Limited&#39;,      CN: &#39;COMODO RSA Domain Validation Secure Server CA&#39; },   subjectaltname: &#39;DNS:*.nodejs.org, DNS:nodejs.org&#39;,   infoAccess:    { &#39;CA Issuers - URI&#39;:       [ &#39;http:\/\/crt.comodoca.com\/COMODORSADomainValidationSecureServerCA.crt&#39; ],      &#39;OCSP - URI&#39;: [ &#39;http:\/\/ocsp.comodoca.com&#39; ] },   modulus: &#39;B56CE45CB740B09A13F64AC543B712FF9EE8E4C284B542A1708A27E82A8D151CA178153E12E6DDA15BF70FFD96CB8A88618641BDFCCA03527E665B70D779C8A349A6F88FD4EF6557180BD4C98192872BCFE3AF56E863C09DDD8BC1EC58DF9D94F914F0369102B2870BECFA1348A0838C9C49BD1C20124B442477572347047506B1FCD658A80D0C44BCC16BC5C5496CFE6E4A8428EF654CD3D8972BF6E5BFAD59C93006830B5EB1056BBB38B53D1464FA6E02BFDF2FF66CD949486F0775EC43034EC2602AEFBF1703AD221DAA2A88353C3B6A688EFE8387811F645CEED7B3FE46E1F8B9F59FAD028F349B9BC14211D5830994D055EEA3D547911E07A0ADDEB8A82B9188E58720D95CD478EEC9AF1F17BE8141BE80906F1A339445A7EB5B285F68039B0F294598A7D1C0005FC22B5271B0752F58CCDEF8C8FD856FB7AE21C80B8A2CE983AE94046E53EDE4CB89F42502D31B5360771C01C80155918637490550E3F555E2EE75CC8C636DDE3633CFEDD62E91BF0F7688273694EEEBA20C2FC9F14A2A435517BC1D7373922463409AB603295CEB0BB53787A334C9CA3CA8B30005C5A62FC0715083462E00719A8FA3ED0A9828C3871360A73F8B04A4FC1E71302844E9BB9940B77E745C9D91F226D71AFCAD4B113AAF68D92B24DDB4A2136B55A1CD1ADF39605B63CB639038ED0F4C987689866743A68769CC55847E4A06D6E2E3F1&#39;,   exponent: &#39;0x10001&#39;,   pubkey: <Buffer ... >,   valid_from: &#39;Aug 14 00:00:00 2017 GMT&#39;,   valid_to: &#39;Nov 20 23:59:59 2019 GMT&#39;,   fingerprint: &#39;01:02:59:D9:C3:D2:0D:08:F7:82:4E:44:A4:B4:53:C5:E2:3A:87:4D&#39;,   fingerprint256: &#39;69:AE:1A:6A:D4:3D:C6:C1:1B:EA:C6:23:DE:BA:2A:14:62:62:93:5C:7A:EA:06:41:9B:0B:BC:87:CE:48:4E:02&#39;,   ext_key_usage: [ &#39;1.3.6.1.5.5.7.3.1&#39;, &#39;1.3.6.1.5.5.7.3.2&#39; ],   serialNumber: &#39;66593D57F20CBC573E433381B5FEC280&#39;,   raw: <Buffer ... > }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tls_connect_options_callback","title":"tls.connect(options[, callback])","description":"The callback function, if specified, will be added as a listener for the &#39;secureConnect&#39; event. tls.connect() returns a tls.TLSSocket object. The following implements a simple \"echo server\" example: const tls = require(&#39;tls&#39;); const fs = require(&#39;fs&#39;);  const options = {   \/\/ Necessary only if using the client certificate authentication   key: fs.readFileSync(&#39;client-key.pem&#39;),   cert: fs.readFileSync(&#39;client-cert.pem&#39;),    \/\/ Necessary only if the server uses the self-signed certificate   ca: [ fs.readFileSync(&#39;server-cert.pem&#39;) ] };  const socket = tls.connect(8000, options, () => {   console.log(&#39;client connected&#39;,               socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);   process.stdin.pipe(socket);   process.stdin.resume(); }); socket.setEncoding(&#39;utf8&#39;); socket.on(&#39;data&#39;, (data) => {   console.log(data); }); socket.on(&#39;end&#39;, () => {   server.close(); });  Or const tls = require(&#39;tls&#39;); const fs = require(&#39;fs&#39;);  const options = {   pfx: fs.readFileSync(&#39;client.pfx&#39;) };  const socket = tls.connect(8000, options, () => {   console.log(&#39;client connected&#39;,               socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);   process.stdin.pipe(socket);   process.stdin.resume(); }); socket.setEncoding(&#39;utf8&#39;); socket.on(&#39;data&#39;, (data) => {   console.log(data); }); socket.on(&#39;end&#39;, () => {   server.close(); });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tls_connect_path_options_callback","title":"tls.connect(path[, options][, callback])","description":"Same as tls.connect() except that path can be provided as an argument instead of an option. A path option, if specified, will take precedence over the path argument."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tls_connect_port_host_options_callback","title":"tls.connect(port[, host][, options][, callback])","description":"Same as tls.connect() except that port and host can be provided as arguments instead of options. A port or host option, if specified, will take precedence over any port or host argument."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tls_createsecurecontext_options","title":"tls.createSecureContext(options)","description":"tls.createServer() sets the default value of the honorCipherOrder option to true, other APIs that create secure contexts leave it unset. tls.createServer() uses a 128 bit truncated SHA1 hash value generated from process.argv as the default value of the sessionIdContext option, other APIs that create secure contexts have no default value. The tls.createSecureContext() method creates a credentials object. A key is required for ciphers that make use of certificates. Either key or pfx can be used to provide it. If the &#39;ca&#39; option is not given, then Node.js will use the default publicly trusted list of CAs as given in https:\/\/hg.mozilla.org\/mozilla-central\/raw-file\/tip\/security\/nss\/lib\/ckfw\/builtins\/certdata.txt."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tls_createserver_options_secureconnectionlistener","title":"tls.createServer([options][, secureConnectionListener])","description":"Creates a new tls.Server. The secureConnectionListener, if provided, is automatically set as a listener for the &#39;secureConnection&#39; event. The ticketKeys options is automatically shared between cluster module workers. The following illustrates a simple echo server: const tls = require(&#39;tls&#39;); const fs = require(&#39;fs&#39;);  const options = {   key: fs.readFileSync(&#39;server-key.pem&#39;),   cert: fs.readFileSync(&#39;server-cert.pem&#39;),    \/\/ This is necessary only if using the client certificate authentication.   requestCert: true,    \/\/ This is necessary only if the client uses the self-signed certificate.   ca: [ fs.readFileSync(&#39;client-cert.pem&#39;) ] };  const server = tls.createServer(options, (socket) => {   console.log(&#39;server connected&#39;,               socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);   socket.write(&#39;welcome!\\n&#39;);   socket.setEncoding(&#39;utf8&#39;);   socket.pipe(socket); }); server.listen(8000, () => {   console.log(&#39;server bound&#39;); });  Or const tls = require(&#39;tls&#39;); const fs = require(&#39;fs&#39;);  const options = {   pfx: fs.readFileSync(&#39;server.pfx&#39;),    \/\/ This is necessary only if using the client certificate authentication.   requestCert: true, };  const server = tls.createServer(options, (socket) => {   console.log(&#39;server connected&#39;,               socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);   socket.write(&#39;welcome!\\n&#39;);   socket.setEncoding(&#39;utf8&#39;);   socket.pipe(socket); }); server.listen(8000, () => {   console.log(&#39;server bound&#39;); });  This server can be tested by connecting to it using openssl s_client: openssl s_client -connect 127.0.0.1:8000"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tls_getciphers","title":"tls.getCiphers()","description":"Returns an array with the names of the supported SSL ciphers. For example: console.log(tls.getCiphers()); \/\/ [&#39;AES128-SHA&#39;, &#39;AES256-SHA&#39;, ...]"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tls_ssl_concepts","title":"TLS\/SSL Concepts","description":"The TLS\/SSL is a public\/private key infrastructure (PKI). For most common cases, each client and server must have a private key. Private keys can be generated in multiple ways. The example below illustrates use of the OpenSSL command-line interface to generate a 2048-bit RSA private key: openssl genrsa -out ryans-key.pem 2048  With TLS\/SSL, all servers (and some clients) must have a certificate. Certificates are public keys that correspond to a private key, and that are digitally signed either by a Certificate Authority or by the owner of the private key (such certificates are referred to as \"self-signed\"). The first step to obtaining a certificate is to create a Certificate Signing Request (CSR) file. The OpenSSL command-line interface can be used to generate a CSR for a private key: openssl req -new -sha256 -key ryans-key.pem -out ryans-csr.pem  Once the CSR file is generated, it can either be sent to a Certificate Authority for signing or used to generate a self-signed certificate. Creating a self-signed certificate using the OpenSSL command-line interface is illustrated in the example below: openssl x509 -req -in ryans-csr.pem -signkey ryans-key.pem -out ryans-cert.pem  Once the certificate is generated, it can be used to generate a .pfx or .p12 file: openssl pkcs12 -export -in ryans-cert.pem -inkey ryans-key.pem \\       -certfile ca-cert.pem -out ryans.pfx  Where:  in: is the signed certificate inkey: is the associated private key certfile: is a concatenation of all Certificate Authority (CA) certs into  a single file, e.g. cat ca1-cert.pem ca2-cert.pem > ca-cert.pem"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_perfect_forward_secrecy","title":"Perfect Forward Secrecy","description":"The term \"Forward Secrecy\" or \"Perfect Forward Secrecy\" describes a feature of key-agreement (i.e., key-exchange) methods. That is, the server and client keys are used to negotiate new temporary keys that are used specifically and only for the current communication session. Practically, this means that even if the server&#39;s private key is compromised, communication can only be decrypted by eavesdroppers if the attacker manages to obtain the key-pair specifically generated for the session. Perfect Forward Secrecy is achieved by randomly generating a key pair for key-agreement on every TLS\/SSL handshake (in contrast to using the same key for all sessions). Methods implementing this technique are called \"ephemeral\". Currently two methods are commonly used to achieve Perfect Forward Secrecy (note the character \"E\" appended to the traditional abbreviations):  DHE - An ephemeral version of the Diffie Hellman key-agreement protocol. ECDHE - An ephemeral version of the Elliptic Curve Diffie Hellman key-agreement protocol.  Ephemeral methods may have some performance drawbacks, because key generation is expensive. To use Perfect Forward Secrecy using DHE with the tls module, it is required to generate Diffie-Hellman parameters and specify them with the dhparam option to tls.createSecureContext(). The following illustrates the use of the OpenSSL command-line interface to generate such parameters: openssl dhparam -outform PEM -out dhparam.pem 2048  If using Perfect Forward Secrecy using ECDHE, Diffie-Hellman parameters are not required and a default ECDHE curve will be used. The ecdhCurve property can be used when creating a TLS Server to specify the list of names of supported curves to use, see tls.createServer() for more info."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_alpn_and_sni","title":"ALPN and SNI","description":"ALPN (Application-Layer Protocol Negotiation Extension) and SNI (Server Name Indication) are TLS handshake extensions:  ALPN - Allows the use of one TLS server for multiple protocols (HTTP, HTTP\/2) SNI - Allows the use of one TLS server for multiple hostnames with different SSL certificates."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_client_initiated_renegotiation_attack_mitigation","title":"Client-initiated renegotiation attack mitigation","description":"The TLS protocol allows clients to renegotiate certain aspects of the TLS session. Unfortunately, session renegotiation requires a disproportionate amount of server-side resources, making it a potential vector for denial-of-service attacks. To mitigate the risk, renegotiation is limited to three times every ten minutes. An &#39;error&#39; event is emitted on the tls.TLSSocket instance when this threshold is exceeded. The limits are configurable:  tls.CLIENT_RENEG_LIMIT {number} Specifies the number of renegotiation requests. Default: 3. tls.CLIENT_RENEG_WINDOW {number} Specifies the time renegotiation window in seconds. Default: 600 (10 minutes).  The default renegotiation limits should not be modified without a full understanding of the implications and risks. To test the renegotiation limits on a server, connect to it using the OpenSSL command-line client (openssl s_client -connect address:port) then input R<CR> (i.e., the letter R followed by a carriage return) multiple times."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_modifying_the_default_tls_cipher_suite","title":"Modifying the Default TLS Cipher suite","description":"Node.js is built with a default suite of enabled and disabled TLS ciphers. Currently, the default cipher suite is: ECDHE-RSA-AES128-GCM-SHA256: ECDHE-ECDSA-AES128-GCM-SHA256: ECDHE-RSA-AES256-GCM-SHA384: ECDHE-ECDSA-AES256-GCM-SHA384: DHE-RSA-AES128-GCM-SHA256: ECDHE-RSA-AES128-SHA256: DHE-RSA-AES128-SHA256: ECDHE-RSA-AES256-SHA384: DHE-RSA-AES256-SHA384: ECDHE-RSA-AES256-SHA256: DHE-RSA-AES256-SHA256: HIGH: !aNULL: !eNULL: !EXPORT: !DES: !RC4: !MD5: !PSK: !SRP: !CAMELLIA  This default can be replaced entirely using the --tls-cipher-list command line switch. For instance, the following makes ECDHE-RSA-AES128-GCM-SHA256:!RC4 the default TLS cipher suite: node --tls-cipher-list=\"ECDHE-RSA-AES128-GCM-SHA256:!RC4\"  The default can also be replaced on a per client or server basis using the ciphers option from tls.createSecureContext(), which is also available in tls.createServer(), tls.connect(), and when creating new tls.TLSSockets. Consult OpenSSL cipher list format documentation for details on the format. The default cipher suite included within Node.js has been carefully selected to reflect current security best practices and risk mitigation. Changing the default cipher suite can have a significant impact on the security of an application. The --tls-cipher-list switch and ciphers option should by used only if absolutely necessary. The default cipher suite prefers GCM ciphers for Chrome&#39;s &#39;modern cryptography&#39; setting and also prefers ECDHE and DHE ciphers for Perfect Forward Secrecy, while offering some backward compatibility. 128 bit AES is preferred over 192 and 256 bit AES in light of specific attacks affecting larger AES key sizes. Old clients that rely on insecure and deprecated RC4 or DES-based ciphers (like Internet Explorer 6) cannot complete the handshaking process with the default configuration. If these clients must be supported, the TLS recommendations may offer a compatible cipher suite. For more details on the format, see the OpenSSL cipher list format documentation."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_deprecated_apis","title":"Deprecated APIs","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tls_createsecurepair_context_isserver_requestcert_rejectunauthorized_options","title":"tls.createSecurePair([context][, isServer][, requestCert][, rejectUnauthorized][, options])","description":"Creates a new secure pair object with two streams, one of which reads and writes the encrypted data and the other of which reads and writes the cleartext data. Generally, the encrypted stream is piped to\/from an incoming encrypted data stream and the cleartext one is used as a replacement for the initial encrypted stream. tls.createSecurePair() returns a tls.SecurePair object with cleartext and encrypted stream properties. Using cleartext has the same API as tls.TLSSocket. The tls.createSecurePair() method is now deprecated in favor of tls.TLSSocket(). For example, the code: pair = tls.createSecurePair(\/* ... *\/); pair.encrypted.pipe(socket); socket.pipe(pair.encrypted);  can be replaced by: secureSocket = tls.TLSSocket(socket, options);  where secureSocket has the same API as pair.cleartext."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_trace_events","title":"Trace Events","description":"Trace Event provides a mechanism to centralize tracing information generated by V8, Node.js core, and userspace code. Tracing can be enabled with the --trace-event-categories command-line flag or by using the trace_events module. The --trace-event-categories flag accepts a list of comma-separated category names. The available categories are:  node - An empty placeholder. node.async_hooks - Enables capture of detailed async_hooks trace data. The async_hooks events have a unique asyncId and a special triggerId triggerAsyncId property. node.bootstrap - Enables capture of Node.js bootstrap milestones. node.perf - Enables capture of Performance API measurements. node.perf.usertiming - Enables capture of only Performance API User Timing measures and marks. node.perf.timerify - Enables capture of only Performance API timerify measurements.   node.fs.sync - Enables capture of trace data for file system sync methods. node.vm.script - Enables capture of trace data for the vm module&#39;s runInNewContext(), runInContext(), and runInThisContext() methods. v8 - The V8 events are GC, compiling, and execution related.  By default the node, node.async_hooks, and v8 categories are enabled. node --trace-event-categories v8,node,node.async_hooks server.js  Prior versions of Node.js required the use of the --trace-events-enabled flag to enable trace events. This requirement has been removed. However, the --trace-events-enabled flag may still be used and will enable the node, node.async_hooks, and v8 trace event categories by default. node --trace-events-enabled  \/\/ is equivalent to  node --trace-event-categories v8,node,node.async_hooks  Alternatively, trace events may be enabled using the trace_events module: const trace_events = require(&#39;trace_events&#39;); const tracing = trace_events.createTracing({ categories: [&#39;node.perf&#39;] }); tracing.enable();  \/\/ Enable trace event capture for the &#39;node.perf&#39; category  \/\/ do work  tracing.disable();  \/\/ Disable trace event capture for the &#39;node.perf&#39; category  Running Node.js with tracing enabled will produce log files that can be opened in the chrome:\/\/tracing tab of Chrome. The logging file is by default called node_trace.${rotation}.log, where ${rotation} is an incrementing log-rotation id. The filepath pattern can be specified with --trace-event-file-pattern that accepts a template string that supports ${rotation} and ${pid}. For example: node --trace-event-categories v8 --trace-event-file-pattern &#39;${pid}-${rotation}.log&#39; server.js  Starting with Node.js 10.0.0, the tracing system uses the same time source as the one used by process.hrtime() however the trace-event timestamps are expressed in microseconds, unlike process.hrtime() which returns nanoseconds."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_the_trace_events_module","title":"The `trace_events` module","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tracing_object","title":"`Tracing` object","description":"The Tracing object is used to enable or disable tracing for sets of categories. Instances are created using the trace_events.createTracing() method. When created, the Tracing object is disabled. Calling the tracing.enable() method adds the categories to the set of enabled trace event categories. Calling tracing.disable() will remove the categories from the set of enabled trace event categories."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tracing_categories","title":"`tracing.categories`","description":"{string}  A comma-separated list of the trace event categories covered by this Tracing object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tracing_disable","title":"`tracing.disable()`","description":"Disables this Tracing object. Only trace event categories not covered by other enabled Tracing objects and not specified by the --trace-event-categories flag will be disabled. const trace_events = require(&#39;trace_events&#39;); const t1 = trace_events.createTracing({ categories: [&#39;node&#39;, &#39;v8&#39;] }); const t2 = trace_events.createTracing({ categories: [&#39;node.perf&#39;, &#39;node&#39;] }); t1.enable(); t2.enable();  \/\/ Prints &#39;node,node.perf,v8&#39; console.log(trace_events.getEnabledCategories());  t2.disable(); \/\/ will only disable emission of the &#39;node.perf&#39; category  \/\/ Prints &#39;node,v8&#39; console.log(trace_events.getEnabledCategories());"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tracing_enable","title":"`tracing.enable()`","description":"Enables this Tracing object for the set of categories covered by the Tracing object."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tracing_enabled","title":"`tracing.enabled`","description":"{boolean} true only if the Tracing object has been enabled."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_trace_events_createtracing_options","title":"`trace_events.createTracing(options)`","description":"options {Object} categories {string[]} An array of trace category names. Values included in the array are coerced to a string when possible. An error will be thrown if the value cannot be coerced.   Returns: {Tracing}.  Creates and returns a Tracing object for the given set of categories. const trace_events = require(&#39;trace_events&#39;); const categories = [&#39;node.perf&#39;, &#39;node.async_hooks&#39;]; const tracing = trace_events.createTracing({ categories }); tracing.enable(); \/\/ do stuff tracing.disable();"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_trace_events_getenabledcategories","title":"`trace_events.getEnabledCategories()`","description":"Returns: {string}  Returns a comma-separated list of all currently-enabled trace event categories. The current set of enabled trace event categories is determined by the union of all currently-enabled Tracing objects and any categories enabled using the --trace-event-categories flag. Given the file test.js below, the command node --trace-event-categories node.perf test.js will print &#39;node.async_hooks,node.perf&#39; to the console. const trace_events = require(&#39;trace_events&#39;); const t1 = trace_events.createTracing({ categories: [&#39;node.async_hooks&#39;] }); const t2 = trace_events.createTracing({ categories: [&#39;node.perf&#39;] }); const t3 = trace_events.createTracing({ categories: [&#39;v8&#39;] });  t1.enable(); t2.enable();  console.log(trace_events.getEnabledCategories());"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tty","title":"TTY","description":"The tty module provides the tty.ReadStream and tty.WriteStream classes. In most cases, it will not be necessary or possible to use this module directly. However, it can be accessed using: const tty = require(&#39;tty&#39;);  When Node.js detects that it is being run with a text terminal (\"TTY\") attached, process.stdin will, by default, be initialized as an instance of tty.ReadStream and both process.stdout and process.stderr will, by default be instances of tty.WriteStream. The preferred method of determining whether Node.js is being run within a TTY context is to check that the value of the process.stdout.isTTY property is true: $ node -p -e \"Boolean(process.stdout.isTTY)\" true $ node -p -e \"Boolean(process.stdout.isTTY)\" | cat false  In most cases, there should be little to no reason for an application to manually create instances of the tty.ReadStream and tty.WriteStream classes."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_tty_isatty_fd","title":"tty.isatty(fd)","description":"The tty.isatty() method returns true if the given fd is associated with a TTY and false if it is not, including whenever fd is not a non-negative integer."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_udp_datagram_sockets","title":"UDP\/Datagram Sockets","description":"The dgram module provides an implementation of UDP Datagram sockets. const dgram = require(&#39;dgram&#39;); const server = dgram.createSocket(&#39;udp4&#39;);  server.on(&#39;error&#39;, (err) => {   console.log(`server error:\\n${err.stack}`);   server.close(); });  server.on(&#39;message&#39;, (msg, rinfo) => {   console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`); });  server.on(&#39;listening&#39;, () => {   const address = server.address();   console.log(`server listening ${address.address}:${address.port}`); });  server.bind(41234); \/\/ server listening 0.0.0.0:41234"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dgram_module_functions","title":"`dgram` module functions","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dgram_createsocket_options_callback","title":"dgram.createSocket(options[, callback])","description":"Creates a dgram.Socket object. Once the socket is created, calling socket.bind() will instruct the socket to begin listening for datagram messages. When address and port are not passed to socket.bind() the method will bind the socket to the \"all interfaces\" address on a random port (it does the right thing for both udp4 and udp6 sockets). The bound address and port can be retrieved using socket.address().address and socket.address().port."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_dgram_createsocket_type_callback","title":"dgram.createSocket(type[, callback])","description":"Creates a dgram.Socket object of the specified type. The type argument can be either &#39;udp4&#39; or &#39;udp6&#39;. An optional callback function can be passed which is added as a listener for &#39;message&#39; events. Once the socket is created, calling socket.bind() will instruct the socket to begin listening for datagram messages. When address and port are not passed to socket.bind() the method will bind the socket to the \"all interfaces\" address on a random port (it does the right thing for both udp4 and udp6 sockets). The bound address and port can be retrieved using socket.address().address and socket.address().port."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_url","title":"URL","description":"The url module provides utilities for URL resolution and parsing. It can be accessed using: const url = require(&#39;url&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_url_strings_and_url_objects","title":"URL Strings and URL Objects","description":"A URL string is a structured string containing multiple meaningful components. When parsed, a URL object is returned containing properties for each of these components. The url module provides two APIs for working with URLs: a legacy API that is Node.js specific, and a newer API that implements the same WHATWG URL Standard used by web browsers. While the Legacy API has not been deprecated, it is maintained solely for backwards compatibility with existing applications. New application code should use the WHATWG API. A comparison between the WHATWG and Legacy APIs is provided below. Above the URL &#39;http:\/\/user:pass@sub.host.com:8080\/p\/a\/t\/h?query=string#hash&#39;, properties of an object returned by the legacy url.parse() are shown. Below it are properties of a WHATWG URL object. WHATWG URL&#39;s origin property includes protocol and host, but not username or password. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502                                            href                                             \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 protocol \u2502  \u2502        auth         \u2502        host         \u2502           path            \u2502 hash  \u2502 \u2502          \u2502  \u2502                     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524       \u2502 \u2502          \u2502  \u2502                     \u2502   hostname   \u2502 port \u2502 pathname \u2502     search     \u2502       \u2502 \u2502          \u2502  \u2502                     \u2502              \u2502      \u2502          \u251c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524       \u2502 \u2502          \u2502  \u2502                     \u2502              \u2502      \u2502          \u2502 \u2502    query     \u2502       \u2502 \"  https:   \/\/    user   :   pass   @ sub.host.com : 8080   \/p\/a\/t\/h  ?  query=string   #hash \" \u2502          \u2502  \u2502          \u2502          \u2502   hostname   \u2502 port \u2502          \u2502                \u2502       \u2502 \u2502          \u2502  \u2502          \u2502          \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u2502                \u2502       \u2502 \u2502 protocol \u2502  \u2502 username \u2502 password \u2502        host         \u2502          \u2502                \u2502       \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u2502                \u2502       \u2502 \u2502   origin    \u2502                     \u2502       origin        \u2502 pathname \u2502     search     \u2502 hash  \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502                                            href                                             \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 (all spaces in the \"\" line should be ignored \u2014 they are purely for formatting)  Parsing the URL string using the WHATWG API: const myURL =   new URL(&#39;https:\/\/user:pass@sub.host.com:8080\/p\/a\/t\/h?query=string#hash&#39;);  Parsing the URL string using the Legacy API: const url = require(&#39;url&#39;); const myURL =   url.parse(&#39;https:\/\/user:pass@sub.host.com:8080\/p\/a\/t\/h?query=string#hash&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_the_whatwg_url_api","title":"The WHATWG URL API","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_url_domaintoascii_domain","title":"url.domainToASCII(domain)","description":"Returns the Punycode ASCII serialization of the domain. If domain is an invalid domain, the empty string is returned. It performs the inverse operation to url.domainToUnicode(). const url = require(&#39;url&#39;); console.log(url.domainToASCII(&#39;espa\u00f1ol.com&#39;)); \/\/ Prints xn--espaol-zwa.com console.log(url.domainToASCII(&#39;\u4e2d\u6587.com&#39;)); \/\/ Prints xn--fiq228c.com console.log(url.domainToASCII(&#39;xn--i\u00f1valid.com&#39;)); \/\/ Prints an empty string"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_url_domaintounicode_domain","title":"url.domainToUnicode(domain)","description":"Returns the Unicode serialization of the domain. If domain is an invalid domain, the empty string is returned. It performs the inverse operation to url.domainToASCII(). const url = require(&#39;url&#39;); console.log(url.domainToUnicode(&#39;xn--espaol-zwa.com&#39;)); \/\/ Prints espa\u00f1ol.com console.log(url.domainToUnicode(&#39;xn--fiq228c.com&#39;)); \/\/ Prints \u4e2d\u6587.com console.log(url.domainToUnicode(&#39;xn--i\u00f1valid.com&#39;)); \/\/ Prints an empty string"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_url_format_url_options","title":"url.format(URL[, options])","description":"Returns a customizable serialization of a URL String representation of a WHATWG URL object. The URL object has both a toString() method and href property that return string serializations of the URL. These are not, however, customizable in any way. The url.format(URL[, options]) method allows for basic customization of the output. For example: const myURL = new URL(&#39;https:\/\/a:b@\u4f60\u597d\u4f60\u597d?abc#foo&#39;);  console.log(myURL.href); \/\/ Prints https:\/\/a:b@xn--6qqa088eba\/?abc#foo  console.log(myURL.toString()); \/\/ Prints https:\/\/a:b@xn--6qqa088eba\/?abc#foo  console.log(url.format(myURL, { fragment: false, unicode: true, auth: false })); \/\/ Prints &#39;https:\/\/\u4f60\u597d\u4f60\u597d\/?abc&#39;"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_legacy_url_api","title":"Legacy URL API","description":""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_url_format_urlobject","title":"url.format(urlObject)","description":"The url.format() method returns a formatted URL string derived from urlObject. url.format({   protocol: &#39;https&#39;,   hostname: &#39;example.com&#39;,   pathname: &#39;\/some\/path&#39;,   query: {     page: 1,     format: &#39;json&#39;   } });  \/\/ => &#39;https:\/\/example.com\/some\/path?page=1&format=json&#39;  If urlObject is not an object or a string, url.format() will throw a TypeError. The formatting process operates as follows:  A new empty string result is created. If urlObject.protocol is a string, it is appended as-is to result. Otherwise, if urlObject.protocol is not undefined and is not a string, an Error is thrown. For all string values of urlObject.protocol that do not end with an ASCII colon (:) character, the literal string : will be appended to result. If either of the following conditions is true, then the literal string \/\/ will be appended to result: urlObject.slashes property is true; urlObject.protocol begins with http, https, ftp, gopher, or file;   If the value of the urlObject.auth property is truthy, and either urlObject.host or urlObject.hostname are not undefined, the value of urlObject.auth will be coerced into a string and appended to result  followed by the literal string @. If the urlObject.host property is undefined then: If the urlObject.hostname is a string, it is appended to result. Otherwise, if urlObject.hostname is not undefined and is not a string, an Error is thrown. If the urlObject.port property value is truthy, and urlObject.hostname is not undefined: The literal string : is appended to result, and The value of urlObject.port is coerced to a string and appended to result.     Otherwise, if the urlObject.host property value is truthy, the value of urlObject.host is coerced to a string and appended to result. If the urlObject.pathname property is a string that is not an empty string: If the urlObject.pathname does not start with an ASCII forward slash (\/), then the literal string &#39;\/&#39; is appended to result. The value of urlObject.pathname is appended to result.   Otherwise, if urlObject.pathname is not undefined and is not a string, an Error is thrown. If the urlObject.search property is undefined and if the urlObject.query property is an Object, the literal string ? is appended to result followed by the output of calling the querystring module&#39;s stringify() method passing the value of urlObject.query. Otherwise, if urlObject.search is a string: If the value of urlObject.search does not start with the ASCII question mark (?) character, the literal string ? is appended to result. The value of urlObject.search is appended to result.   Otherwise, if urlObject.search is not undefined and is not a string, an Error is thrown. If the urlObject.hash property is a string: If the value of urlObject.hash does not start with the ASCII hash (#) character, the literal string # is appended to result. The value of urlObject.hash is appended to result.   Otherwise, if the urlObject.hash property is not undefined and is not a string, an Error is thrown. result is returned."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_url_parse_urlstring_parsequerystring_slashesdenotehost","title":"url.parse(urlString[, parseQueryString[, slashesDenoteHost]])","description":"The url.parse() method takes a URL string, parses it, and returns a URL object. A TypeError is thrown if urlString is not a string. A URIError is thrown if the auth property is present but cannot be decoded."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_url_resolve_from_to","title":"url.resolve(from, to)","description":"The url.resolve() method resolves a target URL relative to a base URL in a manner similar to that of a Web browser resolving an anchor tag HREF. For example: const url = require(&#39;url&#39;); url.resolve(&#39;\/one\/two\/three&#39;, &#39;four&#39;);         \/\/ &#39;\/one\/two\/four&#39; url.resolve(&#39;http:\/\/example.com\/&#39;, &#39;\/one&#39;);    \/\/ &#39;http:\/\/example.com\/one&#39; url.resolve(&#39;http:\/\/example.com\/one&#39;, &#39;\/two&#39;); \/\/ &#39;http:\/\/example.com\/two&#39;"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_legacy_urlobject","title":"Legacy `urlObject`","description":"The legacy urlObject (require(&#39;url&#39;).Url) is created and returned by the url.parse() function."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_percent_encoding_in_urls","title":"Percent-Encoding in URLs","description":"URLs are permitted to only contain a certain range of characters. Any character falling outside of that range must be encoded. How such characters are encoded, and which characters to encode depends entirely on where the character is located within the structure of the URL."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_legacy_api","title":"Legacy API","description":"Within the Legacy API, spaces (&#39; &#39;) and the following characters will be automatically escaped in the properties of URL objects: < > \" ` \\r \\n \\t { } | \\ ^ &#39;  For example, the ASCII space character (&#39; &#39;) is encoded as %20. The ASCII forward slash (\/) character is encoded as %3C."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_whatwg_api","title":"WHATWG API","description":"The WHATWG URL Standard uses a more selective and fine grained approach to selecting encoded characters than that used by the Legacy API. The WHATWG algorithm defines four \"percent-encode sets\" that describe ranges of characters that must be percent-encoded:  The C0 control percent-encode set includes code points in range U+0000 to U+001F (inclusive) and all code points greater than U+007E.  The fragment percent-encode set includes the C0 control percent-encode set and code points U+0020, U+0022, U+003C, U+003E, and U+0060.  The path percent-encode set includes the C0 control percent-encode set and code points U+0020, U+0022, U+0023, U+003C, U+003E, U+003F, U+0060, U+007B, and U+007D.  The userinfo encode set includes the path percent-encode set and code points U+002F, U+003A, U+003B, U+003D, U+0040, U+005B, U+005C, U+005D, U+005E, and U+007C.   The userinfo percent-encode set is used exclusively for username and passwords encoded within the URL. The path percent-encode set is used for the path of most URLs. The fragment percent-encode set is used for URL fragments. The C0 control percent-encode set is used for host and path under certain specific conditions, in addition to all other cases. When non-ASCII characters appear within a hostname, the hostname is encoded using the Punycode algorithm. Note, however, that a hostname may contain both Punycode encoded and percent-encoded characters. For example: const myURL = new URL(&#39;https:\/\/%CF%80.com\/foo&#39;); console.log(myURL.href); \/\/ Prints https:\/\/xn--1xa.com\/foo console.log(myURL.origin); \/\/ Prints https:\/\/\u03c0.com"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util","title":"Util","description":"The util module is primarily designed to support the needs of Node.js&#39; own internal APIs. However, many of the utilities are useful for application and module developers as well. It can be accessed using: const util = require(&#39;util&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_callbackify_original","title":"util.callbackify(original)","description":"Takes an async function (or a function that returns a Promise) and returns a function following the error-first callback style, i.e. taking an (err, value) => ... callback as the last argument. In the callback, the first argument will be the rejection reason (or null if the Promise resolved), and the second argument will be the resolved value. const util = require(&#39;util&#39;);  async function fn() {   return &#39;hello world&#39;; } const callbackFunction = util.callbackify(fn);  callbackFunction((err, ret) => {   if (err) throw err;   console.log(ret); });  Will print: hello world  The callback is executed asynchronously, and will have a limited stack trace. If the callback throws, the process will emit an &#39;uncaughtException&#39; event, and if not handled will exit. Since null has a special meaning as the first argument to a callback, if a wrapped function rejects a Promise with a falsy value as a reason, the value is wrapped in an Error with the original value stored in a field named reason. function fn() {   return Promise.reject(null); } const callbackFunction = util.callbackify(fn);  callbackFunction((err, ret) => {   \/\/ When the Promise was rejected with `null` it is wrapped with an Error and   \/\/ the original value is stored in `reason`.   err && err.hasOwnProperty(&#39;reason&#39;) && err.reason === null;  \/\/ true });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_debuglog_section","title":"util.debuglog(section)","description":"The util.debuglog() method is used to create a function that conditionally writes debug messages to stderr based on the existence of the NODE_DEBUG environment variable. If the section name appears within the value of that environment variable, then the returned function operates similar to console.error(). If not, then the returned function is a no-op. const util = require(&#39;util&#39;); const debuglog = util.debuglog(&#39;foo&#39;);  debuglog(&#39;hello from foo [%d]&#39;, 123);  If this program is run with NODE_DEBUG=foo in the environment, then it will output something like: FOO 3245: hello from foo [123]  where 3245 is the process id. If it is not run with that environment variable set, then it will not print anything. The section supports wildcard also: const util = require(&#39;util&#39;); const debuglog = util.debuglog(&#39;foo-bar&#39;);  debuglog(&#39;hi there, it\\&#39;s foo-bar [%d]&#39;, 2333);  if it is run with NODE_DEBUG=foo* in the environment, then it will output something like: FOO-BAR 3257: hi there, it&#39;s foo-bar [2333]  Multiple comma-separated section names may be specified in the NODE_DEBUG environment variable: NODE_DEBUG=fs,net,tls."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_deprecate_fn_msg_code","title":"util.deprecate(fn, msg[, code])","description":"The util.deprecate() method wraps fn (which may be a function or class) in such a way that it is marked as deprecated. const util = require(&#39;util&#39;);  exports.obsoleteFunction = util.deprecate(() => {   \/\/ Do something here. }, &#39;obsoleteFunction() is deprecated. Use newShinyFunction() instead.&#39;);  When called, util.deprecate() will return a function that will emit a DeprecationWarning using the &#39;warning&#39; event. The warning will be emitted and printed to stderr the first time the returned function is called. After the warning is emitted, the wrapped function is called without emitting a warning. If the same optional code is supplied in multiple calls to util.deprecate(), the warning will be emitted only once for that code. const util = require(&#39;util&#39;);  const fn1 = util.deprecate(someFunction, someMessage, &#39;DEP0001&#39;); const fn2 = util.deprecate(someOtherFunction, someOtherMessage, &#39;DEP0001&#39;); fn1(); \/\/ emits a deprecation warning with code DEP0001 fn2(); \/\/ does not emit a deprecation warning because it has the same code  If either the --no-deprecation or --no-warnings command line flags are used, or if the process.noDeprecation property is set to true prior to the first deprecation warning, the util.deprecate() method does nothing. If the --trace-deprecation or --trace-warnings command line flags are set, or the process.traceDeprecation property is set to true, a warning and a stack trace are printed to stderr the first time the deprecated function is called. If the --throw-deprecation command line flag is set, or the process.throwDeprecation property is set to true, then an exception will be thrown when the deprecated function is called. The --throw-deprecation command line flag and process.throwDeprecation property take precedence over --trace-deprecation and process.traceDeprecation."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_format_format_args","title":"util.format(format[, ...args])","description":"The util.format() method returns a formatted string using the first argument as a printf-like format. The first argument is a string containing zero or more placeholder tokens. Each placeholder token is replaced with the converted value from the corresponding argument. Supported placeholders are:  %s - String. %d - Number (integer or floating point value). %i - Integer. %f - Floating point value. %j - JSON. Replaced with the string &#39;[Circular]&#39; if the argument contains circular references. %o - Object. A string representation of an object with generic JavaScript object formatting. Similar to util.inspect() with options { showHidden: true, showProxy: true }. This will show the full object including non-enumerable properties and proxies. %O - Object. A string representation of an object with generic JavaScript object formatting. Similar to util.inspect() without options. This will show the full object not including non-enumerable properties and proxies. %% - single percent sign (&#39;%&#39;). This does not consume an argument. Returns: {string} The formatted string  If the placeholder does not have a corresponding argument, the placeholder is not replaced. util.format(&#39;%s:%s&#39;, &#39;foo&#39;); \/\/ Returns: &#39;foo:%s&#39;  If there are more arguments passed to the util.format() method than the number of placeholders, the extra arguments are coerced into strings then concatenated to the returned string, each delimited by a space. Excessive arguments whose typeof is &#39;object&#39; or &#39;symbol&#39; (except null) will be transformed by util.inspect(). util.format(&#39;%s:%s&#39;, &#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;); \/\/ &#39;foo:bar baz&#39;  If the first argument is not a string then util.format() returns a string that is the concatenation of all arguments separated by spaces. Each argument is converted to a string using util.inspect(). util.format(1, 2, 3); \/\/ &#39;1 2 3&#39;  If only one argument is passed to util.format(), it is returned as it is without any formatting. util.format(&#39;%% %s&#39;); \/\/ &#39;%% %s&#39;  Please note that util.format() is a synchronous method that is mainly intended as a debugging tool. Some input values can have a significant performance overhead that can block the event loop. Use this function with care and never in a hot code path."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_formatwithoptions_inspectoptions_format_args","title":"util.formatWithOptions(inspectOptions, format[, ...args])","description":"This function is identical to util.format(), except in that it takes an inspectOptions argument which specifies options that are passed along to util.inspect(). util.formatWithOptions({ colors: true }, &#39;See object %O&#39;, { foo: 42 }); \/\/ Returns &#39;See object { foo: 42 }&#39;, where `42` is colored as a number \/\/ when printed to a terminal."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_getsystemerrorname_err","title":"util.getSystemErrorName(err)","description":"Returns the string name for a numeric error code that comes from a Node.js API. The mapping between error codes and error names is platform-dependent. See Common System Errors for the names of common errors. fs.access(&#39;file\/that\/does\/not\/exist&#39;, (err) => {   const name = util.getSystemErrorName(err.errno);   console.error(name);  \/\/ ENOENT });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_inherits_constructor_superconstructor","title":"util.inherits(constructor, superConstructor)","description":"Usage of util.inherits() is discouraged. Please use the ES6 class and extends keywords to get language level inheritance support. Also note that the two styles are semantically incompatible.  constructor {Function} superConstructor {Function}  Inherit the prototype methods from one constructor into another. The prototype of constructor will be set to a new object created from superConstructor. As an additional convenience, superConstructor will be accessible through the constructor.super_ property. const util = require(&#39;util&#39;); const EventEmitter = require(&#39;events&#39;);  function MyStream() {   EventEmitter.call(this); }  util.inherits(MyStream, EventEmitter);  MyStream.prototype.write = function(data) {   this.emit(&#39;data&#39;, data); };  const stream = new MyStream();  console.log(stream instanceof EventEmitter); \/\/ true console.log(MyStream.super_ === EventEmitter); \/\/ true  stream.on(&#39;data&#39;, (data) => {   console.log(`Received data: \"${data}\"`); }); stream.write(&#39;It works!&#39;); \/\/ Received data: \"It works!\"  ES6 example using class and extends: const EventEmitter = require(&#39;events&#39;);  class MyStream extends EventEmitter {   write(data) {     this.emit(&#39;data&#39;, data);   } }  const stream = new MyStream();  stream.on(&#39;data&#39;, (data) => {   console.log(`Received data: \"${data}\"`); }); stream.write(&#39;With ES6&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_inspect_object_options","title":"util.inspect(object[, options])","description":"The util.inspect() method returns a string representation of object that is intended for debugging. The output of util.inspect may change at any time and should not be depended upon programmatically. Additional options may be passed that alter certain aspects of the formatted string. util.inspect() will use the constructor&#39;s name and\/or @@toStringTag to make an identifiable tag for an inspected value. class Foo {   get [Symbol.toStringTag]() {     return &#39;bar&#39;;   } }  class Bar {}  const baz = Object.create(null, { [Symbol.toStringTag]: { value: &#39;foo&#39; } });  util.inspect(new Foo()); \/\/ &#39;Foo [bar] {}&#39; util.inspect(new Bar()); \/\/ &#39;Bar {}&#39; util.inspect(baz);       \/\/ &#39;[foo] {}&#39;  The following example inspects all properties of the util object: const util = require(&#39;util&#39;);  console.log(util.inspect(util, { showHidden: true, depth: null }));  Values may supply their own custom inspect(depth, opts) functions, when called these receive the current depth in the recursive inspection, as well as the options object passed to util.inspect(). The following example highlights the difference with the compact option: const util = require(&#39;util&#39;);  const o = {   a: [1, 2, [[     &#39;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do &#39; +       &#39;eiusmod tempor incididunt ut labore et dolore magna aliqua.&#39;,     &#39;test&#39;,     &#39;foo&#39;]], 4],   b: new Map([[&#39;za&#39;, 1], [&#39;zb&#39;, &#39;test&#39;]]) }; console.log(util.inspect(o, { compact: true, depth: 5, breakLength: 80 }));  \/\/ This will print  \/\/ { a: \/\/   [ 1, \/\/     2, \/\/     [ [ &#39;Lorem ipsum dolor sit amet, consectetur [...]&#39;, \/\/ A long line \/\/           &#39;test&#39;, \/\/           &#39;foo&#39; ] ], \/\/     4 ], \/\/   b: Map { &#39;za&#39; => 1, &#39;zb&#39; => &#39;test&#39; } }  \/\/ Setting `compact` to false changes the output to be more reader friendly. console.log(util.inspect(o, { compact: false, depth: 5, breakLength: 80 }));  \/\/ { \/\/   a: [ \/\/     1, \/\/     2, \/\/     [ \/\/       [ \/\/         &#39;Lorem ipsum dolor sit amet, consectetur &#39; + \/\/           &#39;adipiscing elit, sed do eiusmod tempor &#39; + \/\/           &#39;incididunt ut labore et dolore magna &#39; + \/\/           &#39;aliqua., \/\/         &#39;test&#39;, \/\/         &#39;foo&#39; \/\/       ] \/\/     ], \/\/     4 \/\/   ], \/\/   b: Map { \/\/     &#39;za&#39; => 1, \/\/     &#39;zb&#39; => &#39;test&#39; \/\/   } \/\/ }  \/\/ Setting `breakLength` to e.g. 150 will print the \"Lorem ipsum\" text in a \/\/ single line. \/\/ Reducing the `breakLength` will split the \"Lorem ipsum\" text in smaller \/\/ chunks.  Using the showHidden option allows to inspect WeakMap and WeakSet entries. If there are more entries than maxArrayLength, there is no guarantee which entries are displayed. That means retrieving the same WeakSet entries twice might actually result in a different output. Besides this any item might be collected at any point of time by the garbage collector if there is no strong reference left to that object. Therefore there is no guarantee to get a reliable output. const { inspect } = require(&#39;util&#39;);  const obj = { a: 1 }; const obj2 = { b: 2 }; const weakSet = new WeakSet([obj, obj2]);  console.log(inspect(weakSet, { showHidden: true })); \/\/ WeakSet { { a: 1 }, { b: 2 } }  Please note that util.inspect() is a synchronous method that is mainly intended as a debugging tool. Some input values can have a significant performance overhead that can block the event loop. Use this function with care and never in a hot code path."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_customizing_util_inspect_colors","title":"Customizing `util.inspect` colors","description":"Color output (if enabled) of util.inspect is customizable globally via the util.inspect.styles and util.inspect.colors properties. util.inspect.styles is a map associating a style name to a color from util.inspect.colors. The default styles and associated colors are:  number - yellow boolean - yellow string - green date - magenta regexp - red null - bold undefined - grey special - cyan (only applied to functions at this time) name - (no styling)  The predefined color codes are: white, grey, black, blue, cyan, green, magenta, red and yellow. There are also bold, italic, underline and inverse codes. Color styling uses ANSI control codes that may not be supported on all terminals."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_custom_inspection_functions_on_objects","title":"Custom inspection functions on Objects","description":"Objects may also define their own [util.inspect.custom](depth, opts) (or the equivalent but deprecated inspect(depth, opts)) function that util.inspect() will invoke and use the result of when inspecting the object: const util = require(&#39;util&#39;);  class Box {   constructor(value) {     this.value = value;   }    [util.inspect.custom](depth, options) {     if (depth < 0) {       return options.stylize(&#39;[Box]&#39;, &#39;special&#39;);     }      const newOptions = Object.assign({}, options, {       depth: options.depth === null ? null : options.depth - 1     });      \/\/ Five space padding because that&#39;s the size of \"Box< \".     const padding = &#39; &#39;.repeat(5);     const inner = util.inspect(this.value, newOptions)                       .replace(\/\\n\/g, `\\n${padding}`);     return `${options.stylize(&#39;Box&#39;, &#39;special&#39;)}< ${inner} >`;   } }  const box = new Box(true);  util.inspect(box); \/\/ Returns: \"Box< true >\"  Custom [util.inspect.custom](depth, opts) functions typically return a string but may return a value of any type that will be formatted accordingly by util.inspect(). const util = require(&#39;util&#39;);  const obj = { foo: &#39;this will not show up in the inspect() output&#39; }; obj[util.inspect.custom] = (depth) => {   return { bar: &#39;baz&#39; }; };  util.inspect(obj); \/\/ Returns: \"{ bar: &#39;baz&#39; }\""},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_isdeepstrictequal_val1_val2","title":"util.isDeepStrictEqual(val1, val2)","description":"Returns true if there is deep strict equality between val1 and val2. Otherwise, returns false. See assert.deepStrictEqual() for more information about deep strict equality."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_promisify_original","title":"util.promisify(original)","description":"Takes a function following the common error-first callback style, i.e. taking an (err, value) => ... callback as the last argument, and returns a version that returns promises. const util = require(&#39;util&#39;); const fs = require(&#39;fs&#39;);  const stat = util.promisify(fs.stat); stat(&#39;.&#39;).then((stats) => {   \/\/ Do something with `stats` }).catch((error) => {   \/\/ Handle the error. });  Or, equivalently using async functions: const util = require(&#39;util&#39;); const fs = require(&#39;fs&#39;);  const stat = util.promisify(fs.stat);  async function callStat() {   const stats = await stat(&#39;.&#39;);   console.log(`This directory is owned by ${stats.uid}`); }  If there is an original[util.promisify.custom] property present, promisify will return its value, see Custom promisified functions. promisify() assumes that original is a function taking a callback as its final argument in all cases. If original is not a function, promisify() will throw an error. If original is a function but its last argument is not an error-first callback, it will still be passed an error-first callback as its last argument."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_custom_promisified_functions","title":"Custom promisified functions","description":"Using the util.promisify.custom symbol one can override the return value of util.promisify(): const util = require(&#39;util&#39;);  function doSomething(foo, callback) {   \/\/ ... }  doSomething[util.promisify.custom] = (foo) => {   return getPromiseSomehow(); };  const promisified = util.promisify(doSomething); console.log(promisified === doSomething[util.promisify.custom]); \/\/ prints &#39;true&#39;  This can be useful for cases where the original function does not follow the standard format of taking an error-first callback as the last argument. For example, with a function that takes in (foo, onSuccessCallback, onErrorCallback): doSomething[util.promisify.custom] = (foo) => {   return new Promise((resolve, reject) => {     doSomething(foo, resolve, reject);   }); };  If promisify.custom is defined but is not a function, promisify() will throw an error."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_deprecated_apis","title":"Deprecated APIs","description":"The following APIs are deprecated and should no longer be used. Existing applications and modules should be updated to find alternative approaches."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_extend_target_source","title":"util.\\_extend(target, source)","description":"The util._extend() method was never intended to be used outside of internal Node.js modules. The community found and used it anyway. It is deprecated and should not be used in new code. JavaScript comes with very similar built-in functionality through Object.assign()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_debug_string","title":"util.debug(string)","description":"Deprecated predecessor of console.error."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_error_strings","title":"util.error([...strings])","description":"Deprecated predecessor of console.error."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_isarray_object","title":"util.isArray(object)","description":"Alias for Array.isArray(). Returns true if the given object is an Array. Otherwise, returns false. const util = require(&#39;util&#39;);  util.isArray([]); \/\/ Returns: true util.isArray(new Array()); \/\/ Returns: true util.isArray({}); \/\/ Returns: false"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_isboolean_object","title":"util.isBoolean(object)","description":"Returns true if the given object is a Boolean. Otherwise, returns false. const util = require(&#39;util&#39;);  util.isBoolean(1); \/\/ Returns: false util.isBoolean(0); \/\/ Returns: false util.isBoolean(false); \/\/ Returns: true"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_isbuffer_object","title":"util.isBuffer(object)","description":"Returns true if the given object is a Buffer. Otherwise, returns false. const util = require(&#39;util&#39;);  util.isBuffer({ length: 0 }); \/\/ Returns: false util.isBuffer([]); \/\/ Returns: false util.isBuffer(Buffer.from(&#39;hello world&#39;)); \/\/ Returns: true"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_isdate_object","title":"util.isDate(object)","description":"Returns true if the given object is a Date. Otherwise, returns false. const util = require(&#39;util&#39;);  util.isDate(new Date()); \/\/ Returns: true util.isDate(Date()); \/\/ false (without &#39;new&#39; returns a String) util.isDate({}); \/\/ Returns: false"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_iserror_object","title":"util.isError(object)","description":"Returns true if the given object is an Error. Otherwise, returns false. const util = require(&#39;util&#39;);  util.isError(new Error()); \/\/ Returns: true util.isError(new TypeError()); \/\/ Returns: true util.isError({ name: &#39;Error&#39;, message: &#39;an error occurred&#39; }); \/\/ Returns: false  Note that this method relies on Object.prototype.toString() behavior. It is possible to obtain an incorrect result when the object argument manipulates @@toStringTag. const util = require(&#39;util&#39;); const obj = { name: &#39;Error&#39;, message: &#39;an error occurred&#39; };  util.isError(obj); \/\/ Returns: false obj[Symbol.toStringTag] = &#39;Error&#39;; util.isError(obj); \/\/ Returns: true"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_isfunction_object","title":"util.isFunction(object)","description":"Returns true if the given object is a Function. Otherwise, returns false. const util = require(&#39;util&#39;);  function Foo() {} const Bar = () => {};  util.isFunction({}); \/\/ Returns: false util.isFunction(Foo); \/\/ Returns: true util.isFunction(Bar); \/\/ Returns: true"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_isnull_object","title":"util.isNull(object)","description":"Returns true if the given object is strictly null. Otherwise, returns false. const util = require(&#39;util&#39;);  util.isNull(0); \/\/ Returns: false util.isNull(undefined); \/\/ Returns: false util.isNull(null); \/\/ Returns: true"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_isnullorundefined_object","title":"util.isNullOrUndefined(object)","description":"Stability: 0 - Deprecated: Use value === undefined || value === null instead. Returns true if the given object is null or undefined. Otherwise, returns false. const util = require(&#39;util&#39;);  util.isNullOrUndefined(0); \/\/ Returns: false util.isNullOrUndefined(undefined); \/\/ Returns: true util.isNullOrUndefined(null); \/\/ Returns: true"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_isnumber_object","title":"util.isNumber(object)","description":"Returns true if the given object is a Number. Otherwise, returns false. const util = require(&#39;util&#39;);  util.isNumber(false); \/\/ Returns: false util.isNumber(Infinity); \/\/ Returns: true util.isNumber(0); \/\/ Returns: true util.isNumber(NaN); \/\/ Returns: true"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_isobject_object","title":"util.isObject(object)","description":"Stability: 0 - Deprecated: Use value !== null && typeof value === &#39;object&#39; instead. Returns true if the given object is strictly an Object and not a Function (even though functions are objects in JavaScript). Otherwise, returns false. const util = require(&#39;util&#39;);  util.isObject(5); \/\/ Returns: false util.isObject(null); \/\/ Returns: false util.isObject({}); \/\/ Returns: true util.isObject(() => {}); \/\/ Returns: false"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_isprimitive_object","title":"util.isPrimitive(object)","description":"Stability: 0 - Deprecated: Use (typeof value !== &#39;object&#39; && typeof value !== &#39;function&#39;) || value === null instead. Returns true if the given object is a primitive type. Otherwise, returns false. const util = require(&#39;util&#39;);  util.isPrimitive(5); \/\/ Returns: true util.isPrimitive(&#39;foo&#39;); \/\/ Returns: true util.isPrimitive(false); \/\/ Returns: true util.isPrimitive(null); \/\/ Returns: true util.isPrimitive(undefined); \/\/ Returns: true util.isPrimitive({}); \/\/ Returns: false util.isPrimitive(() => {}); \/\/ Returns: false util.isPrimitive(\/^$\/); \/\/ Returns: false util.isPrimitive(new Date()); \/\/ Returns: false"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_isregexp_object","title":"util.isRegExp(object)","description":"Returns true if the given object is a RegExp. Otherwise, returns false. const util = require(&#39;util&#39;);  util.isRegExp(\/some regexp\/); \/\/ Returns: true util.isRegExp(new RegExp(&#39;another regexp&#39;)); \/\/ Returns: true util.isRegExp({}); \/\/ Returns: false"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_isstring_object","title":"util.isString(object)","description":"Returns true if the given object is a string. Otherwise, returns false. const util = require(&#39;util&#39;);  util.isString(&#39;&#39;); \/\/ Returns: true util.isString(&#39;foo&#39;); \/\/ Returns: true util.isString(String(&#39;foo&#39;)); \/\/ Returns: true util.isString(5); \/\/ Returns: false"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_issymbol_object","title":"util.isSymbol(object)","description":"Returns true if the given object is a Symbol. Otherwise, returns false. const util = require(&#39;util&#39;);  util.isSymbol(5); \/\/ Returns: false util.isSymbol(&#39;foo&#39;); \/\/ Returns: false util.isSymbol(Symbol(&#39;foo&#39;)); \/\/ Returns: true"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_isundefined_object","title":"util.isUndefined(object)","description":"Returns true if the given object is undefined. Otherwise, returns false. const util = require(&#39;util&#39;);  const foo = undefined; util.isUndefined(5); \/\/ Returns: false util.isUndefined(foo); \/\/ Returns: true util.isUndefined(null); \/\/ Returns: false"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_log_string","title":"util.log(string)","description":"The util.log() method prints the given string to stdout with an included timestamp. const util = require(&#39;util&#39;);  util.log(&#39;Timestamped message.&#39;);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_print_strings","title":"util.print([...strings])","description":"Deprecated predecessor of console.log."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_util_puts_strings","title":"util.puts([...strings])","description":"Deprecated predecessor of console.log."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_v8","title":"V8","description":"The v8 module exposes APIs that are specific to the version of V8 built into the Node.js binary. It can be accessed using: const v8 = require(&#39;v8&#39;);  The APIs and implementation are subject to change at any time."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_v8_cacheddataversiontag","title":"v8.cachedDataVersionTag()","description":"Returns an integer representing a \"version tag\" derived from the V8 version, command line flags and detected CPU features. This is useful for determining whether a vm.Script cachedData buffer is compatible with this instance of V8."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_v8_getheapspacestatistics","title":"v8.getHeapSpaceStatistics()","description":"Returns statistics about the V8 heap spaces, i.e. the segments which make up the V8 heap. Neither the ordering of heap spaces, nor the availability of a heap space can be guaranteed as the statistics are provided via the V8 GetHeapSpaceStatistics function and may change from one V8 version to the next. The value returned is an array of objects containing the following properties:  space_name {string} space_size {number} space_used_size {number} space_available_size {number} physical_space_size {number}  [   {     \"space_name\": \"new_space\",     \"space_size\": 2063872,     \"space_used_size\": 951112,     \"space_available_size\": 80824,     \"physical_space_size\": 2063872   },   {     \"space_name\": \"old_space\",     \"space_size\": 3090560,     \"space_used_size\": 2493792,     \"space_available_size\": 0,     \"physical_space_size\": 3090560   },   {     \"space_name\": \"code_space\",     \"space_size\": 1260160,     \"space_used_size\": 644256,     \"space_available_size\": 960,     \"physical_space_size\": 1260160   },   {     \"space_name\": \"map_space\",     \"space_size\": 1094160,     \"space_used_size\": 201608,     \"space_available_size\": 0,     \"physical_space_size\": 1094160   },   {     \"space_name\": \"large_object_space\",     \"space_size\": 0,     \"space_used_size\": 0,     \"space_available_size\": 1490980608,     \"physical_space_size\": 0   } ]"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_v8_getheapstatistics","title":"v8.getHeapStatistics()","description":"Returns an object with the following properties:  total_heap_size {number} total_heap_size_executable {number} total_physical_size {number} total_available_size {number} used_heap_size {number} heap_size_limit {number} malloced_memory {number} peak_malloced_memory {number} does_zap_garbage {number}  does_zap_garbage is a 0\/1 boolean, which signifies whether the --zap_code_space option is enabled or not. This makes V8 overwrite heap garbage with a bit pattern. The RSS footprint (resident memory set) gets bigger because it continuously touches all heap pages and that makes them less likely to get swapped out by the operating system.  {   total_heap_size: 7326976,   total_heap_size_executable: 4194304,   total_physical_size: 7326976,   total_available_size: 1152656,   used_heap_size: 3476208,   heap_size_limit: 1535115264,   malloced_memory: 16384,   peak_malloced_memory: 1127496,   does_zap_garbage: 0 }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_v8_setflagsfromstring_flags","title":"v8.setFlagsFromString(flags)","description":"The v8.setFlagsFromString() method can be used to programmatically set V8 command line flags. This method should be used with care. Changing settings after the VM has started may result in unpredictable behavior, including crashes and data loss; or it may simply do nothing. The V8 options available for a version of Node.js may be determined by running node --v8-options. An unofficial, community-maintained list of options and their effects is available here. Usage: \/\/ Print GC events to stdout for one minute. const v8 = require(&#39;v8&#39;); v8.setFlagsFromString(&#39;--trace_gc&#39;); setTimeout(function() { v8.setFlagsFromString(&#39;--notrace_gc&#39;); }, 60e3);"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_serialization_api","title":"Serialization API","description":"The serialization API provides means of serializing JavaScript values in a way that is compatible with the HTML structured clone algorithm. The format is backward-compatible (i.e. safe to store to disk). This API is under development, and changes (including incompatible changes to the API or wire format) may occur until this warning is removed."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_v8_serialize_value","title":"v8.serialize(value)","description":"Uses a DefaultSerializer to serialize value into a buffer."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_v8_deserialize_buffer","title":"v8.deserialize(buffer)","description":"Uses a DefaultDeserializer with default options to read a JS value from a buffer."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_vm_executing_javascript","title":"VM (Executing JavaScript)","description":"The vm module provides APIs for compiling and running code within V8 Virtual Machine contexts. JavaScript code can be compiled and run immediately or compiled, saved, and run later. A common use case is to run the code in a sandboxed environment. The sandboxed code uses a different V8 Context, meaning that it has a different global object than the rest of the code. One can provide the context by \"contextifying\" a sandbox object. The sandboxed code treats any property in the sandbox like a global variable. Any changes to global variables caused by the sandboxed code are reflected in the sandbox object. const vm = require(&#39;vm&#39;);  const x = 1;  const sandbox = { x: 2 }; vm.createContext(sandbox); \/\/ Contextify the sandbox.  const code = &#39;x += 40; var y = 17;&#39;; \/\/ x and y are global variables in the sandboxed environment. \/\/ Initially, x has the value 2 because that is the value of sandbox.x. vm.runInContext(code, sandbox);  console.log(sandbox.x); \/\/ 42 console.log(sandbox.y); \/\/ 17  console.log(x); \/\/ 1; y is not defined.  The vm module is not a security mechanism. Do not use it to run untrusted code."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_vm_createcontext_sandbox_options","title":"vm.createContext([sandbox[, options]])","description":"If given a sandbox object, the vm.createContext() method will prepare that sandbox so that it can be used in calls to vm.runInContext() or script.runInContext(). Inside such scripts, the sandbox object will be the global object, retaining all of its existing properties but also having the built-in objects and functions any standard global object has. Outside of scripts run by the vm module, global variables will remain unchanged. const util = require(&#39;util&#39;); const vm = require(&#39;vm&#39;);  global.globalVar = 3;  const sandbox = { globalVar: 1 }; vm.createContext(sandbox);  vm.runInContext(&#39;globalVar *= 2;&#39;, sandbox);  console.log(util.inspect(sandbox)); \/\/ { globalVar: 2 }  console.log(util.inspect(globalVar)); \/\/ 3  If sandbox is omitted (or passed explicitly as undefined), a new, empty contextified sandbox object will be returned. The vm.createContext() method is primarily useful for creating a single sandbox that can be used to run multiple scripts. For instance, if emulating a web browser, the method can be used to create a single sandbox representing a window&#39;s global object, then run all <script> tags together within the context of that sandbox. The provided name and origin of the context are made visible through the Inspector API."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_vm_iscontext_sandbox","title":"vm.isContext(sandbox)","description":"Returns true if the given sandbox object has been contextified using vm.createContext()."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_vm_runincontext_code_contextifiedsandbox_options","title":"vm.runInContext(code, contextifiedSandbox[, options])","description":"The vm.runInContext() method compiles code, runs it within the context of the contextifiedSandbox, then returns the result. Running code does not have access to the local scope. The contextifiedSandbox object must have been previously contextified using the vm.createContext() method. If options is a string, then it specifies the filename. The following example compiles and executes different scripts using a single contextified object: const util = require(&#39;util&#39;); const vm = require(&#39;vm&#39;);  const sandbox = { globalVar: 1 }; vm.createContext(sandbox);  for (let i = 0; i < 10; ++i) {   vm.runInContext(&#39;globalVar *= 2;&#39;, sandbox); } console.log(util.inspect(sandbox));  \/\/ { globalVar: 1024 }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_vm_runinnewcontext_code_sandbox_options","title":"vm.runInNewContext(code[, sandbox][, options])","description":"The vm.runInNewContext() first contextifies the given sandbox object (or creates a new sandbox if passed as undefined), compiles the code, runs it within the context of the created context, then returns the result. Running code does not have access to the local scope. If options is a string, then it specifies the filename. The following example compiles and executes code that increments a global variable and sets a new one. These globals are contained in the sandbox. const util = require(&#39;util&#39;); const vm = require(&#39;vm&#39;);  const sandbox = {   animal: &#39;cat&#39;,   count: 2 };  vm.runInNewContext(&#39;count += 1; name = \"kitty\"&#39;, sandbox); console.log(util.inspect(sandbox));  \/\/ { animal: &#39;cat&#39;, count: 3, name: &#39;kitty&#39; }"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_vm_runinthiscontext_code_options","title":"vm.runInThisContext(code[, options])","description":"vm.runInThisContext() compiles code, runs it within the context of the current global and returns the result. Running code does not have access to local scope, but does have access to the current global object. If options is a string, then it specifies the filename. The following example illustrates using both vm.runInThisContext() and the JavaScript eval() function to run the same code:  const vm = require(&#39;vm&#39;); let localVar = &#39;initial value&#39;;  const vmResult = vm.runInThisContext(&#39;localVar = \"vm\";&#39;); console.log(&#39;vmResult:&#39;, vmResult); console.log(&#39;localVar:&#39;, localVar);  const evalResult = eval(&#39;localVar = \"eval\";&#39;); console.log(&#39;evalResult:&#39;, evalResult); console.log(&#39;localVar:&#39;, localVar);  \/\/ vmResult: &#39;vm&#39;, localVar: &#39;initial value&#39; \/\/ evalResult: &#39;eval&#39;, localVar: &#39;eval&#39;  Because vm.runInThisContext() does not have access to the local scope, localVar is unchanged. In contrast, eval() does have access to the local scope, so the value localVar is changed. In this way vm.runInThisContext() is much like an indirect eval() call, e.g. (0,eval)(&#39;code&#39;). Example: Running an HTTP Server within a VM When using either script.runInThisContext() or vm.runInThisContext(), the code is executed within the current V8 global context. The code passed to this VM context will have its own isolated scope. In order to run a simple web server using the http module the code passed to the context must either call require(&#39;http&#39;) on its own, or have a reference to the http module passed to it. For instance: &#39;use strict&#39;; const vm = require(&#39;vm&#39;);  const code = ` ((require) => {   const http = require(&#39;http&#39;);    http.createServer((request, response) => {     response.writeHead(200, { &#39;Content-Type&#39;: &#39;text\/plain&#39; });     response.end(&#39;Hello World\\\\n&#39;);   }).listen(8124);    console.log(&#39;Server running at http:\/\/127.0.0.1:8124\/&#39;); })`;  vm.runInThisContext(code)(require);  The require() in the above case shares the state with the context it is passed from. This may introduce risks when untrusted code is executed, e.g. altering objects in the context in unwanted ways."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_what_does_it_mean_to_contextify_an_object","title":"What does it mean to \"contextify\" an object?","description":"All JavaScript executed within Node.js runs within the scope of a \"context\". According to the V8 Embedder&#39;s Guide:  In V8, a context is an execution environment that allows separate, unrelated, JavaScript applications to run in a single instance of V8. You must explicitly specify the context in which you want any JavaScript code to be run.  When the method vm.createContext() is called, the sandbox object that is passed in (or a newly created object if sandbox is undefined) is associated internally with a new instance of a V8 Context. This V8 Context provides the code run using the vm module&#39;s methods with an isolated global environment within which it can operate. The process of creating the V8 Context and associating it with the sandbox object is what this document refers to as \"contextifying\" the sandbox."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_worker_threads","title":"Worker Threads","description":"The worker module provides a way to create multiple environments running on independent threads, and to create message channels between them. It can be accessed using the --experimental-worker flag and: const worker = require(&#39;worker_threads&#39;);  Workers are useful for performing CPU-intensive JavaScript operations; do not use them for I\/O, since Node.js\u2019s built-in mechanisms for performing operations asynchronously already treat it more efficiently than Worker threads can. Workers, unlike child processes or when using the cluster module, can also share memory efficiently by transferring ArrayBuffer instances or sharing SharedArrayBuffer instances between them. Example const {   Worker, isMainThread, parentPort, workerData } = require(&#39;worker_threads&#39;);  if (isMainThread) {   module.exports = async function parseJSAsync(script) {     return new Promise((resolve, reject) => {       const worker = new Worker(__filename, {         workerData: script       });       worker.on(&#39;message&#39;, resolve);       worker.on(&#39;error&#39;, reject);       worker.on(&#39;exit&#39;, (code) => {         if (code !== 0)           reject(new Error(`Worker stopped with exit code ${code}`));       });     });   }; } else {   const { parse } = require(&#39;some-js-parsing-library&#39;);   const script = workerData;   parentPort.postMessage(parse(script)); }  Note that this example spawns a Worker thread for each parse call. In practice, it is strongly recommended to use a pool of Workers for these kinds of tasks, since the overhead of creating Workers would likely exceed the benefit of handing the work off to it."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib","title":"Zlib","description":"The zlib module provides compression functionality implemented using Gzip and Deflate\/Inflate. It can be accessed using: const zlib = require(&#39;zlib&#39;);  Compressing or decompressing a stream (such as a file) can be accomplished by piping the source stream data through a zlib stream into a destination stream: const gzip = zlib.createGzip(); const fs = require(&#39;fs&#39;); const inp = fs.createReadStream(&#39;input.txt&#39;); const out = fs.createWriteStream(&#39;input.txt.gz&#39;);  inp.pipe(gzip).pipe(out);  It is also possible to compress or decompress data in a single step: const input = &#39;.................................&#39;; zlib.deflate(input, (err, buffer) => {   if (!err) {     console.log(buffer.toString(&#39;base64&#39;));   } else {     \/\/ handle error   } });  const buffer = Buffer.from(&#39;eJzT0yMAAGTvBe8=&#39;, &#39;base64&#39;); zlib.unzip(buffer, (err, buffer) => {   if (!err) {     console.log(buffer.toString());   } else {     \/\/ handle error   } });"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_createdeflate_options","title":"zlib.createDeflate([options])","description":"Creates and returns a new Deflate object with the given options."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_createdeflateraw_options","title":"zlib.createDeflateRaw([options])","description":"Creates and returns a new DeflateRaw object with the given options. An upgrade of zlib from 1.2.8 to 1.2.11 changed behavior when windowBits is set to 8 for raw deflate streams. zlib would automatically set windowBits to 9 if was initially set to 8. Newer versions of zlib will throw an exception, so Node.js restored the original behavior of upgrading a value of 8 to 9, since passing windowBits = 9 to zlib actually results in a compressed stream that effectively uses an 8-bit window only."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_creategunzip_options","title":"zlib.createGunzip([options])","description":"Creates and returns a new Gunzip object with the given options."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_creategzip_options","title":"zlib.createGzip([options])","description":"Creates and returns a new Gzip object with the given options."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_createinflate_options","title":"zlib.createInflate([options])","description":"Creates and returns a new Inflate object with the given options."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_createinflateraw_options","title":"zlib.createInflateRaw([options])","description":"Creates and returns a new InflateRaw object with the given options."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_createunzip_options","title":"zlib.createUnzip([options])","description":"Creates and returns a new Unzip object with the given options."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_deflate_buffer_options_callback","title":"zlib.deflate(buffer[, options], callback)","description":"Compress a chunk of data with Deflate."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_deflatesync_buffer_options","title":"zlib.deflateSync(buffer[, options])","description":"Compress a chunk of data with Deflate."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_deflateraw_buffer_options_callback","title":"zlib.deflateRaw(buffer[, options], callback)","description":"Compress a chunk of data with DeflateRaw."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_deflaterawsync_buffer_options","title":"zlib.deflateRawSync(buffer[, options])","description":"Compress a chunk of data with DeflateRaw."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_gunzip_buffer_options_callback","title":"zlib.gunzip(buffer[, options], callback)","description":"Decompress a chunk of data with Gunzip."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_gunzipsync_buffer_options","title":"zlib.gunzipSync(buffer[, options])","description":"Decompress a chunk of data with Gunzip."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_gzip_buffer_options_callback","title":"zlib.gzip(buffer[, options], callback)","description":"Compress a chunk of data with Gzip."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_gzipsync_buffer_options","title":"zlib.gzipSync(buffer[, options])","description":"Compress a chunk of data with Gzip."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_inflate_buffer_options_callback","title":"zlib.inflate(buffer[, options], callback)","description":"Decompress a chunk of data with Inflate."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_inflatesync_buffer_options","title":"zlib.inflateSync(buffer[, options])","description":"Decompress a chunk of data with Inflate."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_inflateraw_buffer_options_callback","title":"zlib.inflateRaw(buffer[, options], callback)","description":"Decompress a chunk of data with InflateRaw."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_inflaterawsync_buffer_options","title":"zlib.inflateRawSync(buffer[, options])","description":"Decompress a chunk of data with InflateRaw."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_unzip_buffer_options_callback","title":"zlib.unzip(buffer[, options], callback)","description":"Decompress a chunk of data with Unzip."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_unzipsync_buffer_options","title":"zlib.unzipSync(buffer[, options])","description":"Decompress a chunk of data with Unzip."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_memory_usage_tuning","title":"Memory Usage Tuning","description":"From zlib\/zconf.h, modified to Node.js&#39;s usage: The memory requirements for deflate are (in bytes):  (1 << (windowBits + 2)) + (1 << (memLevel + 9))  That is: 128K for windowBits = 15 + 128K for memLevel = 8 (default values) plus a few kilobytes for small objects. For example, to reduce the default memory requirements from 256K to 128K, the options should be set to: const options = { windowBits: 14, memLevel: 7 };  This will, however, generally degrade compression. The memory requirements for inflate are (in bytes) 1 << windowBits. That is, 32K for windowBits = 15 (default value) plus a few kilobytes for small objects. This is in addition to a single internal output slab buffer of size chunkSize, which defaults to 16K. The speed of zlib compression is affected most dramatically by the level setting. A higher level will result in better compression, but will take longer to complete. A lower level will result in less compression, but will be much faster. In general, greater memory usage options will mean that Node.js has to make fewer calls to zlib because it will be able to process more data on each write operation. So, this is another factor that affects the speed, at the cost of memory usage."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_constants","title":"Constants","description":"All of the constants defined in zlib.h are also defined on require(&#39;zlib&#39;).constants. In the normal course of operations, it will not be necessary to use these constants. They are documented so that their presence is not surprising. This section is taken almost directly from the zlib documentation. See https:\/\/zlib.net\/manual.html#Constants for more details. Previously, the constants were available directly from require(&#39;zlib&#39;), for instance zlib.Z_NO_FLUSH. Accessing the constants directly from the module is currently still possible but is deprecated. Allowed flush values.  zlib.constants.Z_NO_FLUSH zlib.constants.Z_PARTIAL_FLUSH zlib.constants.Z_SYNC_FLUSH zlib.constants.Z_FULL_FLUSH zlib.constants.Z_FINISH zlib.constants.Z_BLOCK zlib.constants.Z_TREES  Return codes for the compression\/decompression functions. Negative values are errors, positive values are used for special but normal events.  zlib.constants.Z_OK zlib.constants.Z_STREAM_END zlib.constants.Z_NEED_DICT zlib.constants.Z_ERRNO zlib.constants.Z_STREAM_ERROR zlib.constants.Z_DATA_ERROR zlib.constants.Z_MEM_ERROR zlib.constants.Z_BUF_ERROR zlib.constants.Z_VERSION_ERROR  Compression levels.  zlib.constants.Z_NO_COMPRESSION zlib.constants.Z_BEST_SPEED zlib.constants.Z_BEST_COMPRESSION zlib.constants.Z_DEFAULT_COMPRESSION  Compression strategy.  zlib.constants.Z_FILTERED zlib.constants.Z_HUFFMAN_ONLY zlib.constants.Z_RLE zlib.constants.Z_FIXED zlib.constants.Z_DEFAULT_STRATEGY"},{"url":"http:\/\/nodejs.org\/api\/all.html#all_class_options","title":"Class: Options","description":"Each class takes an options object. All options are optional. Note that some options are only relevant when compressing, and are ignored by the decompression classes.  flush {integer} Default: zlib.constants.Z_NO_FLUSH finishFlush {integer} Default: zlib.constants.Z_FINISH chunkSize {integer} Default: 16 * 1024 windowBits {integer} level {integer} (compression only) memLevel {integer} (compression only) strategy {integer} (compression only) dictionary {Buffer|TypedArray|DataView|ArrayBuffer} (deflate\/inflate only, empty dictionary by default) info {boolean} (If true, returns an object with buffer and engine.)  See the description of deflateInit2 and inflateInit2 at https:\/\/zlib.net\/manual.html#Advanced for more information on these."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_convenience_methods","title":"Convenience Methods","description":"All of these take a Buffer, TypedArray, DataView, ArrayBuffer or string as the first argument, an optional second argument to supply options to the zlib classes and will call the supplied callback with callback(error, result). Every method has a *Sync counterpart, which accept the same arguments, but without a callback."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_deflate_buffer_options_callback","title":"zlib.deflate(buffer[, options], callback)","description":"Compress a chunk of data with Deflate."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_deflatesync_buffer_options","title":"zlib.deflateSync(buffer[, options])","description":"Compress a chunk of data with Deflate."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_deflateraw_buffer_options_callback","title":"zlib.deflateRaw(buffer[, options], callback)","description":"Compress a chunk of data with DeflateRaw."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_deflaterawsync_buffer_options","title":"zlib.deflateRawSync(buffer[, options])","description":"Compress a chunk of data with DeflateRaw."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_gunzip_buffer_options_callback","title":"zlib.gunzip(buffer[, options], callback)","description":"Decompress a chunk of data with Gunzip."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_gunzipsync_buffer_options","title":"zlib.gunzipSync(buffer[, options])","description":"Decompress a chunk of data with Gunzip."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_gzip_buffer_options_callback","title":"zlib.gzip(buffer[, options], callback)","description":"Compress a chunk of data with Gzip."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_gzipsync_buffer_options","title":"zlib.gzipSync(buffer[, options])","description":"Compress a chunk of data with Gzip."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_inflate_buffer_options_callback","title":"zlib.inflate(buffer[, options], callback)","description":"Decompress a chunk of data with Inflate."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_inflatesync_buffer_options","title":"zlib.inflateSync(buffer[, options])","description":"Decompress a chunk of data with Inflate."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_inflateraw_buffer_options_callback","title":"zlib.inflateRaw(buffer[, options], callback)","description":"Decompress a chunk of data with InflateRaw."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_inflaterawsync_buffer_options","title":"zlib.inflateRawSync(buffer[, options])","description":"Decompress a chunk of data with InflateRaw."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_unzip_buffer_options_callback","title":"zlib.unzip(buffer[, options], callback)","description":"Decompress a chunk of data with Unzip."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_zlib_unzipsync_buffer_options","title":"zlib.unzipSync(buffer[, options])","description":"Decompress a chunk of data with Unzip."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_threadpool_usage","title":"Threadpool Usage","description":"Note that all zlib APIs except those that are explicitly synchronous use libuv&#39;s threadpool. This can lead to surprising effects in some applications, such as subpar performance (which can be mitigated by adjusting the pool size) and\/or unrecoverable and catastrophic memory fragmentation."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_compressing_http_requests_and_responses","title":"Compressing HTTP requests and responses","description":"The zlib module can be used to implement support for the gzip and deflate content-encoding mechanisms defined by HTTP. The HTTP Accept-Encoding header is used within an http request to identify the compression encodings accepted by the client. The Content-Encoding header is used to identify the compression encodings actually applied to a message. The examples given below are drastically simplified to show the basic concept. Using zlib encoding can be expensive, and the results ought to be cached. See Memory Usage Tuning for more information on the speed\/memory\/compression tradeoffs involved in zlib usage. \/\/ client request example const zlib = require(&#39;zlib&#39;); const http = require(&#39;http&#39;); const fs = require(&#39;fs&#39;); const request = http.get({ host: &#39;example.com&#39;,                            path: &#39;\/&#39;,                            port: 80,                            headers: { &#39;Accept-Encoding&#39;: &#39;gzip,deflate&#39; } }); request.on(&#39;response&#39;, (response) => {   const output = fs.createWriteStream(&#39;example.com_index.html&#39;);    switch (response.headers[&#39;content-encoding&#39;]) {     \/\/ or, just use zlib.createUnzip() to handle both cases     case &#39;gzip&#39;:       response.pipe(zlib.createGunzip()).pipe(output);       break;     case &#39;deflate&#39;:       response.pipe(zlib.createInflate()).pipe(output);       break;     default:       response.pipe(output);       break;   } });  \/\/ server example \/\/ Running a gzip operation on every request is quite expensive. \/\/ It would be much more efficient to cache the compressed buffer. const zlib = require(&#39;zlib&#39;); const http = require(&#39;http&#39;); const fs = require(&#39;fs&#39;); http.createServer((request, response) => {   const raw = fs.createReadStream(&#39;index.html&#39;);   let acceptEncoding = request.headers[&#39;accept-encoding&#39;];   if (!acceptEncoding) {     acceptEncoding = &#39;&#39;;   }    \/\/ Note: This is not a conformant accept-encoding parser.   \/\/ See https:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec14.html#sec14.3   if (\/\\bdeflate\\b\/.test(acceptEncoding)) {     response.writeHead(200, { &#39;Content-Encoding&#39;: &#39;deflate&#39; });     raw.pipe(zlib.createDeflate()).pipe(response);   } else if (\/\\bgzip\\b\/.test(acceptEncoding)) {     response.writeHead(200, { &#39;Content-Encoding&#39;: &#39;gzip&#39; });     raw.pipe(zlib.createGzip()).pipe(response);   } else {     response.writeHead(200, {});     raw.pipe(response);   } }).listen(1337);  By default, the zlib methods will throw an error when decompressing truncated data. However, if it is known that the data is incomplete, or the desire is to inspect only the beginning of a compressed file, it is possible to suppress the default error handling by changing the flushing method that is used to decompress the last chunk of input data: \/\/ This is a truncated version of the buffer from the above examples const buffer = Buffer.from(&#39;eJzT0yMA&#39;, &#39;base64&#39;);  zlib.unzip(   buffer,   { finishFlush: zlib.constants.Z_SYNC_FLUSH },   (err, buffer) => {     if (!err) {       console.log(buffer.toString());     } else {       \/\/ handle error     }   });  This will not change the behavior in other error-throwing situations, e.g. when the input data has an invalid format. Using this method, it will not be possible to determine whether the input ended prematurely or lacks the integrity checks, making it necessary to manually check that the decompressed result is valid."},{"url":"http:\/\/nodejs.org\/api\/all.html#all_flushing","title":"Flushing","description":"Calling .flush() on a compression stream will make zlib return as much output as currently possible. This may come at the cost of degraded compression quality, but can be useful when data needs to be available as soon as possible. In the following example, flush() is used to write a compressed partial HTTP response to the client: const zlib = require(&#39;zlib&#39;); const http = require(&#39;http&#39;);  http.createServer((request, response) => {   \/\/ For the sake of simplicity, the Accept-Encoding checks are omitted.   response.writeHead(200, { &#39;content-encoding&#39;: &#39;gzip&#39; });   const output = zlib.createGzip();   output.pipe(response);    setInterval(() => {     output.write(`The current time is ${Date()}\\n`, () => {       \/\/ The data has been passed to zlib, but the compression algorithm may       \/\/ have decided to buffer the data for more efficient compression.       \/\/ Calling .flush() will make the data available as soon as the client       \/\/ is ready to receive it.       output.flush();     });   }, 1000); }).listen(1337);"}]